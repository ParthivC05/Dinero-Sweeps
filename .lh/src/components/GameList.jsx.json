{
    "sourceFile": "src/components/GameList.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1753249926131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753250013178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,12 +47,9 @@\n   }, [current]);\r\n \r\n   useEffect(() => {\r\n     setLoading(true);\r\n-    const token = localStorage.getItem('authToken');\r\n-    fetch(`${import.meta.env.VITE_API_BASE_URL}/games`, {\r\n-      headers: token ? { Authorization: `Bearer ${token}` } : {}\r\n-    })\r\n+    fetch(`${import.meta.env.VITE_API_BASE_URL}/games`)\r\n       .then(res => res.json())\r\n       .then(data => {\r\n         setGames((data.games || []).slice(0, 12));\r\n         setLoading(false);\r\n@@ -68,15 +65,11 @@\n       alert('You must be logged in to play for real. Please log in or sign up.');\r\n       return;\r\n     }\r\n     try {\r\n-      const token = localStorage.getItem('authToken');\r\n       const res = await fetch(`${import.meta.env.VITE_API_BASE_URL}/games/launch`, {\r\n         method: 'POST',\r\n-        headers: {\r\n-          'Content-Type': 'application/json',\r\n-          ...(token ? { Authorization: `Bearer ${token}` } : {})\r\n-        },\r\n+        headers: { 'Content-Type': 'application/json' },\r\n         credentials: 'include',\r\n         body: JSON.stringify({ gameId, mode }),\r\n       });\r\n       const data = await res.json();\r\n"
                },
                {
                    "date": 1753250132331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,221 +1,432 @@\n-import React, { useState, useEffect, useRef } from \"react\";\r\n-import { FaSearch, FaPlay, FaRegSmile } from \"react-icons/fa\";\r\n-import slider1 from \"../assets/slider1.png\";\r\n-import slider2 from \"../assets/slider2.png\";\r\n-import Loader from \"./Loader\";\r\n+import React, { useState } from \"react\";\r\n+import banner from \"../assets/banner.png\";\r\n+import { Eye, EyeOff, AlertTriangle, CheckCircle, Calendar, User, Mail, Lock, ArrowDown } from \"lucide-react\";\r\n+import { ToastContainer, toast } from \"react-toastify\";\r\n+import \"react-toastify/dist/ReactToastify.css\";\r\n+import CommonInput from \"../components/CommonInput\";\r\n+import { useNavigate } from \"react-router-dom\";\r\n \r\n-const categories = [\r\n-  \"Promotions\", \"Gameplay\", \"Gameway\", \"Net Gaming\", \"Tada Gaming\", \"Hacksaw gaming\"\r\n-];\r\n+const initialState = {\r\n+  username: \"\",\r\n+  firstName: \"\",\r\n+  lastName: \"\",\r\n+  email: \"\",\r\n+  password: \"\",\r\n+  dobMonth: \"\",\r\n+  dobDay: \"\",\r\n+  dobYear: \"\",\r\n+  referredBy: \"\",\r\n+  ageCheck: false,\r\n+};\r\n \r\n-const gameSections = [\r\n-  \"Slots\", \"Scratchcards\", \"Keno\", \"Fishing\", \"Scratch-card\", \"Shooting\", \"Crash game\", \"Bingo\"\r\n+const months = [\r\n+  \"January\",\r\n+  \"February\",\r\n+  \"March\",\r\n+  \"April\",\r\n+  \"May\",\r\n+  \"June\",\r\n+  \"July\",\r\n+  \"August\",\r\n+  \"September\",\r\n+  \"October\",\r\n+  \"November\",\r\n+  \"December\",\r\n ];\r\n \r\n-const sliderImages = [slider1, slider2, slider2, slider1];\r\n+const currentYear = new Date().getFullYear();\r\n+const years = Array.from({ length: 100 }, (_, i) => currentYear - i);\r\n \r\n-const getSlides = (images, perSlide = 2) => {\r\n-  const slides = [];\r\n-  for (let i = 0; i < images.length; i += perSlide) {\r\n-    slides.push(images.slice(i, i + perSlide));\r\n-  }\r\n-  return slides;\r\n-};\r\n+const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8004/api/v1';\r\n \r\n-const slides = getSlides(sliderImages, 2);\r\n+const SignUp = () => {\r\n+  const [form, setForm] = useState(initialState);\r\n+  const [touched, setTouched] = useState({});\r\n+  const [errors, setErrors] = useState({});\r\n+  const [submitting, setSubmitting] = useState(false);\r\n+  const [checkingUsername, setCheckingUsername] = useState(false);\r\n+  const [usernameAvailable, setUsernameAvailable] = useState(null);\r\n+  const [showPassword, setShowPassword] = useState(false);\r\n+  const navigate = useNavigate();\r\n \r\n-const AUTO_SLIDE_INTERVAL = 2500;\r\n+  const calculateAge = (year, month, day) => {  \r\n+    if (!year || !month || !day) return 0;\r\n+    const monthIndex = months.indexOf(month);\r\n+    const dob = new Date(year, monthIndex, day);\r\n+    const today = new Date();\r\n+    let age = today.getFullYear() - dob.getFullYear();\r\n+    const m = today.getMonth() - dob.getMonth();\r\n+    if (m < 0 || (m === 0 && today.getDate() < dob.getDate())) {\r\n+      age--;\r\n+    }\r\n+    return age;\r\n+  };\r\n \r\n-const isLoggedIn = () => {\r\n-  return !!localStorage.getItem('authToken');\r\n-};\r\n+  const validate = (values) => {\r\n+    const errs = {};\r\n+    if (!values.username) errs.username = \"Username is required.\";\r\n+    else if (usernameAvailable === false) errs.username = \"Username is already taken.\";\r\n+    if (!values.firstName.trim()) errs.firstName = \"First name is required.\";\r\n+    if (!values.lastName.trim()) errs.lastName = \"Last name is required.\";\r\n+    if (!values.email) errs.email = \"Email is required.\";\r\n+    else if (!/^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/.test(values.email)) errs.email = \"Invalid email format.\";\r\n+    if (!values.password) errs.password = \"Password is required.\";\r\n+    else if (!/^(?=.*[A-Z])(?=.*\\d).{8,20}$/.test(values.password)) errs.password = \"8â€“20 chars, 1 number, 1 uppercase. Special characters allowed.\";\r\n+    if (!values.dobMonth) errs.dobMonth = \"Month required.\";\r\n+    if (!values.dobDay) errs.dobDay = \"Day required.\";\r\n+    else if (!/^\\d{1,2}$/.test(values.dobDay) || +values.dobDay < 1 || +values.dobDay > 31) errs.dobDay = \"Invalid day.\";\r\n+    if (!values.dobYear) errs.dobYear = \"Year required.\";\r\n+    else if (!/^\\d{4}$/.test(values.dobYear) || +values.dobYear < currentYear - 100 || +values.dobYear > currentYear) errs.dobYear = \"Invalid year.\";\r\n+    const age = calculateAge(values.dobYear, values.dobMonth, values.dobDay);\r\n+    if (values.dobYear && values.dobMonth && values.dobDay && age < 18) errs.dobYear = \"You must be at least 18 years old.\";\r\n+    if (!values.ageCheck) errs.ageCheck = \"You must confirm you are 18+.\";\r\n+    return errs;\r\n+  };\r\n \r\n-const GameList = () => {\r\n-  const [current, setCurrent] = useState(0);\r\n-  const timeoutRef = useRef(null);\r\n-  const [games, setGames] = useState([]);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState(null);\r\n-  const [hoveredIdx, setHoveredIdx] = useState(null);\r\n+  const handleChange = (e) => {\r\n+    const { name, value, type, checked } = e.target;\r\n+    setForm((prev) => ({ ...prev, [name]: type === \"checkbox\" ? checked : value }));\r\n+    if (name === \"username\") {\r\n+      setUsernameAvailable(null);\r\n+    }\r\n+  };\r\n \r\n-  const nextSlide = () => setCurrent((prev) => (prev + 1) % slides.length);\r\n-  const prevSlide = () => setCurrent((prev) => (prev - 1 + slides.length) % slides.length);\r\n+  const handleBlur = (e) => {\r\n+    setTouched((prev) => ({ ...prev, [e.target.name]: true }));\r\n+  };\r\n \r\n-  useEffect(() => {\r\n-    timeoutRef.current = setInterval(nextSlide, AUTO_SLIDE_INTERVAL);\r\n-    return () => clearInterval(timeoutRef.current);\r\n-  }, [current]);\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setTouched({\r\n+      username: true,\r\n+      firstName: true,\r\n+      lastName: true,\r\n+      email: true,\r\n+      password: true,\r\n+      dobMonth: true,\r\n+      dobDay: true,\r\n+      dobYear: true,\r\n+      ageCheck: true,\r\n+    });\r\n+    const validationErrors = validate(form);\r\n+    setErrors(validationErrors);\r\n+    if (Object.keys(validationErrors).length === 0) {\r\n+      setSubmitting(true);\r\n+      try {\r\n+        const dob = `${form.dobYear}-${String(months.indexOf(form.dobMonth) + 1).padStart(2, '0')}-${String(form.dobDay).padStart(2, '0')}`;\r\n+        const payload = {\r\n+          username: form.username,\r\n+          firstName: form.firstName,\r\n+          lastName: form.lastName,\r\n+          email: form.email,\r\n+          password: form.password,\r\n+          dateOfBirth: dob,\r\n+          referredBy: form.referredBy || undefined,\r\n+        };\r\n+        const response = await fetch(`${API_BASE_URL}/auth/register`, {\r\n+          method: \"POST\",\r\n+          headers: {\r\n+            \"Content-Type\": \"application/json\",\r\n+            \"Accept\": \"application/json\",\r\n+          },\r\n+          body: JSON.stringify(payload),\r\n+        });\r\n+        const data = await response.json();\r\n+        setSubmitting(false);\r\n+        if (response.ok && data.success) {\r\n+          toast.success(\"Signup successful! You can now log in.\");\r\n+          setForm(initialState);\r\n+          setTouched({});\r\n+          navigate(\"/login\"); \r\n+        } else {\r\n+          let errorMessage = \"Signup failed\";\r\n+          if (data.errors && data.errors.length > 0) {\r\n+            errorMessage = data.errors[0].message || data.errors[0];\r\n+          } else if (data.message) {\r\n+            errorMessage = data.message;\r\n+          } else if (data.error) {\r\n+            errorMessage = data.error;\r\n+          }\r\n+          toast.error(errorMessage);\r\n+        }\r\n+      } catch (error) {\r\n+        setSubmitting(false);\r\n+        let errorMessage = \"An unexpected error occurred. Please try again.\";\r\n+        if (error.message) errorMessage = error.message;\r\n+        toast.error(errorMessage);\r\n+      }\r\n+    }\r\n+  };\r\n \r\n-  useEffect(() => {\r\n-    setLoading(true);\r\n-    fetch(`${import.meta.env.VITE_API_BASE_URL}/games`)\r\n-      .then(res => res.json())\r\n-      .then(data => {\r\n-        setGames((data.games || []).slice(0, 12));\r\n-        setLoading(false);\r\n-      })\r\n-      .catch(err => {\r\n-        setError(\"Failed to load games\");\r\n-        setLoading(false);\r\n-      });\r\n-  }, []);\r\n+  React.useEffect(() => {\r\n+    setErrors(validate(form));\r\n+  }, [form, usernameAvailable]);\r\n \r\n-  const handleLaunch = async (gameId, mode) => {\r\n-    if (mode === 'real' && !isLoggedIn()) {\r\n-      alert('You must be logged in to play for real. Please log in or sign up.');\r\n-      return;\r\n-    }\r\n-    try {\r\n-      const res = await fetch(`${import.meta.env.VITE_API_BASE_URL}/games/launch`, {\r\n-        method: 'POST',\r\n\\ No newline at end of file\n-        headers: { 'Content-Type': 'application/json' },\r\n-        credentials: 'include',\r\n-        body: JSON.stringify({ gameId, mode }),\r\n-      });\r\n-      const data = await res.json();\r\n-      if (data.url) window.open(data.url, \"_blank\");\r\n-      else alert(data.error || \"Failed to launch game\");\r\n-    } catch (err) {\r\n-      alert(\"Failed to launch game\");\r\n-    }\r\n+  const isFormValid = Object.keys(errors).length === 0 && form.username && form.firstName && form.lastName && form.email && form.password && form.dobMonth && form.dobDay && form.dobYear && form.ageCheck && usernameAvailable !== false && calculateAge(form.dobYear, form.dobMonth, form.dobDay) >= 18;\r\n+\r\n+  const handleGoogleSignup = () => {\r\n+    window.location.href = `${API_BASE_URL}/auth/google`;\r\n   };\r\n \r\n+  const handleFacebookSignup = () => {\r\n+    window.location.href = `${API_BASE_URL}/auth/facebook`;\r\n+  };\r\n+\r\n   return (\r\n-    <main className=\"flex-1 p-4 bg-black min-h-screen\">\r\n-      <div className=\"flex items-center justify-between mb-8 gap-4\">\r\n-        <div className=\"flex-1 max-w-xl flex items-center bg-[#232224] rounded-lg px-4 py-2\">\r\n-          <FaSearch className=\"text-gray-400 mr-3 text-lg\" />\r\n-          <input\r\n-            type=\"text\"\r\n-            placeholder=\"Search Games and Game Providers\"\r\n-            className=\"flex-1 bg-transparent outline-none text-white placeholder:text-gray-400 text-base\"\r\n-          />\r\n-        </div>\r\n-        <button className=\"relative bg-gradient-to-b from-[#C0013A] to-[#A8002F] text-white font-medium rounded-lg px-8 py-2 text-lg shadow-md hover:brightness-110 transition-all\">\r\n-          <span className=\"absolute -top-2 left-3 w-4 h-4 bg-white rounded-t-md rotate-45\" style={{clipPath:'polygon(0 0,100% 0,100% 100%)'}}></span>\r\n-          <span className=\"relative z-10\">Get Coins</span>\r\n-        </button>\r\n-      </div>\r\n-      <div className=\"mb-6 relative max-w-2xl mx-auto\">\r\n-        <div className=\"overflow-hidden rounded-lg\">\r\n-          <div className=\"flex transition-transform duration-700\" style={{ transform: `translateX(-${current * 100}%)` }}>\r\n-            {slides.map((slideImgs, idx) => (\r\n-              <div key={idx} className=\"flex gap-4 min-w-full justify-center\">\r\n-                {slideImgs.map((img, i) => (\r\n-                  <img\r\n-                    key={i}\r\n-                    src={img}\r\n-                    alt={`Banner ${idx * 2 + i + 1}`}\r\n-                    className=\"rounded-lg object-cover h-44 w-1/2\"\r\n-                    style={{ minWidth: 180 }}\r\n+    <>\r\n+      <ToastContainer position=\"top-center\" autoClose={3000} />\r\n+      <div className=\"min-h-screen bg-black flex flex-col overflow-x-hidden\">\r\n+        <div className=\"flex-1 flex items-center justify-center w-full px-4 py-8\">\r\n+          <div className=\"w-full max-w-2xl p-6 bg-gray-900 rounded-2xl shadow-lg animate-fade-in\">\r\n+            <img src={banner} alt=\"Promo Banner\" className=\"w-full rounded-lg mb-6\" />\r\n+            <form onSubmit={handleSubmit} noValidate className=\"space-y-6\">\r\n+              <CommonInput\r\n+                label=\"Username\"\r\n+                type=\"text\"\r\n+                id=\"username\"\r\n+                name=\"username\"\r\n+                placeholder=\"Choose a username\"\r\n+                value={form.username}\r\n+                onChange={handleChange}\r\n+                onBlur={handleBlur}\r\n+                required\r\n+                autoComplete=\"username\"\r\n+                touched={touched.username}\r\n+                error={errors.username}\r\n+                valid={touched.username && !errors.username && form.username && usernameAvailable}\r\n+              />\r\n+              <CommonInput\r\n+                label=\"Email Address\"\r\n+                type=\"email\"\r\n+                id=\"email\"\r\n+                name=\"email\"\r\n+                placeholder=\"Enter your email\"\r\n+                value={form.email}\r\n+                onChange={handleChange}\r\n+                onBlur={handleBlur}\r\n+                required\r\n+                autoComplete=\"email\"\r\n+                touched={touched.email}\r\n+                error={errors.email}\r\n+                valid={touched.email && !errors.email && form.email}\r\n+              />\r\n+              <div className=\"space-y-2\">\r\n+                <label htmlFor=\"password\" className=\"block text-sm font-medium text-white items-center\">\r\n+                  <Lock className=\"w-4 h-4 mr-2\" />\r\n+                  Password\r\n+                </label>\r\n+                <div className=\"relative\">\r\n+                  <CommonInput\r\n+                    type={showPassword ? \"text\" : \"password\"}\r\n+                    id=\"password\"\r\n+                    name=\"password\"\r\n+                    placeholder=\"Create a password\"\r\n+                    value={form.password}\r\n+                    onChange={handleChange}\r\n+                    onBlur={handleBlur}\r\n+                    required\r\n+                    autoComplete=\"new-password\"\r\n+                    touched={touched.password}\r\n+                    error={errors.password}\r\n+                    valid={touched.password && !errors.password && form.password}\r\n+                    className=\"pr-12\"\r\n                   />\r\n-                ))}\r\n+                  <button\r\n+                    type=\"button\"\r\n+                    onClick={() => setShowPassword(!showPassword)}\r\n+                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white transition-colors\"\r\n+                  >\r\n+                    {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\r\n+                  </button>\r\n+                </div>\r\n               </div>\r\n-            ))}\r\n-          </div>\r\n-        </div>\r\n-        <button\r\n-          className=\"absolute left-2 top-1/2 -translate-y-1/2 bg-black/60 text-white rounded-full p-2 hover:bg-black/80 z-10\"\r\n-          onClick={prevSlide}\r\n-          aria-label=\"Previous slide\"\r\n-        >\r\n-          &#8592;\r\n-        </button>\r\n-        <button\r\n-          className=\"absolute right-2 top-1/2 -translate-y-1/2 bg-black/60 text-white rounded-full p-2 hover:bg-black/80 z-10\"\r\n-          onClick={nextSlide}\r\n-          aria-label=\"Next slide\"\r\n-        >\r\n-          &#8594;\r\n-        </button>\r\n-        <div className=\"flex justify-center gap-2 mt-2\">\r\n-          {slides.map((_, idx) => (\r\n-            <button\r\n-              key={idx}\r\n-              className={`w-2 h-2 rounded-full ${current === idx ? 'bg-pink-500' : 'bg-gray-500'}`}\r\n-              onClick={() => setCurrent(idx)}\r\n-              aria-label={`Go to slide ${idx + 1}`}\r\n-            />\r\n-          ))}\r\n-        </div>\r\n-      </div>\r\n-      <div className=\"mb-6 flex gap-2 items-center flex-wrap\">\r\n-        {categories.map((cat) => (\r\n-          <button\r\n-            key={cat}\r\n-            className=\"px-4 py-2 rounded-full border border-gray-600 text-white text-sm hover:bg-pink-500 hover:text-white transition\"\r\n-          >\r\n-            {cat}\r\n-          </button>\r\n-        ))}\r\n-      </div>\r\n-      {loading ? (\r\n-        <div className=\"text-white text-center py-10\"><Loader /></div>\r\n-      ) : error ? (\r\n-        <div className=\"text-red-400 text-center py-10\">{error}</div>\r\n-      ) : gameSections.map((section) => (\r\n-        <div className=\"mb-10\" key={section}>\r\n-          <div className=\"flex justify-between items-center mb-3\">\r\n-            <h5 className=\"text-white text-lg font-semibold\">{section}</h5>\r\n-            <button className=\"text-pink-400 font-bold text-sm hover:underline\">See All</button>\r\n-          </div>\r\n-          <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\">\r\n-            {games.map((game, idx) => {\r\n-              const imageSrc =\r\n-                game.thumbnail_url ||\r\n-                game.more_details?.media?.icon ||\r\n-                game.more_details?.media?.thumbnails?.[\"250x180\"] ||\r\n-                game.more_details?.media?.thumbnails?.[\"500x360\"] ||\r\n-                \"\";\r\n-              return (\r\n-                <div\r\n-                  key={idx}\r\n-                  className=\"bg-gray-900 rounded-lg overflow-hidden shadow hover:shadow-pink-400/30 transition relative flex flex-col items-center group\"\r\n-                  onMouseEnter={() => setHoveredIdx(idx)}\r\n-                  onMouseLeave={() => setHoveredIdx(null)}\r\n-                >\r\n-                  <img\r\n-                    src={imageSrc}\r\n-                    alt={game.name}\r\n-                    className=\"w-full h-32 object-cover rounded-t-lg\"\r\n+              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n+                <CommonInput\r\n+                  label=\"First Name\"\r\n+                  type=\"text\"\r\n+                  id=\"firstName\"\r\n+                  name=\"firstName\"\r\n+                  placeholder=\"First name\"\r\n+                  value={form.firstName}\r\n+                  onChange={handleChange}\r\n+                  onBlur={handleBlur}\r\n+                  required\r\n+                  autoComplete=\"given-name\"\r\n+                  touched={touched.firstName}\r\n+                  error={errors.firstName}\r\n+                  valid={touched.firstName && !errors.firstName && form.firstName}\r\n+                />\r\n+                <CommonInput\r\n+                  label=\"Last Name\"\r\n+                  type=\"text\"\r\n+                  id=\"lastName\"\r\n+                  name=\"lastName\"\r\n+                  placeholder=\"Last name\"\r\n+                  value={form.lastName}\r\n+                  onChange={handleChange}\r\n+                  onBlur={handleBlur}\r\n+                  required\r\n+                  autoComplete=\"family-name\"\r\n+                  touched={touched.lastName}\r\n+                  error={errors.lastName}\r\n+                  valid={touched.lastName && !errors.lastName && form.lastName}\r\n+                />\r\n+              </div>\r\n+              <div className=\"space-y-2\">\r\n+                <label className=\"block text-sm font-medium text-white items-center\">\r\n+                  <Calendar className=\"w-4 h-4 mr-2\" />\r\n+                  Date of Birth\r\n+                </label>\r\n+                <div className=\"grid grid-cols-3 gap-3\">\r\n+                  <select\r\n+                    id=\"dobMonth\"\r\n+                    name=\"dobMonth\"\r\n+                    value={form.dobMonth}\r\n+                    onChange={handleChange}\r\n+                    onBlur={handleBlur}\r\n+                    required\r\n+                    className={`input-field ${touched.dobMonth && errors.dobMonth ? \"border-danger-500 focus:ring-danger-500\" : \"\"}`}\r\n+                  >\r\n+                    <option value=\"\">Month</option>\r\n+                    {months.map((m) => (\r\n+                      <option key={m} value={m}>{m}</option>\r\n+                    ))}\r\n+                  </select>\r\n+                  <CommonInput\r\n+                    type=\"text\"\r\n+                    id=\"dobDay\"\r\n+                    name=\"dobDay\"\r\n+                    placeholder=\"Day\"\r\n+                    value={form.dobDay}\r\n+                    onChange={handleChange}\r\n+                    onBlur={handleBlur}\r\n+                    required\r\n+                    inputMode=\"numeric\"\r\n+                    pattern=\"[0-9]*\"\r\n+                    touched={touched.dobDay}\r\n+                    error={errors.dobDay}\r\n+                    valid={touched.dobDay && !errors.dobDay && form.dobDay}\r\n                   />\r\n-                  <div className=\"p-2 text-white text-center font-semibold\">{game.name}</div>\r\n-                  {hoveredIdx === idx && (\r\n-                    <div className=\"absolute inset-0 flex items-center justify-center bg-black/40 transition-opacity group-hover:opacity-100 opacity-100 gap-4\">\r\n-                      <button\r\n-                        className=\"flex flex-col items-center group/play\"\r\n-                        title=\"Fun Play\"\r\n-                        onClick={e => {\r\n-                          e.stopPropagation();\r\n-                          handleLaunch(game.casino_game_id, 'fun');\r\n-                        }}\r\n-                      >\r\n-                        <FaRegSmile className=\"text-white text-3xl mb-1 group-hover/play:text-yellow-300\" />\r\n-                        <span className=\"text-xs text-white\">Demo</span>\r\n-                      </button>\r\n-                      <button\r\n-                        className=\"flex flex-col items-center group/play\"\r\n-                        title={isLoggedIn() ? \"Real Play\" : \"Login required\"}\r\n-                        disabled={!isLoggedIn()}\r\n-                        style={{ opacity: isLoggedIn() ? 1 : 0.5, cursor: isLoggedIn() ? 'pointer' : 'not-allowed' }}\r\n-                        onClick={e => {\r\n-                          e.stopPropagation();\r\n-                          handleLaunch(game.casino_game_id, 'real');\r\n-                        }}\r\n-                      >\r\n-                        <FaPlay className=\"text-white text-3xl mb-1 group-hover/play:text-green-400\" />\r\n-                        <span className=\"text-xs text-white\">Real</span>\r\n-                      </button>\r\n-                    </div>\r\n-                  )}\r\n+                  <select\r\n+                    id=\"dobYear\"\r\n+                    name=\"dobYear\"\r\n+                    value={form.dobYear}\r\n+                    onChange={handleChange}\r\n+                    onBlur={handleBlur}\r\n+                    required\r\n+                    className={`input-field ${touched.dobYear && errors.dobYear ? \"border-danger-500 focus:ring-danger-500\" : \"\"}`}\r\n+                  >\r\n+                    <option value=\"\">Year</option>\r\n+                    {years.map((y) => (\r\n+                      <option key={y} value={y}>{y}</option>\r\n+                    ))}\r\n+                  </select>\r\n                 </div>\r\n-              );\r\n-            })}\r\n+                {(touched.dobMonth && errors.dobMonth) || (touched.dobDay && errors.dobDay) || (touched.dobYear && errors.dobYear) ? (\r\n+                  <p className=\"text-danger-400 text-sm flex items-center\">\r\n+                    <AlertTriangle className=\"w-4 h-4 mr-1\" />\r\n+                    {errors.dobMonth || errors.dobDay || errors.dobYear}\r\n+                  </p>\r\n+                ) : null}\r\n+              </div>\r\n+              <CommonInput\r\n+                label=\"Referred by (optional)\"\r\n+                type=\"text\"\r\n+                id=\"referredBy\"\r\n+                name=\"referredBy\"\r\n+                placeholder=\"Enter referral code\"\r\n+                value={form.referredBy}\r\n+                onChange={handleChange}\r\n+                onBlur={handleBlur}\r\n+                autoComplete=\"off\"\r\n+                touched={touched.referredBy}\r\n+                error={errors.referredBy}\r\n+                valid={touched.referredBy && !errors.referredBy && form.referredBy}\r\n+              />\r\n+              <div className=\"space-y-2\">\r\n+                <div className=\"flex items-start\">\r\n+                  <input\r\n+                    type=\"checkbox\"\r\n+                    id=\"ageCheck\"\r\n+                    name=\"ageCheck\"\r\n+                    checked={form.ageCheck}\r\n+                    onChange={handleChange}\r\n+                    onBlur={handleBlur}\r\n+                    required\r\n+                    className=\"mt-1 h-4 w-4 text-primary-600 focus:ring-primary-500 border-secondary-600 rounded bg-secondary-800\"\r\n+                  />\r\n+                  <label htmlFor=\"ageCheck\" className=\"ml-3 text-sm text-white\">\r\n+                    I am at least 18 years old and agree to the{\" \"}\r\n+                    <a href=\"#\" className=\"text-primary-400 hover:text-primary-300 font-medium transition-colors\">\r\n+                      Terms of Service\r\n+                    </a>\r\n+                  </label>\r\n+                </div>\r\n+                {touched.ageCheck && errors.ageCheck && (\r\n+                  <p className=\"text-danger-400 text-sm flex items-center\">\r\n+                    <AlertTriangle className=\"w-4 h-4 mr-1\" />\r\n+                    {errors.ageCheck}\r\n+                  </p>\r\n+                )}\r\n+              </div>\r\n+              <button\r\n+                type=\"submit\"\r\n+                className=\"w-full py-3 text-lg font-semibold rounded-lg bg-gradient-to-r from-pink-500 to-yellow-400 text-white shadow hover:from-pink-600 hover:to-yellow-500 transition disabled:opacity-60 disabled:cursor-not-allowed\"\r\n+                disabled={submitting || !isFormValid}\r\n+              >\r\n+                {submitting ? (\r\n+                  <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-black mr-3 inline-block align-middle\"></div>\r\n+                ) : (\r\n+                  \"Sign Up\"\r\n+                )}\r\n+              </button>\r\n+              <div className=\"border-t border-secondary-700\"></div>\r\n+              <div className=\"space-y-4\">\r\n+                <p className=\"text-center text-secondary-400 text-sm flex items-center justify-center\">\r\n+                  <ArrowDown className=\"w-4 h-4 mr-2\" />\r\n+                  Or Register with\r\n+                </p>\r\n+                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\r\n+                  <button\r\n+                    type=\"button\"\r\n+                    onClick={handleGoogleSignup}\r\n+                    className=\"w-full flex items-center justify-center px-4 py-3 bg-white text-black rounded-lg font-medium hover:bg-gray-100 transition-colors\"\r\n+                    aria-label=\"Sign up with Google\"\r\n+                  >\r\n+                    <img\r\n+                      src=\"https://img.icons8.com/color/24/000000/google-logo.png\"\r\n+                      className=\"w-5 h-5 mr-3\"\r\n+                      alt=\"Google\"\r\n+                    />\r\n+                    Google\r\n+                  </button>\r\n+                  <button\r\n+                    type=\"button\"\r\n+                    onClick={handleFacebookSignup}\r\n+                    className=\"w-full flex items-center justify-center px-4 py-3 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors\"\r\n+                    aria-label=\"Sign up with Facebook\"\r\n+                  >\r\n+                    <img\r\n+                      src=\"https://img.icons8.com/color/24/000000/facebook-new.png\"\r\n+                      className=\"w-5 h-5 mr-3\"\r\n+                      alt=\"Facebook\"\r\n+                    />\r\n+                    Facebook\r\n+                  </button>\r\n+                </div>\r\n+              </div>\r\n+            </form>\r\n+            <p className=\"text-center text-secondary-400 text-sm mt-6\">\r\n+              Already have an account?{\" \"}\r\n+              <a href=\"/login\" className=\"text-primary-400 hover:text-primary-300 font-medium transition-colors\">\r\n+                Log in\r\n+              </a>\r\n+            </p>\r\n           </div>\r\n         </div>\r\n-      ))}\r\n-    </main>\r\n+      </div>\r\n+    </>\r\n   );\r\n };\r\n \r\n-export default GameList; \n+export default SignUp;\r\n"
                },
                {
                    "date": 1753273108342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,8 @@\n             className=\"flex-1 bg-transparent outline-none text-white placeholder:text-gray-400 text-base\"\r\n           />\r\n         </div>\r\n         <button className=\"relative bg-gradient-to-b from-[#C0013A] to-[#A8002F] text-white font-medium rounded-lg px-8 py-2 text-lg shadow-md hover:brightness-110 transition-all\">\r\n-          <span className=\"absolute -top-2 left-3 w-4 h-4 bg-white rounded-t-md rotate-45\" style={{clipPath:'polygon(0 0,100% 0,100% 100%)'}}></span>\r\n           <span className=\"relative z-10\">Get Coins</span>\r\n         </button>\r\n       </div>\r\n       <div className=\"mb-6 relative max-w-2xl mx-auto\">\r\n"
                }
            ],
            "date": 1753249926131,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect, useRef } from \"react\";\r\nimport { FaSearch, FaPlay, FaRegSmile } from \"react-icons/fa\";\r\nimport slider1 from \"../assets/slider1.png\";\r\nimport slider2 from \"../assets/slider2.png\";\r\nimport Loader from \"./Loader\";\r\n\r\nconst categories = [\r\n  \"Promotions\", \"Gameplay\", \"Gameway\", \"Net Gaming\", \"Tada Gaming\", \"Hacksaw gaming\"\r\n];\r\n\r\nconst gameSections = [\r\n  \"Slots\", \"Scratchcards\", \"Keno\", \"Fishing\", \"Scratch-card\", \"Shooting\", \"Crash game\", \"Bingo\"\r\n];\r\n\r\nconst sliderImages = [slider1, slider2, slider2, slider1];\r\n\r\nconst getSlides = (images, perSlide = 2) => {\r\n  const slides = [];\r\n  for (let i = 0; i < images.length; i += perSlide) {\r\n    slides.push(images.slice(i, i + perSlide));\r\n  }\r\n  return slides;\r\n};\r\n\r\nconst slides = getSlides(sliderImages, 2);\r\n\r\nconst AUTO_SLIDE_INTERVAL = 2500;\r\n\r\nconst isLoggedIn = () => {\r\n  return !!localStorage.getItem('authToken');\r\n};\r\n\r\nconst GameList = () => {\r\n  const [current, setCurrent] = useState(0);\r\n  const timeoutRef = useRef(null);\r\n  const [games, setGames] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [hoveredIdx, setHoveredIdx] = useState(null);\r\n\r\n  const nextSlide = () => setCurrent((prev) => (prev + 1) % slides.length);\r\n  const prevSlide = () => setCurrent((prev) => (prev - 1 + slides.length) % slides.length);\r\n\r\n  useEffect(() => {\r\n    timeoutRef.current = setInterval(nextSlide, AUTO_SLIDE_INTERVAL);\r\n    return () => clearInterval(timeoutRef.current);\r\n  }, [current]);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    const token = localStorage.getItem('authToken');\r\n    fetch(`${import.meta.env.VITE_API_BASE_URL}/games`, {\r\n      headers: token ? { Authorization: `Bearer ${token}` } : {}\r\n    })\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        setGames((data.games || []).slice(0, 12));\r\n        setLoading(false);\r\n      })\r\n      .catch(err => {\r\n        setError(\"Failed to load games\");\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  const handleLaunch = async (gameId, mode) => {\r\n    if (mode === 'real' && !isLoggedIn()) {\r\n      alert('You must be logged in to play for real. Please log in or sign up.');\r\n      return;\r\n    }\r\n    try {\r\n      const token = localStorage.getItem('authToken');\r\n      const res = await fetch(`${import.meta.env.VITE_API_BASE_URL}/games/launch`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...(token ? { Authorization: `Bearer ${token}` } : {})\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify({ gameId, mode }),\r\n      });\r\n      const data = await res.json();\r\n      if (data.url) window.open(data.url, \"_blank\");\r\n      else alert(data.error || \"Failed to launch game\");\r\n    } catch (err) {\r\n      alert(\"Failed to launch game\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <main className=\"flex-1 p-4 bg-black min-h-screen\">\r\n      <div className=\"flex items-center justify-between mb-8 gap-4\">\r\n        <div className=\"flex-1 max-w-xl flex items-center bg-[#232224] rounded-lg px-4 py-2\">\r\n          <FaSearch className=\"text-gray-400 mr-3 text-lg\" />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search Games and Game Providers\"\r\n            className=\"flex-1 bg-transparent outline-none text-white placeholder:text-gray-400 text-base\"\r\n          />\r\n        </div>\r\n        <button className=\"relative bg-gradient-to-b from-[#C0013A] to-[#A8002F] text-white font-medium rounded-lg px-8 py-2 text-lg shadow-md hover:brightness-110 transition-all\">\r\n          <span className=\"absolute -top-2 left-3 w-4 h-4 bg-white rounded-t-md rotate-45\" style={{clipPath:'polygon(0 0,100% 0,100% 100%)'}}></span>\r\n          <span className=\"relative z-10\">Get Coins</span>\r\n        </button>\r\n      </div>\r\n      <div className=\"mb-6 relative max-w-2xl mx-auto\">\r\n        <div className=\"overflow-hidden rounded-lg\">\r\n          <div className=\"flex transition-transform duration-700\" style={{ transform: `translateX(-${current * 100}%)` }}>\r\n            {slides.map((slideImgs, idx) => (\r\n              <div key={idx} className=\"flex gap-4 min-w-full justify-center\">\r\n                {slideImgs.map((img, i) => (\r\n                  <img\r\n                    key={i}\r\n                    src={img}\r\n                    alt={`Banner ${idx * 2 + i + 1}`}\r\n                    className=\"rounded-lg object-cover h-44 w-1/2\"\r\n                    style={{ minWidth: 180 }}\r\n                  />\r\n                ))}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <button\r\n          className=\"absolute left-2 top-1/2 -translate-y-1/2 bg-black/60 text-white rounded-full p-2 hover:bg-black/80 z-10\"\r\n          onClick={prevSlide}\r\n          aria-label=\"Previous slide\"\r\n        >\r\n          &#8592;\r\n        </button>\r\n        <button\r\n          className=\"absolute right-2 top-1/2 -translate-y-1/2 bg-black/60 text-white rounded-full p-2 hover:bg-black/80 z-10\"\r\n          onClick={nextSlide}\r\n          aria-label=\"Next slide\"\r\n        >\r\n          &#8594;\r\n        </button>\r\n        <div className=\"flex justify-center gap-2 mt-2\">\r\n          {slides.map((_, idx) => (\r\n            <button\r\n              key={idx}\r\n              className={`w-2 h-2 rounded-full ${current === idx ? 'bg-pink-500' : 'bg-gray-500'}`}\r\n              onClick={() => setCurrent(idx)}\r\n              aria-label={`Go to slide ${idx + 1}`}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div className=\"mb-6 flex gap-2 items-center flex-wrap\">\r\n        {categories.map((cat) => (\r\n          <button\r\n            key={cat}\r\n            className=\"px-4 py-2 rounded-full border border-gray-600 text-white text-sm hover:bg-pink-500 hover:text-white transition\"\r\n          >\r\n            {cat}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      {loading ? (\r\n        <div className=\"text-white text-center py-10\"><Loader /></div>\r\n      ) : error ? (\r\n        <div className=\"text-red-400 text-center py-10\">{error}</div>\r\n      ) : gameSections.map((section) => (\r\n        <div className=\"mb-10\" key={section}>\r\n          <div className=\"flex justify-between items-center mb-3\">\r\n            <h5 className=\"text-white text-lg font-semibold\">{section}</h5>\r\n            <button className=\"text-pink-400 font-bold text-sm hover:underline\">See All</button>\r\n          </div>\r\n          <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\">\r\n            {games.map((game, idx) => {\r\n              const imageSrc =\r\n                game.thumbnail_url ||\r\n                game.more_details?.media?.icon ||\r\n                game.more_details?.media?.thumbnails?.[\"250x180\"] ||\r\n                game.more_details?.media?.thumbnails?.[\"500x360\"] ||\r\n                \"\";\r\n              return (\r\n                <div\r\n                  key={idx}\r\n                  className=\"bg-gray-900 rounded-lg overflow-hidden shadow hover:shadow-pink-400/30 transition relative flex flex-col items-center group\"\r\n                  onMouseEnter={() => setHoveredIdx(idx)}\r\n                  onMouseLeave={() => setHoveredIdx(null)}\r\n                >\r\n                  <img\r\n                    src={imageSrc}\r\n                    alt={game.name}\r\n                    className=\"w-full h-32 object-cover rounded-t-lg\"\r\n                  />\r\n                  <div className=\"p-2 text-white text-center font-semibold\">{game.name}</div>\r\n                  {hoveredIdx === idx && (\r\n                    <div className=\"absolute inset-0 flex items-center justify-center bg-black/40 transition-opacity group-hover:opacity-100 opacity-100 gap-4\">\r\n                      <button\r\n                        className=\"flex flex-col items-center group/play\"\r\n                        title=\"Fun Play\"\r\n                        onClick={e => {\r\n                          e.stopPropagation();\r\n                          handleLaunch(game.casino_game_id, 'fun');\r\n                        }}\r\n                      >\r\n                        <FaRegSmile className=\"text-white text-3xl mb-1 group-hover/play:text-yellow-300\" />\r\n                        <span className=\"text-xs text-white\">Demo</span>\r\n                      </button>\r\n                      <button\r\n                        className=\"flex flex-col items-center group/play\"\r\n                        title={isLoggedIn() ? \"Real Play\" : \"Login required\"}\r\n                        disabled={!isLoggedIn()}\r\n                        style={{ opacity: isLoggedIn() ? 1 : 0.5, cursor: isLoggedIn() ? 'pointer' : 'not-allowed' }}\r\n                        onClick={e => {\r\n                          e.stopPropagation();\r\n                          handleLaunch(game.casino_game_id, 'real');\r\n                        }}\r\n                      >\r\n                        <FaPlay className=\"text-white text-3xl mb-1 group-hover/play:text-green-400\" />\r\n                        <span className=\"text-xs text-white\">Real</span>\r\n                      </button>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default GameList; "
        }
    ]
}