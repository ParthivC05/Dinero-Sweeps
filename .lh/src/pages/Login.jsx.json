{
    "sourceFile": "src/pages/Login.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 60,
            "patches": [
                {
                    "date": 1752494174747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752495356483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useState } from \"react\";\r\n import banner from \"../assets/banner.png\";\r\n-import logo from \"../assets/logo.png\";\r\n+import Navbar from \"../components/Navbar\";\r\n \r\n const Login = () => {\r\n   const [form, setForm] = useState({ email: \"\", password: \"\" });\r\n   const [touched, setTouched] = useState({});\r\n@@ -48,14 +48,10 @@\n \r\n   const isFormValid = Object.keys(errors).length === 0 && form.email && form.password && captchaChecked;\r\n \r\n   return (\r\n-    <div className=\"min-vh-100 d-flex flex-column align-items-start bg-black overflow-x-hidden\" style={{ minHeight: '100vh' }}>\r\n-      {/* Logo at top left in normal flow */}\r\n-      <div className=\"w-100\" style={{ padding: '24px 0 0 32px' }}>\r\n-        <img src={logo} alt=\"Orion Stars Logo\" style={{ height: 48, width: 'auto', maxWidth: '40vw' }} className=\"d-block d-md-none\" />\r\n-        <img src={logo} alt=\"Orion Stars Logo\" style={{ height: 60, width: 'auto', maxWidth: '200px' }} className=\"d-none d-md-block\" />\r\n-      </div>\r\n+    <div className=\"min-vh-100 d-flex flex-column bg-black overflow-x-hidden\" style={{ minHeight: '100vh' }}>\r\n+      <Navbar />\r\n       {/* Centered Form below logo */}\r\n       <div className=\"d-flex flex-grow-1 align-items-center justify-content-center w-100\" style={{ minHeight: 0, width: '100%' }}>\r\n         <div className=\"card bg-black text-white shadow p-4 w-100 mt-3\" style={{ maxWidth: 500 }}>\r\n           <img src={banner} alt=\"Promo Banner\" className=\"img-fluid rounded mb-3\" />\r\n"
                },
                {
                    "date": 1752495565017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n   const isFormValid = Object.keys(errors).length === 0 && form.email && form.password && captchaChecked;\r\n \r\n   return (\r\n     <div className=\"min-vh-100 d-flex flex-column bg-black overflow-x-hidden\" style={{ minHeight: '100vh' }}>\r\n-      <Navbar />\r\n+      {/* <Navbar /> */}\r\n       {/* Centered Form below logo */}\r\n       <div className=\"d-flex flex-grow-1 align-items-center justify-content-center w-100\" style={{ minHeight: 0, width: '100%' }}>\r\n         <div className=\"card bg-black text-white shadow p-4 w-100 mt-3\" style={{ maxWidth: 500 }}>\r\n           <img src={banner} alt=\"Promo Banner\" className=\"img-fluid rounded mb-3\" />\r\n"
                },
                {
                    "date": 1752495657543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,8 @@\n   };\r\n \r\n   React.useEffect(() => {\r\n     setErrors(validate(form));\r\n-    // eslint-disable-next-line\r\n   }, [form, captchaChecked]);\r\n \r\n   const isFormValid = Object.keys(errors).length === 0 && form.email && form.password && captchaChecked;\r\n \r\n"
                },
                {
                    "date": 1752495665394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,10 +48,8 @@\n   const isFormValid = Object.keys(errors).length === 0 && form.email && form.password && captchaChecked;\r\n \r\n   return (\r\n     <div className=\"min-vh-100 d-flex flex-column bg-black overflow-x-hidden\" style={{ minHeight: '100vh' }}>\r\n-      {/* <Navbar /> */}\r\n-      {/* Centered Form below logo */}\r\n       <div className=\"d-flex flex-grow-1 align-items-center justify-content-center w-100\" style={{ minHeight: 0, width: '100%' }}>\r\n         <div className=\"card bg-black text-white shadow p-4 w-100 mt-3\" style={{ maxWidth: 500 }}>\r\n           <img src={banner} alt=\"Promo Banner\" className=\"img-fluid rounded mb-3\" />\r\n           <form onSubmit={handleSubmit} noValidate>\r\n@@ -91,9 +89,8 @@\n             </div>\r\n             <div className=\"mb-3\">\r\n               <div className=\"form-label mb-2\">As a protection against automated spam, you will need to complete the CAPTCHA below:</div>\r\n               <div className=\"d-flex flex-column align-items-center\">\r\n-                {/* CAPTCHA Placeholder */}\r\n                 <div className=\"bg-light rounded p-3 mb-2\" style={{ minWidth: 280, minHeight: 70, maxWidth: 340, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                   <input\r\n                     type=\"checkbox\"\r\n                     id=\"captchaCheck\"\r\n"
                },
                {
                    "date": 1752553859856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,130 +7,269 @@\n   const [touched, setTouched] = useState({});\r\n   const [errors, setErrors] = useState({});\r\n   const [submitting, setSubmitting] = useState(false);\r\n   const [captchaChecked, setCaptchaChecked] = useState(false);\r\n+  const [loginError, setLoginError] = useState(\"\");\r\n \r\n   const validate = (values) => {\r\n     const errs = {};\r\n     if (!values.email) errs.email = \"Email is required.\";\r\n     else if (!/^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/.test(values.email)) errs.email = \"Invalid email format.\";\r\n     if (!values.password) errs.password = \"Password is required.\";\r\n-    if (!captchaChecked) errs.captcha = \"Please complete the CAPTCHA.\";\r\n+    else if (!/^(?=.*[A-Z])(?=.*\\d).{8,20}$/.test(values.password)) errs.password = \"Password must be 8-20 characters with at least one number and one uppercase letter.\";\r\n+    if (!captchaChecked) errs.captcha = \"Please complete the CAPTCHA to verify you are human.\";\r\n     return errs;\r\n   };\r\n \r\n   const handleChange = (e) => {\r\n     const { name, value } = e.target;\r\n     setForm((prev) => ({ ...prev, [name]: value }));\r\n+    // Clear login error when user starts typing\r\n+    if (loginError) setLoginError(\"\");\r\n   };\r\n \r\n   const handleBlur = (e) => {\r\n     setTouched((prev) => ({ ...prev, [e.target.name]: true }));\r\n   };\r\n \r\n+  const handleForgotPassword = (e) => {\r\n+    e.preventDefault();\r\n+    if (!form.email) {\r\n+      setErrors(prev => ({ ...prev, email: \"Please enter your email address to reset your password.\" }));\r\n+      return;\r\n+    }\r\n+    // Simulate password reset email\r\n+    alert(`Password reset email sent to ${form.email} (Demo)`);\r\n+  };\r\n+\r\n+  const handleGoogleLogin = () => {\r\n+    // Simulate Google OAuth\r\n+    alert(\"Redirecting to Google OAuth (Demo)\");\r\n+  };\r\n+\r\n   const handleSubmit = (e) => {\r\n     e.preventDefault();\r\n     setTouched({ email: true, password: true });\r\n+    setLoginError(\"\"); // Clear previous login errors\r\n+    \r\n     const validationErrors = validate(form);\r\n     setErrors(validationErrors);\r\n+    \r\n     if (Object.keys(validationErrors).length === 0) {\r\n       setSubmitting(true);\r\n+      \r\n+      // Simulate API call with potential failure\r\n       setTimeout(() => {\r\n         setSubmitting(false);\r\n-        alert(\"Login successful! (Demo)\");\r\n+        \r\n+        // Simulate login failure for demo purposes\r\n+        // In real app, this would be based on API response\r\n+        if (form.email === \"demo@example.com\" && form.password === \"DemoPass123\") {\r\n+          alert(\"Login successful! (Demo)\");\r\n+        } else {\r\n+          setLoginError(\"Invalid email or password. Please try again.\");\r\n+        }\r\n       }, 1000);\r\n     }\r\n   };\r\n \r\n   React.useEffect(() => {\r\n     setErrors(validate(form));\r\n+    // eslint-disable-next-line\r\n   }, [form, captchaChecked]);\r\n \r\n   const isFormValid = Object.keys(errors).length === 0 && form.email && form.password && captchaChecked;\r\n \r\n   return (\r\n     <div className=\"min-vh-100 d-flex flex-column bg-black overflow-x-hidden\" style={{ minHeight: '100vh' }}>\r\n-      <div className=\"d-flex flex-grow-1 align-items-center justify-content-center w-100\" style={{ minHeight: 0, width: '100%' }}>\r\n+      <div className=\"d-flex flex-grow-1 align-items-center justify-content-center w-100 px-2\" style={{ minHeight: 0, width: '100%' }}>\r\n         <div className=\"card bg-black text-white shadow p-4 w-100 mt-3\" style={{ maxWidth: 500 }}>\r\n           <img src={banner} alt=\"Promo Banner\" className=\"img-fluid rounded mb-3\" />\r\n+          \r\n           <form onSubmit={handleSubmit} noValidate>\r\n+            {/* Login Error Message */}\r\n+            {loginError && (\r\n+              <div className=\"alert alert-danger mb-3\" role=\"alert\" aria-live=\"polite\">\r\n+                <i className=\"bi bi-exclamation-triangle me-2\"></i>\r\n+                {loginError}\r\n+              </div>\r\n+            )}\r\n+\r\n             <div className=\"mb-3\">\r\n               <label htmlFor=\"email\" className=\"form-label\">Email Address</label>\r\n               <input\r\n                 type=\"email\"\r\n                 className={`form-control${touched.email && errors.email ? \" is-invalid\" : \"\"}`}\r\n                 id=\"email\"\r\n                 name=\"email\"\r\n-                placeholder=\"Email Address\"\r\n+                placeholder=\"Enter your email address\"\r\n                 value={form.email}\r\n                 onChange={handleChange}\r\n                 onBlur={handleBlur}\r\n                 aria-invalid={!!(touched.email && errors.email)}\r\n+                aria-describedby={touched.email && errors.email ? \"emailError\" : \"emailHelp\"}\r\n                 required\r\n                 autoComplete=\"email\"\r\n+                autoFocus\r\n               />\r\n-              {touched.email && errors.email && <div className=\"invalid-feedback\">{errors.email}</div>}\r\n+              {touched.email && errors.email && (\r\n+                <div id=\"emailError\" className=\"invalid-feedback\" role=\"alert\">\r\n+                  {errors.email}\r\n+                </div>\r\n+              )}\r\n             </div>\r\n+\r\n             <div className=\"mb-3\">\r\n               <label htmlFor=\"password\" className=\"form-label\">Password</label>\r\n               <input\r\n                 type=\"password\"\r\n                 className={`form-control${touched.password && errors.password ? \" is-invalid\" : \"\"}`}\r\n                 id=\"password\"\r\n                 name=\"password\"\r\n-                placeholder=\"Password\"\r\n+                placeholder=\"Enter your password\"\r\n                 value={form.password}\r\n                 onChange={handleChange}\r\n                 onBlur={handleBlur}\r\n                 aria-invalid={!!(touched.password && errors.password)}\r\n+                aria-describedby={touched.password && errors.password ? \"passwordError\" : \"passwordHelp\"}\r\n                 required\r\n                 autoComplete=\"current-password\"\r\n               />\r\n-              {touched.password && errors.password && <div className=\"invalid-feedback\">{errors.password}</div>}\r\n+              <small id=\"passwordHelp\" className=\"text-muted\">\r\n+                Password must be 8-20 characters with at least one number and one uppercase letter.\r\n+              </small>\r\n+              {touched.password && errors.password && (\r\n+                <div id=\"passwordError\" className=\"invalid-feedback d-block\" role=\"alert\">\r\n+                  {errors.password}\r\n+                </div>\r\n+              )}\r\n             </div>\r\n+\r\n             <div className=\"mb-3\">\r\n-              <div className=\"form-label mb-2\">As a protection against automated spam, you will need to complete the CAPTCHA below:</div>\r\n+              <div className=\"form-label mb-2\">\r\n+                <i className=\"bi bi-shield-check me-2\"></i>\r\n+                Security Verification\r\n+              </div>\r\n               <div className=\"d-flex flex-column align-items-center\">\r\n-                <div className=\"bg-light rounded p-3 mb-2\" style={{ minWidth: 280, minHeight: 70, maxWidth: 340, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n+                {/* Enhanced CAPTCHA */}\r\n+                <div \r\n+                  className=\"bg-light rounded p-3 mb-2 border\" \r\n+                  style={{ \r\n+                    minWidth: 280, \r\n+                    minHeight: 70, \r\n+                    maxWidth: 340, \r\n+                    display: 'flex', \r\n+                    alignItems: 'center', \r\n+                    justifyContent: 'center',\r\n+                    cursor: 'pointer'\r\n+                  }}\r\n+                  onClick={() => setCaptchaChecked(!captchaChecked)}\r\n+                  role=\"button\"\r\n+                  tabIndex={0}\r\n+                  aria-pressed={captchaChecked}\r\n+                  onKeyDown={(e) => {\r\n+                    if (e.key === 'Enter' || e.key === ' ') {\r\n+                      e.preventDefault();\r\n+                      setCaptchaChecked(!captchaChecked);\r\n+                    }\r\n+                  }}\r\n+                >\r\n                   <input\r\n                     type=\"checkbox\"\r\n                     id=\"captchaCheck\"\r\n                     checked={captchaChecked}\r\n                     onChange={e => setCaptchaChecked(e.target.checked)}\r\n                     style={{ width: 24, height: 24, marginRight: 8 }}\r\n+                    aria-label=\"I am not a robot checkbox\"\r\n                   />\r\n-                  <label htmlFor=\"captchaCheck\" className=\"mb-0 text-dark\" style={{ fontWeight: 500 }}>\r\n+                  <label htmlFor=\"captchaCheck\" className=\"mb-0 text-dark\" style={{ fontWeight: 500, cursor: 'pointer' }}>\r\n                     I am not a Robot\r\n                   </label>\r\n-                  <img src=\"https://www.gstatic.com/recaptcha/api2/logo_48.png\" alt=\"reCAPTCHA\" style={{ height: 32, marginLeft: 12 }} />\r\n+                  <img \r\n+                    src=\"https://www.gstatic.com/recaptcha/api2/logo_48.png\" \r\n+                    alt=\"reCAPTCHA verification\" \r\n+                    style={{ height: 32, marginLeft: 12 }} \r\n+                  />\r\n                 </div>\r\n-                {errors.captcha && <div className=\"text-danger small\">{errors.captcha}</div>}\r\n+                {errors.captcha && (\r\n+                  <div className=\"text-danger small\" role=\"alert\">\r\n+                    <i className=\"bi bi-exclamation-circle me-1\"></i>\r\n+                    {errors.captcha}\r\n+                  </div>\r\n+                )}\r\n               </div>\r\n             </div>\r\n+\r\n             <button\r\n               type=\"submit\"\r\n               className=\"btn btn-warning text-dark fw-bold w-100 mb-3\"\r\n               disabled={!isFormValid || submitting}\r\n               aria-disabled={!isFormValid || submitting}\r\n+              aria-describedby={!isFormValid ? \"formErrors\" : undefined}\r\n             >\r\n-              {submitting ? \"Logging in...\" : \"Login\"}\r\n+              {submitting ? (\r\n+                <>\r\n+                  <span className=\"spinner-border spinner-border-sm me-2\" role=\"status\" aria-hidden=\"true\"></span>\r\n+                  Signing In...\r\n+                </>\r\n+              ) : (\r\n+                \"Sign In\"\r\n+              )}\r\n             </button>\r\n+\r\n+            {!isFormValid && (\r\n+              <div id=\"formErrors\" className=\"sr-only\" aria-live=\"polite\">\r\n+                Please fix the form errors above to continue.\r\n+              </div>\r\n+            )}\r\n+\r\n             <div className=\"text-center mb-3\">\r\n-              <a href=\"#\" className=\"text-warning text-decoration-none\">Forgot your password?</a>\r\n+              <button\r\n+                type=\"button\"\r\n+                className=\"btn btn-link text-warning text-decoration-none p-0\"\r\n+                onClick={handleForgotPassword}\r\n+                aria-describedby=\"forgotPasswordHelp\"\r\n+              >\r\n+                <i className=\"bi bi-question-circle me-1\"></i>\r\n+                Forgot your password?\r\n+              </button>\r\n+              <small id=\"forgotPasswordHelp\" className=\"d-block text-muted mt-1\">\r\n+                Enter your email above and click this link to reset your password.\r\n+              </small>\r\n             </div>\r\n+\r\n             <hr className=\"border-secondary\" />\r\n-            <p className=\"text-center text-white-50\">Or Register with</p>\r\n-            <div className=\"d-flex flex-column flex-md-row justify-content-between gap-2\">\r\n+\r\n+            <p className=\"text-center text-white-50 mb-3\">\r\n+              <i className=\"bi bi-arrow-down me-2\"></i>\r\n+              Or sign in with\r\n+            </p>\r\n+            \r\n+            <div className=\"d-flex flex-column flex-md-row justify-content-center gap-2\">\r\n               <button\r\n                 type=\"button\"\r\n                 className=\"btn btn-light d-flex align-items-center justify-content-center w-100\"\r\n-                onClick={() => alert(\"Google login (demo)\")}\r\n-                aria-label=\"Login with Google\"\r\n+                onClick={handleGoogleLogin}\r\n+                aria-label=\"Sign in with Google account\"\r\n               >\r\n-                <img src=\"https://img.icons8.com/color/24/000000/google-logo.png\" className=\"me-2\" alt=\"Google\" />\r\n-                Google\r\n+                <img \r\n+                  src=\"https://img.icons8.com/color/24/000000/google-logo.png\" \r\n+                  className=\"me-2\" \r\n+                  alt=\"Google logo\" \r\n+                  aria-hidden=\"true\"\r\n+                />\r\n+                <span>Continue with Google</span>\r\n               </button>\r\n             </div>\r\n+\r\n+            <div className=\"text-center mt-3\">\r\n+              <small className=\"text-muted\">\r\n+                Don't have an account?{\" \"}\r\n+                <a href=\"/signup\" className=\"text-warning text-decoration-none\">\r\n+                  Sign up here\r\n+                </a>\r\n+              </small>\r\n+            </div>\r\n           </form>\r\n         </div>\r\n       </div>\r\n     </div>\r\n"
                },
                {
                    "date": 1752554222309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,28 @@\n-import React, { useState } from \"react\";\r\n+import React, { useState, useRef } from \"react\";\r\n+import ReCAPTCHA from \"react-google-recaptcha\";\r\n import banner from \"../assets/banner.png\";\r\n import Navbar from \"../components/Navbar\";\r\n \r\n const Login = () => {\r\n   const [form, setForm] = useState({ email: \"\", password: \"\" });\r\n   const [touched, setTouched] = useState({});\r\n   const [errors, setErrors] = useState({});\r\n   const [submitting, setSubmitting] = useState(false);\r\n-  const [captchaChecked, setCaptchaChecked] = useState(false);\r\n+  const [captchaToken, setCaptchaToken] = useState(null);\r\n   const [loginError, setLoginError] = useState(\"\");\r\n+  const recaptchaRef = useRef(null);\r\n \r\n+  // Get reCAPTCHA site key from environment variable\r\n+  const recaptchaSiteKey = import.meta.env.VITE_RECAPTCHA_SITE_KEY || \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\"; // Default test key\r\n+\r\n   const validate = (values) => {\r\n     const errs = {};\r\n     if (!values.email) errs.email = \"Email is required.\";\r\n     else if (!/^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/.test(values.email)) errs.email = \"Invalid email format.\";\r\n     if (!values.password) errs.password = \"Password is required.\";\r\n     else if (!/^(?=.*[A-Z])(?=.*\\d).{8,20}$/.test(values.password)) errs.password = \"Password must be 8-20 characters with at least one number and one uppercase letter.\";\r\n-    if (!captchaChecked) errs.captcha = \"Please complete the CAPTCHA to verify you are human.\";\r\n+    if (!captchaToken) errs.captcha = \"Please complete the reCAPTCHA verification.\";\r\n     return errs;\r\n   };\r\n \r\n   const handleChange = (e) => {\r\n@@ -30,8 +35,21 @@\n   const handleBlur = (e) => {\r\n     setTouched((prev) => ({ ...prev, [e.target.name]: true }));\r\n   };\r\n \r\n+  const handleCaptchaChange = (token) => {\r\n+    setCaptchaToken(token);\r\n+    // Clear captcha error when user completes verification\r\n+    if (errors.captcha) {\r\n+      setErrors(prev => ({ ...prev, captcha: null }));\r\n+    }\r\n+  };\r\n+\r\n+  const handleCaptchaExpired = () => {\r\n+    setCaptchaToken(null);\r\n+    setErrors(prev => ({ ...prev, captcha: \"reCAPTCHA verification expired. Please try again.\" }));\r\n+  };\r\n+\r\n   const handleForgotPassword = (e) => {\r\n     e.preventDefault();\r\n     if (!form.email) {\r\n       setErrors(prev => ({ ...prev, email: \"Please enter your email address to reset your password.\" }));\r\n@@ -45,9 +63,9 @@\n     // Simulate Google OAuth\r\n     alert(\"Redirecting to Google OAuth (Demo)\");\r\n   };\r\n \r\n-  const handleSubmit = (e) => {\r\n+  const handleSubmit = async (e) => {\r\n     e.preventDefault();\r\n     setTouched({ email: true, password: true });\r\n     setLoginError(\"\"); // Clear previous login errors\r\n     \r\n@@ -56,29 +74,59 @@\n     \r\n     if (Object.keys(validationErrors).length === 0) {\r\n       setSubmitting(true);\r\n       \r\n-      // Simulate API call with potential failure\r\n-      setTimeout(() => {\r\n+      try {\r\n+        // In a real app, you would send the captchaToken to your backend for verification\r\n+        // const response = await fetch('/api/login', {\r\n+        //   method: 'POST',\r\n+        //   headers: { 'Content-Type': 'application/json' },\r\n+        //   body: JSON.stringify({ \r\n+        //     email: form.email, \r\n+        //     password: form.password, \r\n+        //     captchaToken \r\n+        //   })\r\n+        // });\r\n+\r\n+        // Simulate API call with potential failure\r\n+        setTimeout(() => {\r\n+          setSubmitting(false);\r\n+          \r\n+          // Simulate login failure for demo purposes\r\n+          if (form.email === \"demo@example.com\" && form.password === \"DemoPass123\") {\r\n+            alert(\"Login successful! (Demo)\");\r\n+            // Reset reCAPTCHA after successful login\r\n+            if (recaptchaRef.current) {\r\n+              recaptchaRef.current.reset();\r\n+              setCaptchaToken(null);\r\n+            }\r\n+          } else {\r\n+            setLoginError(\"Invalid email or password. Please try again.\");\r\n+            // Reset reCAPTCHA on failed login\r\n+            if (recaptchaRef.current) {\r\n+              recaptchaRef.current.reset();\r\n+              setCaptchaToken(null);\r\n+            }\r\n+          }\r\n+        }, 1000);\r\n+      } catch (error) {\r\n         setSubmitting(false);\r\n-        \r\n-        // Simulate login failure for demo purposes\r\n-        // In real app, this would be based on API response\r\n-        if (form.email === \"demo@example.com\" && form.password === \"DemoPass123\") {\r\n-          alert(\"Login successful! (Demo)\");\r\n-        } else {\r\n-          setLoginError(\"Invalid email or password. Please try again.\");\r\n+        setLoginError(\"An error occurred. Please try again.\");\r\n+        // Reset reCAPTCHA on error\r\n+        if (recaptchaRef.current) {\r\n+          recaptchaRef.current.reset();\r\n+          setCaptchaToken(null);\r\n         }\r\n-      }, 1000);\r\n+      }\r\n     }\r\n   };\r\n \r\n   React.useEffect(() => {\r\n     setErrors(validate(form));\r\n     // eslint-disable-next-line\r\n-  }, [form, captchaChecked]);\r\n+  }, [form, captchaToken]);\r\n \r\n-  const isFormValid = Object.keys(errors).length === 0 && form.email && form.password && captchaChecked;\r\n+  const isFormValid = Object.keys(errors).length === 0 && form.email && form.password && captchaToken;\r\n \r\n   return (\r\n     <div className=\"min-vh-100 d-flex flex-column bg-black overflow-x-hidden\" style={{ minHeight: '100vh' }}>\r\n       <div className=\"d-flex flex-grow-1 align-items-center justify-content-center w-100 px-2\" style={{ minHeight: 0, width: '100%' }}>\r\n@@ -149,50 +197,20 @@\n                 <i className=\"bi bi-shield-check me-2\"></i>\r\n                 Security Verification\r\n               </div>\r\n               <div className=\"d-flex flex-column align-items-center\">\r\n-                {/* Enhanced CAPTCHA */}\r\n-                <div \r\n-                  className=\"bg-light rounded p-3 mb-2 border\" \r\n-                  style={{ \r\n-                    minWidth: 280, \r\n-                    minHeight: 70, \r\n-                    maxWidth: 340, \r\n-                    display: 'flex', \r\n-                    alignItems: 'center', \r\n-                    justifyContent: 'center',\r\n-                    cursor: 'pointer'\r\n-                  }}\r\n-                  onClick={() => setCaptchaChecked(!captchaChecked)}\r\n-                  role=\"button\"\r\n-                  tabIndex={0}\r\n-                  aria-pressed={captchaChecked}\r\n-                  onKeyDown={(e) => {\r\n-                    if (e.key === 'Enter' || e.key === ' ') {\r\n-                      e.preventDefault();\r\n-                      setCaptchaChecked(!captchaChecked);\r\n-                    }\r\n-                  }}\r\n-                >\r\n-                  <input\r\n-                    type=\"checkbox\"\r\n-                    id=\"captchaCheck\"\r\n-                    checked={captchaChecked}\r\n-                    onChange={e => setCaptchaChecked(e.target.checked)}\r\n-                    style={{ width: 24, height: 24, marginRight: 8 }}\r\n-                    aria-label=\"I am not a robot checkbox\"\r\n-                  />\r\n-                  <label htmlFor=\"captchaCheck\" className=\"mb-0 text-dark\" style={{ fontWeight: 500, cursor: 'pointer' }}>\r\n-                    I am not a Robot\r\n-                  </label>\r\n-                  <img \r\n-                    src=\"https://www.gstatic.com/recaptcha/api2/logo_48.png\" \r\n-                    alt=\"reCAPTCHA verification\" \r\n-                    style={{ height: 32, marginLeft: 12 }} \r\n-                  />\r\n-                </div>\r\n+                {/* Real reCAPTCHA */}\r\n+                <ReCAPTCHA\r\n+                  ref={recaptchaRef}\r\n+                  sitekey={recaptchaSiteKey}\r\n+                  onChange={handleCaptchaChange}\r\n+                  onExpired={handleCaptchaExpired}\r\n+                  theme=\"light\"\r\n+                  size=\"normal\"\r\n+                  aria-label=\"Complete reCAPTCHA verification\"\r\n+                />\r\n                 {errors.captcha && (\r\n-                  <div className=\"text-danger small\" role=\"alert\">\r\n+                  <div className=\"text-danger small mt-2\" role=\"alert\">\r\n                     <i className=\"bi bi-exclamation-circle me-1\"></i>\r\n                     {errors.captcha}\r\n                   </div>\r\n                 )}\r\n"
                },
                {
                    "date": 1752554764315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n   const [loginError, setLoginError] = useState(\"\");\r\n   const recaptchaRef = useRef(null);\r\n \r\n   // Get reCAPTCHA site key from environment variable\r\n-  const recaptchaSiteKey = import.meta.env.VITE_RECAPTCHA_SITE_KEY || \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\"; // Default test key\r\n+  const recaptchaSiteKey = import.meta.env.VITE_RECAPTCHA_SITE_KEY \r\n \r\n   const validate = (values) => {\r\n     const errs = {};\r\n     if (!values.email) errs.email = \"Email is required.\";\r\n"
                },
                {
                    "date": 1752554778532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n   const [loginError, setLoginError] = useState(\"\");\r\n   const recaptchaRef = useRef(null);\r\n \r\n   // Get reCAPTCHA site key from environment variable\r\n-  const recaptchaSiteKey = import.meta.env.VITE_RECAPTCHA_SITE_KEY \r\n+  const recaptchaSiteKey = import.meta.env.VITE_RECAPTCHA_SITE_KEY || \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\"; // Default test key\r\n \r\n   const validate = (values) => {\r\n     const errs = {};\r\n     if (!values.email) errs.email = \"Email is required.\";\r\n"
                },
                {
                    "date": 1752554816809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n   const [loginError, setLoginError] = useState(\"\");\r\n   const recaptchaRef = useRef(null);\r\n \r\n   // Get reCAPTCHA site key from environment variable\r\n-  const recaptchaSiteKey = import.meta.env.VITE_RECAPTCHA_SITE_KEY || \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\"; // Default test key\r\n+  const recaptchaSiteKey = import.meta.env.VITE_RECAPTCHA_SITE_KEY || \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\"; \r\n \r\n   const validate = (values) => {\r\n     const errs = {};\r\n     if (!values.email) errs.email = \"Email is required.\";\r\n@@ -181,11 +181,9 @@\n                 aria-describedby={touched.password && errors.password ? \"passwordError\" : \"passwordHelp\"}\r\n                 required\r\n                 autoComplete=\"current-password\"\r\n               />\r\n-              <small id=\"passwordHelp\" className=\"text-muted\">\r\n-                Password must be 8-20 characters with at least one number and one uppercase letter.\r\n-              </small>\r\n+             \r\n               {touched.password && errors.password && (\r\n                 <div id=\"passwordError\" className=\"invalid-feedback d-block\" role=\"alert\">\r\n                   {errors.password}\r\n                 </div>\r\n"
                },
                {
                    "date": 1752554831287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,9 +177,10 @@\n                 value={form.password}\r\n                 onChange={handleChange}\r\n                 onBlur={handleBlur}\r\n                 aria-invalid={!!(touched.password && errors.password)}\r\n-                aria-describedby={touched.password && errors.password ? \"passwordError\" : \"passwordHelp\"}\r\n+                aria-describedby={touched.password && errors.passwoPlease fix the form errors above to continue.\r\n+                  rd ? \"passwordError\" : \"passwordHelp\"}\r\n                 required\r\n                 autoComplete=\"current-password\"\r\n               />\r\n              \r\n"
                },
                {
                    "date": 1752554839669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,13 +232,9 @@\n                 \"Sign In\"\r\n               )}\r\n             </button>\r\n \r\n-            {!isFormValid && (\r\n-              <div id=\"formErrors\" className=\"sr-only\" aria-live=\"polite\">\r\n-                Please fix the form errors above to continue.\r\n-              </div>\r\n-            )}\r\n+            \r\n \r\n             <div className=\"text-center mb-3\">\r\n               <button\r\n                 type=\"button\"\r\n"
                },
                {
                    "date": 1752554848777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,10 +177,9 @@\n                 value={form.password}\r\n                 onChange={handleChange}\r\n                 onBlur={handleBlur}\r\n                 aria-invalid={!!(touched.password && errors.password)}\r\n-                aria-describedby={touched.password && errors.passwoPlease fix the form errors above to continue.\r\n-                  rd ? \"passwordError\" : \"passwordHelp\"}\r\n+                aria-describedby={touched.password && errors.password ? \"passwordError\" : \"passwordHelp\"}\r\n                 required\r\n                 autoComplete=\"current-password\"\r\n               />\r\n              \r\n@@ -232,9 +231,9 @@\n                 \"Sign In\"\r\n               )}\r\n             </button>\r\n \r\n-            \r\n+          \r\n \r\n             <div className=\"text-center mb-3\">\r\n               <button\r\n                 type=\"button\"\r\n"
                },
                {
                    "date": 1752554854222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,17 +12,23 @@\n   const [loginError, setLoginError] = useState(\"\");\r\n   const recaptchaRef = useRef(null);\r\n \r\n   // Get reCAPTCHA site key from environment variable\r\n-  const recaptchaSiteKey = import.meta.env.VITE_RECAPTCHA_SITE_KEY || \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\"; \r\n+  const recaptchaSiteKey =\r\n+    import.meta.env.VITE_RECAPTCHA_SITE_KEY ||\r\n+    \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\";\r\n \r\n   const validate = (values) => {\r\n     const errs = {};\r\n     if (!values.email) errs.email = \"Email is required.\";\r\n-    else if (!/^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/.test(values.email)) errs.email = \"Invalid email format.\";\r\n+    else if (!/^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/.test(values.email))\r\n+      errs.email = \"Invalid email format.\";\r\n     if (!values.password) errs.password = \"Password is required.\";\r\n-    else if (!/^(?=.*[A-Z])(?=.*\\d).{8,20}$/.test(values.password)) errs.password = \"Password must be 8-20 characters with at least one number and one uppercase letter.\";\r\n-    if (!captchaToken) errs.captcha = \"Please complete the reCAPTCHA verification.\";\r\n+    else if (!/^(?=.*[A-Z])(?=.*\\d).{8,20}$/.test(values.password))\r\n+      errs.password =\r\n+        \"Password must be 8-20 characters with at least one number and one uppercase letter.\";\r\n+    if (!captchaToken)\r\n+      errs.captcha = \"Please complete the reCAPTCHA verification.\";\r\n     return errs;\r\n   };\r\n \r\n   const handleChange = (e) => {\r\n@@ -39,21 +45,27 @@\n   const handleCaptchaChange = (token) => {\r\n     setCaptchaToken(token);\r\n     // Clear captcha error when user completes verification\r\n     if (errors.captcha) {\r\n-      setErrors(prev => ({ ...prev, captcha: null }));\r\n+      setErrors((prev) => ({ ...prev, captcha: null }));\r\n     }\r\n   };\r\n \r\n   const handleCaptchaExpired = () => {\r\n     setCaptchaToken(null);\r\n-    setErrors(prev => ({ ...prev, captcha: \"reCAPTCHA verification expired. Please try again.\" }));\r\n+    setErrors((prev) => ({\r\n+      ...prev,\r\n+      captcha: \"reCAPTCHA verification expired. Please try again.\",\r\n+    }));\r\n   };\r\n \r\n   const handleForgotPassword = (e) => {\r\n     e.preventDefault();\r\n     if (!form.email) {\r\n-      setErrors(prev => ({ ...prev, email: \"Please enter your email address to reset your password.\" }));\r\n+      setErrors((prev) => ({\r\n+        ...prev,\r\n+        email: \"Please enter your email address to reset your password.\",\r\n+      }));\r\n       return;\r\n     }\r\n     // Simulate password reset email\r\n     alert(`Password reset email sent to ${form.email} (Demo)`);\r\n@@ -67,33 +79,36 @@\n   const handleSubmit = async (e) => {\r\n     e.preventDefault();\r\n     setTouched({ email: true, password: true });\r\n     setLoginError(\"\"); // Clear previous login errors\r\n-    \r\n+\r\n     const validationErrors = validate(form);\r\n     setErrors(validationErrors);\r\n-    \r\n+\r\n     if (Object.keys(validationErrors).length === 0) {\r\n       setSubmitting(true);\r\n-      \r\n+\r\n       try {\r\n         // In a real app, you would send the captchaToken to your backend for verification\r\n         // const response = await fetch('/api/login', {\r\n         //   method: 'POST',\r\n         //   headers: { 'Content-Type': 'application/json' },\r\n-        //   body: JSON.stringify({ \r\n-        //     email: form.email, \r\n-        //     password: form.password, \r\n-        //     captchaToken \r\n+        //   body: JSON.stringify({\r\n+        //     email: form.email,\r\n+        //     password: form.password,\r\n+        //     captchaToken\r\n         //   })\r\n         // });\r\n \r\n         // Simulate API call with potential failure\r\n         setTimeout(() => {\r\n           setSubmitting(false);\r\n-          \r\n+\r\n           // Simulate login failure for demo purposes\r\n-          if (form.email === \"demo@example.com\" && form.password === \"DemoPass123\") {\r\n+          if (\r\n+            form.email === \"demo@example.com\" &&\r\n+            form.password === \"DemoPass123\"\r\n+          ) {\r\n             alert(\"Login successful! (Demo)\");\r\n             // Reset reCAPTCHA after successful login\r\n             if (recaptchaRef.current) {\r\n               recaptchaRef.current.reset();\r\n@@ -124,38 +139,65 @@\n     setErrors(validate(form));\r\n     // eslint-disable-next-line\r\n   }, [form, captchaToken]);\r\n \r\n-  const isFormValid = Object.keys(errors).length === 0 && form.email && form.password && captchaToken;\r\n+  const isFormValid =\r\n+    Object.keys(errors).length === 0 &&\r\n+    form.email &&\r\n+    form.password &&\r\n+    captchaToken;\r\n \r\n   return (\r\n-    <div className=\"min-vh-100 d-flex flex-column bg-black overflow-x-hidden\" style={{ minHeight: '100vh' }}>\r\n-      <div className=\"d-flex flex-grow-1 align-items-center justify-content-center w-100 px-2\" style={{ minHeight: 0, width: '100%' }}>\r\n-        <div className=\"card bg-black text-white shadow p-4 w-100 mt-3\" style={{ maxWidth: 500 }}>\r\n-          <img src={banner} alt=\"Promo Banner\" className=\"img-fluid rounded mb-3\" />\r\n-          \r\n+    <div\r\n+      className=\"min-vh-100 d-flex flex-column bg-black overflow-x-hidden\"\r\n+      style={{ minHeight: \"100vh\" }}\r\n+    >\r\n+      <div\r\n+        className=\"d-flex flex-grow-1 align-items-center justify-content-center w-100 px-2\"\r\n+        style={{ minHeight: 0, width: \"100%\" }}\r\n+      >\r\n+        <div\r\n+          className=\"card bg-black text-white shadow p-4 w-100 mt-3\"\r\n+          style={{ maxWidth: 500 }}\r\n+        >\r\n+          <img\r\n+            src={banner}\r\n+            alt=\"Promo Banner\"\r\n+            className=\"img-fluid rounded mb-3\"\r\n+          />\r\n+\r\n           <form onSubmit={handleSubmit} noValidate>\r\n             {/* Login Error Message */}\r\n             {loginError && (\r\n-              <div className=\"alert alert-danger mb-3\" role=\"alert\" aria-live=\"polite\">\r\n+              <div\r\n+                className=\"alert alert-danger mb-3\"\r\n+                role=\"alert\"\r\n+                aria-live=\"polite\"\r\n+              >\r\n                 <i className=\"bi bi-exclamation-triangle me-2\"></i>\r\n                 {loginError}\r\n               </div>\r\n             )}\r\n \r\n             <div className=\"mb-3\">\r\n-              <label htmlFor=\"email\" className=\"form-label\">Email Address</label>\r\n+              <label htmlFor=\"email\" className=\"form-label\">\r\n+                Email Address\r\n+              </label>\r\n               <input\r\n                 type=\"email\"\r\n-                className={`form-control${touched.email && errors.email ? \" is-invalid\" : \"\"}`}\r\n+                className={`form-control${\r\n+                  touched.email && errors.email ? \" is-invalid\" : \"\"\r\n+                }`}\r\n                 id=\"email\"\r\n                 name=\"email\"\r\n                 placeholder=\"Enter your email address\"\r\n                 value={form.email}\r\n                 onChange={handleChange}\r\n                 onBlur={handleBlur}\r\n                 aria-invalid={!!(touched.email && errors.email)}\r\n-                aria-describedby={touched.email && errors.email ? \"emailError\" : \"emailHelp\"}\r\n+                aria-describedby={\r\n+                  touched.email && errors.email ? \"emailError\" : \"emailHelp\"\r\n+                }\r\n                 required\r\n                 autoComplete=\"email\"\r\n                 autoFocus\r\n               />\r\n@@ -166,26 +208,38 @@\n               )}\r\n             </div>\r\n \r\n             <div className=\"mb-3\">\r\n-              <label htmlFor=\"password\" className=\"form-label\">Password</label>\r\n+              <label htmlFor=\"password\" className=\"form-label\">\r\n+                Password\r\n+              </label>\r\n               <input\r\n                 type=\"password\"\r\n-                className={`form-control${touched.password && errors.password ? \" is-invalid\" : \"\"}`}\r\n+                className={`form-control${\r\n+                  touched.password && errors.password ? \" is-invalid\" : \"\"\r\n+                }`}\r\n                 id=\"password\"\r\n                 name=\"password\"\r\n                 placeholder=\"Enter your password\"\r\n                 value={form.password}\r\n                 onChange={handleChange}\r\n                 onBlur={handleBlur}\r\n                 aria-invalid={!!(touched.password && errors.password)}\r\n-                aria-describedby={touched.password && errors.password ? \"passwordError\" : \"passwordHelp\"}\r\n+                aria-describedby={\r\n+                  touched.password && errors.password\r\n+                    ? \"passwordError\"\r\n+                    : \"passwordHelp\"\r\n+                }\r\n                 required\r\n                 autoComplete=\"current-password\"\r\n               />\r\n-             \r\n+\r\n               {touched.password && errors.password && (\r\n-                <div id=\"passwordError\" className=\"invalid-feedback d-block\" role=\"alert\">\r\n+                <div\r\n+                  id=\"passwordError\"\r\n+                  className=\"invalid-feedback d-block\"\r\n+                  role=\"alert\"\r\n+                >\r\n                   {errors.password}\r\n                 </div>\r\n               )}\r\n             </div>\r\n@@ -223,18 +277,20 @@\n               aria-describedby={!isFormValid ? \"formErrors\" : undefined}\r\n             >\r\n               {submitting ? (\r\n                 <>\r\n-                  <span className=\"spinner-border spinner-border-sm me-2\" role=\"status\" aria-hidden=\"true\"></span>\r\n+                  <span\r\n+                    className=\"spinner-border spinner-border-sm me-2\"\r\n+                    role=\"status\"\r\n+                    aria-hidden=\"true\"\r\n+                  ></span>\r\n                   Signing In...\r\n                 </>\r\n               ) : (\r\n                 \"Sign In\"\r\n               )}\r\n             </button>\r\n \r\n-          \r\n-\r\n             <div className=\"text-center mb-3\">\r\n               <button\r\n                 type=\"button\"\r\n                 className=\"btn btn-link text-warning text-decoration-none p-0\"\r\n@@ -243,10 +299,14 @@\n               >\r\n                 <i className=\"bi bi-question-circle me-1\"></i>\r\n                 Forgot your password?\r\n               </button>\r\n-              <small id=\"forgotPasswordHelp\" className=\"d-block text-muted mt-1\">\r\n-                Enter your email above and click this link to reset your password.\r\n+              <small\r\n+                id=\"forgotPasswordHelp\"\r\n+                className=\"d-block text-muted mt-1\"\r\n+              >\r\n+                Enter your email above and click this link to reset your\r\n+                password.\r\n               </small>\r\n             </div>\r\n \r\n             <hr className=\"border-secondary\" />\r\n@@ -254,20 +314,20 @@\n             <p className=\"text-center text-white-50 mb-3\">\r\n               <i className=\"bi bi-arrow-down me-2\"></i>\r\n               Or sign in with\r\n             </p>\r\n-            \r\n+\r\n             <div className=\"d-flex flex-column flex-md-row justify-content-center gap-2\">\r\n               <button\r\n                 type=\"button\"\r\n                 className=\"btn btn-light d-flex align-items-center justify-content-center w-100\"\r\n                 onClick={handleGoogleLogin}\r\n                 aria-label=\"Sign in with Google account\"\r\n               >\r\n-                <img \r\n-                  src=\"https://img.icons8.com/color/24/000000/google-logo.png\" \r\n-                  className=\"me-2\" \r\n-                  alt=\"Google logo\" \r\n+                <img\r\n+                  src=\"https://img.icons8.com/color/24/000000/google-logo.png\"\r\n+                  className=\"me-2\"\r\n+                  alt=\"Google logo\"\r\n                   aria-hidden=\"true\"\r\n                 />\r\n                 <span>Continue with Google</span>\r\n               </button>\r\n@@ -287,5 +347,5 @@\n     </div>\r\n   );\r\n };\r\n \r\n-export default Login; \n\\ No newline at end of file\n+export default Login;\r\n"
                },
                {
                    "date": 1752555320909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,12 @@\n   const [captchaToken, setCaptchaToken] = useState(null);\r\n   const [loginError, setLoginError] = useState(\"\");\r\n   const recaptchaRef = useRef(null);\r\n \r\n+  // API Configuration\r\n+  const API_BASE_URL = \"http://54.234.145.12:8004\";\r\n+  const LOGIN_ENDPOINT = `${API_BASE_URL}/login`; // Adjust endpoint path as needed\r\n+\r\n   // Get reCAPTCHA site key from environment variable\r\n   const recaptchaSiteKey =\r\n     import.meta.env.VITE_RECAPTCHA_SITE_KEY ||\r\n     \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\";\r\n@@ -87,46 +91,83 @@\n     if (Object.keys(validationErrors).length === 0) {\r\n       setSubmitting(true);\r\n \r\n       try {\r\n-        // In a real app, you would send the captchaToken to your backend for verification\r\n-        // const response = await fetch('/api/login', {\r\n-        //   method: 'POST',\r\n-        //   headers: { 'Content-Type': 'application/json' },\r\n-        //   body: JSON.stringify({\r\n-        //     email: form.email,\r\n-        //     password: form.password,\r\n-        //     captchaToken\r\n-        //   })\r\n-        // });\r\n+        // Prepare request payload\r\n+        const requestPayload = {\r\n+          email: form.email,\r\n+          password: form.password,\r\n+          captchaToken: captchaToken,\r\n+        };\r\n \r\n-        // Simulate API call with potential failure\r\n-        setTimeout(() => {\r\n-          setSubmitting(false);\r\n+        console.log(\"Sending login request to:\", LOGIN_ENDPOINT);\r\n+        console.log(\"Request payload:\", requestPayload);\r\n \r\n-          // Simulate login failure for demo purposes\r\n-          if (\r\n-            form.email === \"demo@example.com\" &&\r\n-            form.password === \"DemoPass123\"\r\n-          ) {\r\n-            alert(\"Login successful! (Demo)\");\r\n+        // Make API call to your backend\r\n+        const response = await fetch(LOGIN_ENDPOINT, {\r\n+          method: \"POST\",\r\n+          headers: {\r\n+            \"Content-Type\": \"application/json\",\r\n+            \"Accept\": \"application/json\",\r\n+          },\r\n+          body: JSON.stringify(requestPayload),\r\n+        });\r\n+\r\n+        console.log(\"Response status:\", response.status);\r\n+        console.log(\"Response headers:\", response.headers);\r\n+\r\n+        const responseData = await response.json();\r\n+        console.log(\"Response data:\", responseData);\r\n+\r\n+        setSubmitting(false);\r\n+\r\n+        if (response.ok) {\r\n+          // Login successful\r\n+          if (responseData.success || responseData.token || responseData.user) {\r\n+            // Store token/user data as needed\r\n+            if (responseData.token) {\r\n+              localStorage.setItem(\"authToken\", responseData.token);\r\n+            }\r\n+            if (responseData.user) {\r\n+              localStorage.setItem(\"user\", JSON.stringify(responseData.user));\r\n+            }\r\n+\r\n+            alert(\"Login successful!\");\r\n             // Reset reCAPTCHA after successful login\r\n             if (recaptchaRef.current) {\r\n               recaptchaRef.current.reset();\r\n               setCaptchaToken(null);\r\n             }\r\n+            \r\n+            // Redirect or update app state as needed\r\n+            // window.location.href = \"/dashboard\"; // or use React Router navigation\r\n           } else {\r\n-            setLoginError(\"Invalid email or password. Please try again.\");\r\n-            // Reset reCAPTCHA on failed login\r\n-            if (recaptchaRef.current) {\r\n-              recaptchaRef.current.reset();\r\n-              setCaptchaToken(null);\r\n-            }\r\n+            setLoginError(\"Login successful but unexpected response format.\");\r\n           }\r\n-        }, 1000);\r\n+        } else {\r\n+          // Login failed\r\n+          const errorMessage = responseData.message || \r\n+                              responseData.error || \r\n+                              responseData.detail || \r\n+                              `Login failed (${response.status})`;\r\n+          setLoginError(errorMessage);\r\n+          \r\n+          // Reset reCAPTCHA on failed login\r\n+          if (recaptchaRef.current) {\r\n+            recaptchaRef.current.reset();\r\n+            setCaptchaToken(null);\r\n+          }\r\n+        }\r\n       } catch (error) {\r\n+        console.error(\"Login error:\", error);\r\n         setSubmitting(false);\r\n-        setLoginError(\"An error occurred. Please try again.\");\r\n+        \r\n+        if (error.name === \"TypeError\" && error.message.includes(\"fetch\")) {\r\n+          setLoginError(\"Network error. Please check your connection and try again.\");\r\n+        } else {\r\n+          setLoginError(\"An unexpected error occurred. Please try again.\");\r\n+        }\r\n+        \r\n         // Reset reCAPTCHA on error\r\n         if (recaptchaRef.current) {\r\n           recaptchaRef.current.reset();\r\n           setCaptchaToken(null);\r\n@@ -231,9 +272,11 @@\n                 }\r\n                 required\r\n                 autoComplete=\"current-password\"\r\n               />\r\n-\r\n+              <small id=\"passwordHelp\" className=\"text-muted\">\r\n+                Password must be 8-20 characters with at least one number and one uppercase letter.\r\n+              </small>\r\n               {touched.password && errors.password && (\r\n                 <div\r\n                   id=\"passwordError\"\r\n                   className=\"invalid-feedback d-block\"\r\n@@ -289,8 +332,14 @@\n                 \"Sign In\"\r\n               )}\r\n             </button>\r\n \r\n+            {!isFormValid && (\r\n+              <div id=\"formErrors\" className=\"sr-only\" aria-live=\"polite\">\r\n+                Please fix the form errors above to continue.\r\n+              </div>\r\n+            )}\r\n+\r\n             <div className=\"text-center mb-3\">\r\n               <button\r\n                 type=\"button\"\r\n                 className=\"btn btn-link text-warning text-decoration-none p-0\"\r\n"
                },
                {
                    "date": 1752555403823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n   const [loginError, setLoginError] = useState(\"\");\r\n   const recaptchaRef = useRef(null);\r\n \r\n   // API Configuration\r\n-  const API_BASE_URL = \"http://54.234.145.12:8004\";\r\n+  const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || \"http://54.234.145.12:8004\";\r\n   const LOGIN_ENDPOINT = `${API_BASE_URL}/login`; // Adjust endpoint path as needed\r\n \r\n   // Get reCAPTCHA site key from environment variable\r\n   const recaptchaSiteKey =\r\n"
                },
                {
                    "date": 1752555416988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n   const [loginError, setLoginError] = useState(\"\");\r\n   const recaptchaRef = useRef(null);\r\n \r\n   // API Configuration\r\n-  const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || \"http://54.234.145.12:8004\";\r\n+  const API_BASE_URL = import.meta.env.VITE_API_BASE_URL ;\r\n   const LOGIN_ENDPOINT = `${API_BASE_URL}/login`; // Adjust endpoint path as needed\r\n \r\n   // Get reCAPTCHA site key from environment variable\r\n   const recaptchaSiteKey =\r\n"
                },
                {
                    "date": 1752555444524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n   const recaptchaRef = useRef(null);\r\n \r\n   // API Configuration\r\n   const API_BASE_URL = import.meta.env.VITE_API_BASE_URL ;\r\n-  const LOGIN_ENDPOINT = `${API_BASE_URL}/login`; // Adjust endpoint path as needed\r\n+  const LOGIN_ENDPOINT = `${API_BASE_URL}//api/v1/user/login`; // Adjust endpoint path as needed\r\n \r\n   // Get reCAPTCHA site key from environment variable\r\n   const recaptchaSiteKey =\r\n     import.meta.env.VITE_RECAPTCHA_SITE_KEY ||\r\n"
                },
                {
                    "date": 1752556103105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,13 +13,13 @@\n   const recaptchaRef = useRef(null);\r\n \r\n   // API Configuration\r\n   const API_BASE_URL = import.meta.env.VITE_API_BASE_URL ;\r\n-  const LOGIN_ENDPOINT = `${API_BASE_URL}//api/v1/user/login`; // Adjust endpoint path as needed\r\n+  const LOGIN_ENDPOINT = `${API_BASE_URL}/api/v1/user/login`; // Adjust endpoint path as needed\r\n \r\n   // Get reCAPTCHA site key from environment variable\r\n   const recaptchaSiteKey =\r\n-    import.meta.env.VITE_RECAPTCHA_SITE_KEY ||\r\n+    import.meta.env.VITE_RECAPTCHA_SITE_KEY \r\n     \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\";\r\n \r\n   const validate = (values) => {\r\n     const errs = {};\r\n"
                },
                {
                    "date": 1752557015775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,8 @@\n \r\n   // Get reCAPTCHA site key from environment variable\r\n   const recaptchaSiteKey =\r\n     import.meta.env.VITE_RECAPTCHA_SITE_KEY \r\n-    \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\";\r\n \r\n   const validate = (values) => {\r\n     const errs = {};\r\n     if (!values.email) errs.email = \"Email is required.\";\r\n"
                },
                {
                    "date": 1752557069899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,399 +1,400 @@\n-import React, { useState, useRef } from \"react\";\r\n-import ReCAPTCHA from \"react-google-recaptcha\";\r\n-import banner from \"../assets/banner.png\";\r\n-import Navbar from \"../components/Navbar\";\r\n-\r\n-const Login = () => {\r\n-  const [form, setForm] = useState({ email: \"\", password: \"\" });\r\n-  const [touched, setTouched] = useState({});\r\n-  const [errors, setErrors] = useState({});\r\n-  const [submitting, setSubmitting] = useState(false);\r\n-  const [captchaToken, setCaptchaToken] = useState(null);\r\n-  const [loginError, setLoginError] = useState(\"\");\r\n-  const recaptchaRef = useRef(null);\r\n-\r\n-  // API Configuration\r\n-  const API_BASE_URL = import.meta.env.VITE_API_BASE_URL ;\r\n-  const LOGIN_ENDPOINT = `${API_BASE_URL}/api/v1/user/login`; // Adjust endpoint path as needed\r\n-\r\n-  // Get reCAPTCHA site key from environment variable\r\n-  const recaptchaSiteKey =\r\n-    import.meta.env.VITE_RECAPTCHA_SITE_KEY \r\n-\r\n-  const validate = (values) => {\r\n-    const errs = {};\r\n-    if (!values.email) errs.email = \"Email is required.\";\r\n-    else if (!/^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/.test(values.email))\r\n-      errs.email = \"Invalid email format.\";\r\n-    if (!values.password) errs.password = \"Password is required.\";\r\n-    else if (!/^(?=.*[A-Z])(?=.*\\d).{8,20}$/.test(values.password))\r\n-      errs.password =\r\n-        \"Password must be 8-20 characters with at least one number and one uppercase letter.\";\r\n-    if (!captchaToken)\r\n-      errs.captcha = \"Please complete the reCAPTCHA verification.\";\r\n-    return errs;\r\n-  };\r\n-\r\n-  const handleChange = (e) => {\r\n-    const { name, value } = e.target;\r\n-    setForm((prev) => ({ ...prev, [name]: value }));\r\n-    // Clear login error when user starts typing\r\n-    if (loginError) setLoginError(\"\");\r\n-  };\r\n-\r\n-  const handleBlur = (e) => {\r\n-    setTouched((prev) => ({ ...prev, [e.target.name]: true }));\r\n-  };\r\n-\r\n-  const handleCaptchaChange = (token) => {\r\n-    setCaptchaToken(token);\r\n-    // Clear captcha error when user completes verification\r\n-    if (errors.captcha) {\r\n-      setErrors((prev) => ({ ...prev, captcha: null }));\r\n-    }\r\n-  };\r\n-\r\n-  const handleCaptchaExpired = () => {\r\n-    setCaptchaToken(null);\r\n-    setErrors((prev) => ({\r\n-      ...prev,\r\n-      captcha: \"reCAPTCHA verification expired. Please try again.\",\r\n-    }));\r\n-  };\r\n-\r\n-  const handleForgotPassword = (e) => {\r\n-    e.preventDefault();\r\n-    if (!form.email) {\r\n-      setErrors((prev) => ({\r\n-        ...prev,\r\n-        email: \"Please enter your email address to reset your password.\",\r\n-      }));\r\n-      return;\r\n-    }\r\n-    // Simulate password reset email\r\n-    alert(`Password reset email sent to ${form.email} (Demo)`);\r\n-  };\r\n-\r\n-  const handleGoogleLogin = () => {\r\n-    // Simulate Google OAuth\r\n-    alert(\"Redirecting to Google OAuth (Demo)\");\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setTouched({ email: true, password: true });\r\n-    setLoginError(\"\"); // Clear previous login errors\r\n-\r\n-    const validationErrors = validate(form);\r\n-    setErrors(validationErrors);\r\n-\r\n-    if (Object.keys(validationErrors).length === 0) {\r\n-      setSubmitting(true);\r\n-\r\n-      try {\r\n-        // Prepare request payload\r\n-        const requestPayload = {\r\n-          email: form.email,\r\n-          password: form.password,\r\n-          captchaToken: captchaToken,\r\n-        };\r\n-\r\n-        console.log(\"Sending login request to:\", LOGIN_ENDPOINT);\r\n-        console.log(\"Request payload:\", requestPayload);\r\n-\r\n-        // Make API call to your backend\r\n-        const response = await fetch(LOGIN_ENDPOINT, {\r\n-          method: \"POST\",\r\n-          headers: {\r\n-            \"Content-Type\": \"application/json\",\r\n-            \"Accept\": \"application/json\",\r\n-          },\r\n-          body: JSON.stringify(requestPayload),\r\n-        });\r\n-\r\n-        console.log(\"Response status:\", response.status);\r\n-        console.log(\"Response headers:\", response.headers);\r\n-\r\n-        const responseData = await response.json();\r\n-        console.log(\"Response data:\", responseData);\r\n-\r\n-        setSubmitting(false);\r\n-\r\n-        if (response.ok) {\r\n-          // Login successful\r\n-          if (responseData.success || responseData.token || responseData.user) {\r\n-            // Store token/user data as needed\r\n-            if (responseData.token) {\r\n-              localStorage.setItem(\"authToken\", responseData.token);\r\n-            }\r\n-            if (responseData.user) {\r\n-              localStorage.setItem(\"user\", JSON.stringify(responseData.user));\r\n-            }\r\n-\r\n-            alert(\"Login successful!\");\r\n-            // Reset reCAPTCHA after successful login\r\n-            if (recaptchaRef.current) {\r\n-              recaptchaRef.current.reset();\r\n-              setCaptchaToken(null);\r\n-            }\r\n-            \r\n-            // Redirect or update app state as needed\r\n-            // window.location.href = \"/dashboard\"; // or use React Router navigation\r\n-          } else {\r\n-            setLoginError(\"Login successful but unexpected response format.\");\r\n-          }\r\n-        } else {\r\n-          // Login failed\r\n-          const errorMessage = responseData.message || \r\n-                              responseData.error || \r\n-                              responseData.detail || \r\n-                              `Login failed (${response.status})`;\r\n-          setLoginError(errorMessage);\r\n-          \r\n-          // Reset reCAPTCHA on failed login\r\n-          if (recaptchaRef.current) {\r\n-            recaptchaRef.current.reset();\r\n-            setCaptchaToken(null);\r\n-          }\r\n-        }\r\n-      } catch (error) {\r\n-        console.error(\"Login error:\", error);\r\n-        setSubmitting(false);\r\n-        \r\n-        if (error.name === \"TypeError\" && error.message.includes(\"fetch\")) {\r\n-          setLoginError(\"Network error. Please check your connection and try again.\");\r\n-        } else {\r\n-          setLoginError(\"An unexpected error occurred. Please try again.\");\r\n-        }\r\n-        \r\n-        // Reset reCAPTCHA on error\r\n-        if (recaptchaRef.current) {\r\n-          recaptchaRef.current.reset();\r\n-          setCaptchaToken(null);\r\n-        }\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  React.useEffect(() => {\r\n-    setErrors(validate(form));\r\n-    // eslint-disable-next-line\r\n-  }, [form, captchaToken]);\r\n-\r\n-  const isFormValid =\r\n-    Object.keys(errors).length === 0 &&\r\n-    form.email &&\r\n-    form.password &&\r\n-    captchaToken;\r\n-\r\n-  return (\r\n-    <div\r\n-      className=\"min-vh-100 d-flex flex-column bg-black overflow-x-hidden\"\r\n-      style={{ minHeight: \"100vh\" }}\r\n-    >\r\n-      <div\r\n-        className=\"d-flex flex-grow-1 align-items-center justify-content-center w-100 px-2\"\r\n-        style={{ minHeight: 0, width: \"100%\" }}\r\n-      >\r\n-        <div\r\n-          className=\"card bg-black text-white shadow p-4 w-100 mt-3\"\r\n-          style={{ maxWidth: 500 }}\r\n-        >\r\n-          <img\r\n-            src={banner}\r\n-            alt=\"Promo Banner\"\r\n-            className=\"img-fluid rounded mb-3\"\r\n-          />\r\n-\r\n-          <form onSubmit={handleSubmit} noValidate>\r\n-            {/* Login Error Message */}\r\n-            {loginError && (\r\n-              <div\r\n-                className=\"alert alert-danger mb-3\"\r\n-                role=\"alert\"\r\n-                aria-live=\"polite\"\r\n-              >\r\n-                <i className=\"bi bi-exclamation-triangle me-2\"></i>\r\n-                {loginError}\r\n-              </div>\r\n-            )}\r\n-\r\n-            <div className=\"mb-3\">\r\n-              <label htmlFor=\"email\" className=\"form-label\">\r\n-                Email Address\r\n-              </label>\r\n-              <input\r\n-                type=\"email\"\r\n-                className={`form-control${\r\n-                  touched.email && errors.email ? \" is-invalid\" : \"\"\r\n-                }`}\r\n-                id=\"email\"\r\n-                name=\"email\"\r\n-                placeholder=\"Enter your email address\"\r\n-                value={form.email}\r\n-                onChange={handleChange}\r\n-                onBlur={handleBlur}\r\n-                aria-invalid={!!(touched.email && errors.email)}\r\n-                aria-describedby={\r\n-                  touched.email && errors.email ? \"emailError\" : \"emailHelp\"\r\n-                }\r\n-                required\r\n-                autoComplete=\"email\"\r\n-                autoFocus\r\n-              />\r\n-              {touched.email && errors.email && (\r\n-                <div id=\"emailError\" className=\"invalid-feedback\" role=\"alert\">\r\n-                  {errors.email}\r\n-                </div>\r\n-              )}\r\n-            </div>\r\n-\r\n-            <div className=\"mb-3\">\r\n-              <label htmlFor=\"password\" className=\"form-label\">\r\n-                Password\r\n-              </label>\r\n-              <input\r\n-                type=\"password\"\r\n-                className={`form-control${\r\n-                  touched.password && errors.password ? \" is-invalid\" : \"\"\r\n-                }`}\r\n-                id=\"password\"\r\n-                name=\"password\"\r\n-                placeholder=\"Enter your password\"\r\n-                value={form.password}\r\n-                onChange={handleChange}\r\n-                onBlur={handleBlur}\r\n-                aria-invalid={!!(touched.password && errors.password)}\r\n-                aria-describedby={\r\n-                  touched.password && errors.password\r\n-                    ? \"passwordError\"\r\n-                    : \"passwordHelp\"\r\n-                }\r\n-                required\r\n-                autoComplete=\"current-password\"\r\n-              />\r\n-              <small id=\"passwordHelp\" className=\"text-muted\">\r\n-                Password must be 8-20 characters with at least one number and one uppercase letter.\r\n-              </small>\r\n-              {touched.password && errors.password && (\r\n-                <div\r\n-                  id=\"passwordError\"\r\n-                  className=\"invalid-feedback d-block\"\r\n-                  role=\"alert\"\r\n-                >\r\n-                  {errors.password}\r\n-                </div>\r\n-              )}\r\n-            </div>\r\n-\r\n-            <div className=\"mb-3\">\r\n-              <div className=\"form-label mb-2\">\r\n-                <i className=\"bi bi-shield-check me-2\"></i>\r\n-                Security Verification\r\n-              </div>\r\n-              <div className=\"d-flex flex-column align-items-center\">\r\n-                {/* Real reCAPTCHA */}\r\n-                <ReCAPTCHA\r\n-                  ref={recaptchaRef}\r\n-                  sitekey={recaptchaSiteKey}\r\n-                  onChange={handleCaptchaChange}\r\n-                  onExpired={handleCaptchaExpired}\r\n-                  theme=\"light\"\r\n-                  size=\"normal\"\r\n-                  aria-label=\"Complete reCAPTCHA verification\"\r\n-                />\r\n-                {errors.captcha && (\r\n-                  <div className=\"text-danger small mt-2\" role=\"alert\">\r\n-                    <i className=\"bi bi-exclamation-circle me-1\"></i>\r\n-                    {errors.captcha}\r\n-                  </div>\r\n-                )}\r\n-              </div>\r\n-            </div>\r\n-\r\n-            <button\r\n-              type=\"submit\"\r\n-              className=\"btn btn-warning text-dark fw-bold w-100 mb-3\"\r\n-              disabled={!isFormValid || submitting}\r\n-              aria-disabled={!isFormValid || submitting}\r\n-              aria-describedby={!isFormValid ? \"formErrors\" : undefined}\r\n-            >\r\n-              {submitting ? (\r\n-                <>\r\n-                  <span\r\n-                    className=\"spinner-border spinner-border-sm me-2\"\r\n-                    role=\"status\"\r\n-                    aria-hidden=\"true\"\r\n-                  ></span>\r\n-                  Signing In...\r\n-                </>\r\n-              ) : (\r\n-                \"Sign In\"\r\n-              )}\r\n-            </button>\r\n-\r\n-            {!isFormValid && (\r\n-              <div id=\"formErrors\" className=\"sr-only\" aria-live=\"polite\">\r\n-                Please fix the form errors above to continue.\r\n-              </div>\r\n-            )}\r\n-\r\n-            <div className=\"text-center mb-3\">\r\n-              <button\r\n-                type=\"button\"\r\n-                className=\"btn btn-link text-warning text-decoration-none p-0\"\r\n-                onClick={handleForgotPassword}\r\n-                aria-describedby=\"forgotPasswordHelp\"\r\n-              >\r\n-                <i className=\"bi bi-question-circle me-1\"></i>\r\n-                Forgot your password?\r\n-              </button>\r\n-              <small\r\n-                id=\"forgotPasswordHelp\"\r\n-                className=\"d-block text-muted mt-1\"\r\n-              >\r\n-                Enter your email above and click this link to reset your\r\n-                password.\r\n-              </small>\r\n-            </div>\r\n-\r\n-            <hr className=\"border-secondary\" />\r\n-\r\n-            <p className=\"text-center text-white-50 mb-3\">\r\n-              <i className=\"bi bi-arrow-down me-2\"></i>\r\n-              Or sign in with\r\n-            </p>\r\n-\r\n-            <div className=\"d-flex flex-column flex-md-row justify-content-center gap-2\">\r\n-              <button\r\n-                type=\"button\"\r\n-                className=\"btn btn-light d-flex align-items-center justify-content-center w-100\"\r\n-                onClick={handleGoogleLogin}\r\n-                aria-label=\"Sign in with Google account\"\r\n-              >\r\n-                <img\r\n-                  src=\"https://img.icons8.com/color/24/000000/google-logo.png\"\r\n-                  className=\"me-2\"\r\n-                  alt=\"Google logo\"\r\n-                  aria-hidden=\"true\"\r\n-                />\r\n-                <span>Continue with Google</span>\r\n-              </button>\r\n-            </div>\r\n-\r\n-            <div className=\"text-center mt-3\">\r\n-              <small className=\"text-muted\">\r\n-                Don't have an account?{\" \"}\r\n-                <a href=\"/signup\" className=\"text-warning text-decoration-none\">\r\n-                  Sign up here\r\n-                </a>\r\n-              </small>\r\n-            </div>\r\n-          </form>\r\n-        </div>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default Login;\r\n+import React, { useState, useRef } from \"react\";\n+import ReCAPTCHA from \"react-google-recaptcha\";\n+import banner from \"../assets/banner.png\";\n+import Navbar from \"../components/Navbar\";\n+\n+const Login = () => {\n+  const [form, setForm] = useState({ email: \"\", password: \"\" });\n+  const [touched, setTouched] = useState({});\n+  const [errors, setErrors] = useState({});\n+  const [submitting, setSubmitting] = useState(false);\n+  const [captchaToken, setCaptchaToken] = useState(null);\n+  const [loginError, setLoginError] = useState(\"\");\n+  const recaptchaRef = useRef(null);\n+\n+  // API Configuration\n+  const API_BASE_URL = import.meta.env.VITE_API_BASE_URL ;\n+  const LOGIN_ENDPOINT = `${API_BASE_URL}/api/v1/user/login`; // Adjust endpoint path as needed\n+\n+  // Get reCAPTCHA site key from environment variable\n+  const recaptchaSiteKey =\n+    import.meta.env.VITE_RECAPTCHA_SITE_KEY ||\n+    \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\";\n+\n+  const validate = (values) => {\n+    const errs = {};\n+    if (!values.email) errs.email = \"Email is required.\";\n+    else if (!/^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/.test(values.email))\n+      errs.email = \"Invalid email format.\";\n+    if (!values.password) errs.password = \"Password is required.\";\n+    else if (!/^(?=.*[A-Z])(?=.*\\d).{8,20}$/.test(values.password))\n+      errs.password =\n+        \"Password must be 8-20 characters with at least one number and one uppercase letter.\";\n+    if (!captchaToken)\n+      errs.captcha = \"Please complete the reCAPTCHA verification.\";\n+    return errs;\n+  };\n+\n+  const handleChange = (e) => {\n+    const { name, value } = e.target;\n+    setForm((prev) => ({ ...prev, [name]: value }));\n+    // Clear login error when user starts typing\n+    if (loginError) setLoginError(\"\");\n+  };\n+\n+  const handleBlur = (e) => {\n+    setTouched((prev) => ({ ...prev, [e.target.name]: true }));\n+  };\n+\n+  const handleCaptchaChange = (token) => {\n+    setCaptchaToken(token);\n+    // Clear captcha error when user completes verification\n+    if (errors.captcha) {\n+      setErrors((prev) => ({ ...prev, captcha: null }));\n+    }\n+  };\n+\n+  const handleCaptchaExpired = () => {\n+    setCaptchaToken(null);\n+    setErrors((prev) => ({\n+      ...prev,\n+      captcha: \"reCAPTCHA verification expired. Please try again.\",\n+    }));\n+  };\n+\n+  const handleForgotPassword = (e) => {\n+    e.preventDefault();\n+    if (!form.email) {\n+      setErrors((prev) => ({\n+        ...prev,\n+        email: \"Please enter your email address to reset your password.\",\n+      }));\n+      return;\n+    }\n+    // Simulate password reset email\n+    alert(`Password reset email sent to ${form.email} (Demo)`);\n+  };\n+\n+  const handleGoogleLogin = () => {\n+    // Simulate Google OAuth\n+    alert(\"Redirecting to Google OAuth (Demo)\");\n+  };\n+\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+    setTouched({ email: true, password: true });\n+    setLoginError(\"\"); // Clear previous login errors\n+\n+    const validationErrors = validate(form);\n+    setErrors(validationErrors);\n+\n+    if (Object.keys(validationErrors).length === 0) {\n+      setSubmitting(true);\n+\n+      try {\n+        // Prepare request payload\n+        const requestPayload = {\n+          email: form.email,\n+          password: form.password,\n+          captchaToken: captchaToken,\n+        };\n+\n+        console.log(\"Sending login request to:\", LOGIN_ENDPOINT);\n+        console.log(\"Request payload:\", requestPayload);\n+\n+        // Make API call to your backend\n+        const response = await fetch(LOGIN_ENDPOINT, {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+            \"Accept\": \"application/json\",\n+          },\n+          body: JSON.stringify(requestPayload),\n+        });\n+\n+        console.log(\"Response status:\", response.status);\n+        console.log(\"Response headers:\", response.headers);\n+\n+        const responseData = await response.json();\n+        console.log(\"Response data:\", responseData);\n+\n+        setSubmitting(false);\n+\n+        if (response.ok) {\n+          // Login successful\n+          if (responseData.success || responseData.token || responseData.user) {\n+            // Store token/user data as needed\n+            if (responseData.token) {\n+              localStorage.setItem(\"authToken\", responseData.token);\n+            }\n+            if (responseData.user) {\n+              localStorage.setItem(\"user\", JSON.stringify(responseData.user));\n+            }\n+\n+            alert(\"Login successful!\");\n+            // Reset reCAPTCHA after successful login\n+            if (recaptchaRef.current) {\n+              recaptchaRef.current.reset();\n+              setCaptchaToken(null);\n+            }\n+            \n+            // Redirect or update app state as needed\n+            // window.location.href = \"/dashboard\"; // or use React Router navigation\n+          } else {\n+            setLoginError(\"Login successful but unexpected response format.\");\n+          }\n+        } else {\n+          // Login failed\n+          const errorMessage = responseData.message || \n+                              responseData.error || \n+                              responseData.detail || \n+                              `Login failed (${response.status})`;\n+          setLoginError(errorMessage);\n+          \n+          // Reset reCAPTCHA on failed login\n+          if (recaptchaRef.current) {\n+            recaptchaRef.current.reset();\n+            setCaptchaToken(null);\n+          }\n+        }\n+      } catch (error) {\n+        console.error(\"Login error:\", error);\n+        setSubmitting(false);\n+        \n+        if (error.name === \"TypeError\" && error.message.includes(\"fetch\")) {\n+          setLoginError(\"Network error. Please check your connection and try again.\");\n+        } else {\n+          setLoginError(\"An unexpected error occurred. Please try again.\");\n+        }\n+        \n+        // Reset reCAPTCHA on error\n+        if (recaptchaRef.current) {\n+          recaptchaRef.current.reset();\n+          setCaptchaToken(null);\n+        }\n+      }\n+    }\n+  };\n+\n+  React.useEffect(() => {\n+    setErrors(validate(form));\n+    // eslint-disable-next-line\n+  }, [form, captchaToken]);\n+\n+  const isFormValid =\n+    Object.keys(errors).length === 0 &&\n+    form.email &&\n+    form.password &&\n+    captchaToken;\n+\n+  return (\n+    <div\n+      className=\"min-vh-100 d-flex flex-column bg-black overflow-x-hidden\"\n+      style={{ minHeight: \"100vh\" }}\n+    >\n+      <div\n+        className=\"d-flex flex-grow-1 align-items-center justify-content-center w-100 px-2\"\n+        style={{ minHeight: 0, width: \"100%\" }}\n+      >\n+        <div\n+          className=\"card bg-black text-white shadow p-4 w-100 mt-3\"\n+          style={{ maxWidth: 500 }}\n+        >\n+          <img\n+            src={banner}\n+            alt=\"Promo Banner\"\n+            className=\"img-fluid rounded mb-3\"\n+          />\n+\n+          <form onSubmit={handleSubmit} noValidate>\n+            {/* Login Error Message */}\n+            {loginError && (\n+              <div\n+                className=\"alert alert-danger mb-3\"\n+                role=\"alert\"\n+                aria-live=\"polite\"\n+              >\n+                <i className=\"bi bi-exclamation-triangle me-2\"></i>\n+                {loginError}\n+              </div>\n+            )}\n+\n+            <div className=\"mb-3\">\n+              <label htmlFor=\"email\" className=\"form-label\">\n+                Email Address\n+              </label>\n+              <input\n+                type=\"email\"\n+                className={`form-control${\n+                  touched.email && errors.email ? \" is-invalid\" : \"\"\n+                }`}\n+                id=\"email\"\n+                name=\"email\"\n+                placeholder=\"Enter your email address\"\n+                value={form.email}\n+                onChange={handleChange}\n+                onBlur={handleBlur}\n+                aria-invalid={!!(touched.email && errors.email)}\n+                aria-describedby={\n+                  touched.email && errors.email ? \"emailError\" : \"emailHelp\"\n+                }\n+                required\n+                autoComplete=\"email\"\n+                autoFocus\n+              />\n+              {touched.email && errors.email && (\n+                <div id=\"emailError\" className=\"invalid-feedback\" role=\"alert\">\n+                  {errors.email}\n+                </div>\n+              )}\n+            </div>\n+\n+            <div className=\"mb-3\">\n+              <label htmlFor=\"password\" className=\"form-label\">\n+                Password\n+              </label>\n+              <input\n+                type=\"password\"\n+                className={`form-control${\n+                  touched.password && errors.password ? \" is-invalid\" : \"\"\n+                }`}\n+                id=\"password\"\n+                name=\"password\"\n+                placeholder=\"Enter your password\"\n+                value={form.password}\n+                onChange={handleChange}\n+                onBlur={handleBlur}\n+                aria-invalid={!!(touched.password && errors.password)}\n+                aria-describedby={\n+                  touched.password && errors.password\n+                    ? \"passwordError\"\n+                    : \"passwordHelp\"\n+                }\n+                required\n+                autoComplete=\"current-password\"\n+              />\n+              <small id=\"passwordHelp\" className=\"text-muted\">\n+                Password must be 8-20 characters with at least one number and one uppercase letter.\n+              </small>\n+              {touched.password && errors.password && (\n+                <div\n+                  id=\"passwordError\"\n+                  className=\"invalid-feedback d-block\"\n+                  role=\"alert\"\n+                >\n+                  {errors.password}\n+                </div>\n+              )}\n+            </div>\n+\n+            <div className=\"mb-3\">\n+              <div className=\"form-label mb-2\">\n+                <i className=\"bi bi-shield-check me-2\"></i>\n+                Security Verification\n+              </div>\n+              <div className=\"d-flex flex-column align-items-center\">\n+                {/* Real reCAPTCHA */}\n+                <ReCAPTCHA\n+                  ref={recaptchaRef}\n+                  sitekey={recaptchaSiteKey}\n+                  onChange={handleCaptchaChange}\n+                  onExpired={handleCaptchaExpired}\n+                  theme=\"light\"\n+                  size=\"normal\"\n+                  aria-label=\"Complete reCAPTCHA verification\"\n+                />\n+                {errors.captcha && (\n+                  <div className=\"text-danger small mt-2\" role=\"alert\">\n+                    <i className=\"bi bi-exclamation-circle me-1\"></i>\n+                    {errors.captcha}\n+                  </div>\n+                )}\n+              </div>\n+            </div>\n+\n+            <button\n+              type=\"submit\"\n+              className=\"btn btn-warning text-dark fw-bold w-100 mb-3\"\n+              disabled={!isFormValid || submitting}\n+              aria-disabled={!isFormValid || submitting}\n+              aria-describedby={!isFormValid ? \"formErrors\" : undefined}\n+            >\n+              {submitting ? (\n+                <>\n+                  <span\n+                    className=\"spinner-border spinner-border-sm me-2\"\n+                    role=\"status\"\n+                    aria-hidden=\"true\"\n+                  ></span>\n+                  Signing In...\n+                </>\n+              ) : (\n+                \"Sign In\"\n+              )}\n+            </button>\n+\n+            {!isFormValid && (\n+              <div id=\"formErrors\" className=\"sr-only\" aria-live=\"polite\">\n+                Please fix the form errors above to continue.\n+              </div>\n+            )}\n+\n+            <div className=\"text-center mb-3\">\n+              <button\n+                type=\"button\"\n+                className=\"btn btn-link text-warning text-decoration-none p-0\"\n+                onClick={handleForgotPassword}\n+                aria-describedby=\"forgotPasswordHelp\"\n+              >\n+                <i className=\"bi bi-question-circle me-1\"></i>\n+                Forgot your password?\n+              </button>\n+              <small\n+                id=\"forgotPasswordHelp\"\n+                className=\"d-block text-muted mt-1\"\n+              >\n+                Enter your email above and click this link to reset your\n+                password.\n+              </small>\n+            </div>\n+\n+            <hr className=\"border-secondary\" />\n+\n+            <p className=\"text-center text-white-50 mb-3\">\n+              <i className=\"bi bi-arrow-down me-2\"></i>\n+              Or sign in with\n+            </p>\n+\n+            <div className=\"d-flex flex-column flex-md-row justify-content-center gap-2\">\n+              <button\n+                type=\"button\"\n+                className=\"btn btn-light d-flex align-items-center justify-content-center w-100\"\n+                onClick={handleGoogleLogin}\n+                aria-label=\"Sign in with Google account\"\n+              >\n+                <img\n+                  src=\"https://img.icons8.com/color/24/000000/google-logo.png\"\n+                  className=\"me-2\"\n+                  alt=\"Google logo\"\n+                  aria-hidden=\"true\"\n+                />\n+                <span>Continue with Google</span>\n+              </button>\n+            </div>\n+\n+            <div className=\"text-center mt-3\">\n+              <small className=\"text-muted\">\n+                Don't have an account?{\" \"}\n+                <a href=\"/signup\" className=\"text-warning text-decoration-none\">\n+                  Sign up here\n+                </a>\n+              </small>\n+            </div>\n+          </form>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default Login;\n"
                },
                {
                    "date": 1752557106481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import banner from \"../assets/banner.png\";\n import Navbar from \"../components/Navbar\";\n \n const Login = () => {\n-  const [form, setForm] = useState({ email: \"\", password: \"\" });\n+  const [form, setForm] = useState({ username: \"\", password: \"\" });\n   const [touched, setTouched] = useState({});\n   const [errors, setErrors] = useState({});\n   const [submitting, setSubmitting] = useState(false);\n   const [captchaToken, setCaptchaToken] = useState(null);\n@@ -22,11 +22,9 @@\n     \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\";\n \n   const validate = (values) => {\n     const errs = {};\n-    if (!values.email) errs.email = \"Email is required.\";\n-    else if (!/^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/.test(values.email))\n-      errs.email = \"Invalid email format.\";\n+    if (!values.username) errs.username = \"Username is required.\";\n     if (!values.password) errs.password = \"Password is required.\";\n     else if (!/^(?=.*[A-Z])(?=.*\\d).{8,20}$/.test(values.password))\n       errs.password =\n         \"Password must be 8-20 characters with at least one number and one uppercase letter.\";\n@@ -63,17 +61,17 @@\n   };\n \n   const handleForgotPassword = (e) => {\n     e.preventDefault();\n-    if (!form.email) {\n+    if (!form.username) {\n       setErrors((prev) => ({\n         ...prev,\n-        email: \"Please enter your email address to reset your password.\",\n+        username: \"Please enter your username to reset your password.\",\n       }));\n       return;\n     }\n-    // Simulate password reset email\n-    alert(`Password reset email sent to ${form.email} (Demo)`);\n+    // Simulate password reset\n+    alert(`Password reset link sent for username: ${form.username} (Demo)`);\n   };\n \n   const handleGoogleLogin = () => {\n     // Simulate Google OAuth\n@@ -81,9 +79,9 @@\n   };\n \n   const handleSubmit = async (e) => {\n     e.preventDefault();\n-    setTouched({ email: true, password: true });\n+    setTouched({ username: true, password: true });\n     setLoginError(\"\"); // Clear previous login errors\n \n     const validationErrors = validate(form);\n     setErrors(validationErrors);\n@@ -93,9 +91,9 @@\n \n       try {\n         // Prepare request payload\n         const requestPayload = {\n-          email: form.email,\n+          username: form.username,\n           password: form.password,\n           captchaToken: captchaToken,\n         };\n \n@@ -182,9 +180,9 @@\n   }, [form, captchaToken]);\n \n   const isFormValid =\n     Object.keys(errors).length === 0 &&\n-    form.email &&\n+    form.username &&\n     form.password &&\n     captchaToken;\n \n   return (\n@@ -219,33 +217,33 @@\n               </div>\n             )}\n \n             <div className=\"mb-3\">\n-              <label htmlFor=\"email\" className=\"form-label\">\n-                Email Address\n+              <label htmlFor=\"username\" className=\"form-label\">\n+                Username\n               </label>\n               <input\n-                type=\"email\"\n+                type=\"text\"\n                 className={`form-control${\n-                  touched.email && errors.email ? \" is-invalid\" : \"\"\n+                  touched.username && errors.username ? \" is-invalid\" : \"\"\n                 }`}\n-                id=\"email\"\n-                name=\"email\"\n-                placeholder=\"Enter your email address\"\n-                value={form.email}\n+                id=\"username\"\n+                name=\"username\"\n+                placeholder=\"Enter your username\"\n+                value={form.username}\n                 onChange={handleChange}\n                 onBlur={handleBlur}\n-                aria-invalid={!!(touched.email && errors.email)}\n+                aria-invalid={!!(touched.username && errors.username)}\n                 aria-describedby={\n-                  touched.email && errors.email ? \"emailError\" : \"emailHelp\"\n+                  touched.username && errors.username ? \"usernameError\" : \"usernameHelp\"\n                 }\n                 required\n-                autoComplete=\"email\"\n+                autoComplete=\"username\"\n                 autoFocus\n               />\n-              {touched.email && errors.email && (\n-                <div id=\"emailError\" className=\"invalid-feedback\" role=\"alert\">\n-                  {errors.email}\n+              {touched.username && errors.username && (\n+                <div id=\"usernameError\" className=\"invalid-feedback\" role=\"alert\">\n+                  {errors.username}\n                 </div>\n               )}\n             </div>\n \n@@ -352,10 +350,9 @@\n               <small\n                 id=\"forgotPasswordHelp\"\n                 className=\"d-block text-muted mt-1\"\n               >\n-                Enter your email above and click this link to reset your\n-                password.\n+                Enter your username above and click this link to reset your password.\n               </small>\n             </div>\n \n             <hr className=\"border-secondary\" />\n"
                },
                {
                    "date": 1752557470843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,11 +270,8 @@\n                 }\n                 required\n                 autoComplete=\"current-password\"\n               />\n-              <small id=\"passwordHelp\" className=\"text-muted\">\n-                Password must be 8-20 characters with at least one number and one uppercase letter.\n-              </small>\n               {touched.password && errors.password && (\n                 <div\n                   id=\"passwordError\"\n                   className=\"invalid-feedback d-block\"\n"
                },
                {
                    "date": 1752557554088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n   const recaptchaRef = useRef(null);\n \n   // API Configuration\n   const API_BASE_URL = import.meta.env.VITE_API_BASE_URL ;\n-  const LOGIN_ENDPOINT = `${API_BASE_URL}/api/v1/user/login`; // Adjust endpoint path as needed\n+  const LOGIN_ENDPOINT = `${API_BASE_URL}/user/login`; // Adjust endpoint path as needed\n \n   // Get reCAPTCHA site key from environment variable\n   const recaptchaSiteKey =\n     import.meta.env.VITE_RECAPTCHA_SITE_KEY ||\n"
                },
                {
                    "date": 1752557563376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,11 +13,10 @@\n   const recaptchaRef = useRef(null);\n \n   // API Configuration\n   const API_BASE_URL = import.meta.env.VITE_API_BASE_URL ;\n-  const LOGIN_ENDPOINT = `${API_BASE_URL}/user/login`; // Adjust endpoint path as needed\n+  const LOGIN_ENDPOINT = `${API_BASE_URL}/user/login`; \n \n-  // Get reCAPTCHA site key from environment variable\n   const recaptchaSiteKey =\n     import.meta.env.VITE_RECAPTCHA_SITE_KEY ||\n     \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\";\n \n"
                },
                {
                    "date": 1752557634583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n import React, { useState, useRef } from \"react\";\n import ReCAPTCHA from \"react-google-recaptcha\";\n import banner from \"../assets/banner.png\";\n import Navbar from \"../components/Navbar\";\n+import { ToastContainer, toast } from \"react-toastify\";\n+import \"react-toastify/dist/ReactToastify.css\";\n \n const Login = () => {\n   const [form, setForm] = useState({ username: \"\", password: \"\" });\n   const [touched, setTouched] = useState({});\n@@ -126,10 +128,9 @@\n             }\n             if (responseData.user) {\n               localStorage.setItem(\"user\", JSON.stringify(responseData.user));\n             }\n-\n-            alert(\"Login successful!\");\n+            toast.success(\"Login successful!\");\n             // Reset reCAPTCHA after successful login\n             if (recaptchaRef.current) {\n               recaptchaRef.current.reset();\n               setCaptchaToken(null);\n@@ -146,8 +147,9 @@\n                               responseData.error || \n                               responseData.detail || \n                               `Login failed (${response.status})`;\n           setLoginError(errorMessage);\n+          toast.error(errorMessage);\n           \n           // Reset reCAPTCHA on failed login\n           if (recaptchaRef.current) {\n             recaptchaRef.current.reset();\n@@ -159,10 +161,12 @@\n         setSubmitting(false);\n         \n         if (error.name === \"TypeError\" && error.message.includes(\"fetch\")) {\n           setLoginError(\"Network error. Please check your connection and try again.\");\n+          toast.error(\"Network error. Please check your connection and try again.\");\n         } else {\n           setLoginError(\"An unexpected error occurred. Please try again.\");\n+          toast.error(\"An unexpected error occurred. Please try again.\");\n         }\n         \n         // Reset reCAPTCHA on error\n         if (recaptchaRef.current) {\n@@ -184,210 +188,213 @@\n     form.password &&\n     captchaToken;\n \n   return (\n-    <div\n-      className=\"min-vh-100 d-flex flex-column bg-black overflow-x-hidden\"\n-      style={{ minHeight: \"100vh\" }}\n-    >\n+    <>\n+      <ToastContainer position=\"top-center\" autoClose={3000} />\n       <div\n-        className=\"d-flex flex-grow-1 align-items-center justify-content-center w-100 px-2\"\n-        style={{ minHeight: 0, width: \"100%\" }}\n+        className=\"min-vh-100 d-flex flex-column bg-black overflow-x-hidden\"\n+        style={{ minHeight: \"100vh\" }}\n       >\n         <div\n-          className=\"card bg-black text-white shadow p-4 w-100 mt-3\"\n-          style={{ maxWidth: 500 }}\n+          className=\"d-flex flex-grow-1 align-items-center justify-content-center w-100 px-2\"\n+          style={{ minHeight: 0, width: \"100%\" }}\n         >\n-          <img\n-            src={banner}\n-            alt=\"Promo Banner\"\n-            className=\"img-fluid rounded mb-3\"\n-          />\n+          <div\n+            className=\"card bg-black text-white shadow p-4 w-100 mt-3\"\n+            style={{ maxWidth: 500 }}\n+          >\n+            <img\n+              src={banner}\n+              alt=\"Promo Banner\"\n+              className=\"img-fluid rounded mb-3\"\n+            />\n \n-          <form onSubmit={handleSubmit} noValidate>\n-            {/* Login Error Message */}\n-            {loginError && (\n-              <div\n-                className=\"alert alert-danger mb-3\"\n-                role=\"alert\"\n-                aria-live=\"polite\"\n-              >\n-                <i className=\"bi bi-exclamation-triangle me-2\"></i>\n-                {loginError}\n-              </div>\n-            )}\n-\n-            <div className=\"mb-3\">\n-              <label htmlFor=\"username\" className=\"form-label\">\n-                Username\n-              </label>\n-              <input\n-                type=\"text\"\n-                className={`form-control${\n-                  touched.username && errors.username ? \" is-invalid\" : \"\"\n-                }`}\n-                id=\"username\"\n-                name=\"username\"\n-                placeholder=\"Enter your username\"\n-                value={form.username}\n-                onChange={handleChange}\n-                onBlur={handleBlur}\n-                aria-invalid={!!(touched.username && errors.username)}\n-                aria-describedby={\n-                  touched.username && errors.username ? \"usernameError\" : \"usernameHelp\"\n-                }\n-                required\n-                autoComplete=\"username\"\n-                autoFocus\n-              />\n-              {touched.username && errors.username && (\n-                <div id=\"usernameError\" className=\"invalid-feedback\" role=\"alert\">\n-                  {errors.username}\n-                </div>\n-              )}\n-            </div>\n-\n-            <div className=\"mb-3\">\n-              <label htmlFor=\"password\" className=\"form-label\">\n-                Password\n-              </label>\n-              <input\n-                type=\"password\"\n-                className={`form-control${\n-                  touched.password && errors.password ? \" is-invalid\" : \"\"\n-                }`}\n-                id=\"password\"\n-                name=\"password\"\n-                placeholder=\"Enter your password\"\n-                value={form.password}\n-                onChange={handleChange}\n-                onBlur={handleBlur}\n-                aria-invalid={!!(touched.password && errors.password)}\n-                aria-describedby={\n-                  touched.password && errors.password\n-                    ? \"passwordError\"\n-                    : \"passwordHelp\"\n-                }\n-                required\n-                autoComplete=\"current-password\"\n-              />\n-              {touched.password && errors.password && (\n+            <form onSubmit={handleSubmit} noValidate>\n+              {/* Login Error Message */}\n+              {loginError && (\n                 <div\n-                  id=\"passwordError\"\n-                  className=\"invalid-feedback d-block\"\n+                  className=\"alert alert-danger mb-3\"\n                   role=\"alert\"\n+                  aria-live=\"polite\"\n                 >\n-                  {errors.password}\n+                  <i className=\"bi bi-exclamation-triangle me-2\"></i>\n+                  {loginError}\n                 </div>\n               )}\n-            </div>\n \n-            <div className=\"mb-3\">\n-              <div className=\"form-label mb-2\">\n-                <i className=\"bi bi-shield-check me-2\"></i>\n-                Security Verification\n+              <div className=\"mb-3\">\n+                <label htmlFor=\"username\" className=\"form-label\">\n+                  Username\n+                </label>\n+                <input\n+                  type=\"text\"\n+                  className={`form-control${\n+                    touched.username && errors.username ? \" is-invalid\" : \"\"\n+                  }`}\n+                  id=\"username\"\n+                  name=\"username\"\n+                  placeholder=\"Enter your username\"\n+                  value={form.username}\n+                  onChange={handleChange}\n+                  onBlur={handleBlur}\n+                  aria-invalid={!!(touched.username && errors.username)}\n+                  aria-describedby={\n+                    touched.username && errors.username ? \"usernameError\" : \"usernameHelp\"\n+                  }\n+                  required\n+                  autoComplete=\"username\"\n+                  autoFocus\n+                />\n+                {touched.username && errors.username && (\n+                  <div id=\"usernameError\" className=\"invalid-feedback\" role=\"alert\">\n+                    {errors.username}\n+                  </div>\n+                )}\n               </div>\n-              <div className=\"d-flex flex-column align-items-center\">\n-                {/* Real reCAPTCHA */}\n-                <ReCAPTCHA\n-                  ref={recaptchaRef}\n-                  sitekey={recaptchaSiteKey}\n-                  onChange={handleCaptchaChange}\n-                  onExpired={handleCaptchaExpired}\n-                  theme=\"light\"\n-                  size=\"normal\"\n-                  aria-label=\"Complete reCAPTCHA verification\"\n+\n+              <div className=\"mb-3\">\n+                <label htmlFor=\"password\" className=\"form-label\">\n+                  Password\n+                </label>\n+                <input\n+                  type=\"password\"\n+                  className={`form-control${\n+                    touched.password && errors.password ? \" is-invalid\" : \"\"\n+                  }`}\n+                  id=\"password\"\n+                  name=\"password\"\n+                  placeholder=\"Enter your password\"\n+                  value={form.password}\n+                  onChange={handleChange}\n+                  onBlur={handleBlur}\n+                  aria-invalid={!!(touched.password && errors.password)}\n+                  aria-describedby={\n+                    touched.password && errors.password\n+                      ? \"passwordError\"\n+                      : \"passwordHelp\"\n+                  }\n+                  required\n+                  autoComplete=\"current-password\"\n                 />\n-                {errors.captcha && (\n-                  <div className=\"text-danger small mt-2\" role=\"alert\">\n-                    <i className=\"bi bi-exclamation-circle me-1\"></i>\n-                    {errors.captcha}\n+                {touched.password && errors.password && (\n+                  <div\n+                    id=\"passwordError\"\n+                    className=\"invalid-feedback d-block\"\n+                    role=\"alert\"\n+                  >\n+                    {errors.password}\n                   </div>\n                 )}\n               </div>\n-            </div>\n \n-            <button\n-              type=\"submit\"\n-              className=\"btn btn-warning text-dark fw-bold w-100 mb-3\"\n-              disabled={!isFormValid || submitting}\n-              aria-disabled={!isFormValid || submitting}\n-              aria-describedby={!isFormValid ? \"formErrors\" : undefined}\n-            >\n-              {submitting ? (\n-                <>\n-                  <span\n-                    className=\"spinner-border spinner-border-sm me-2\"\n-                    role=\"status\"\n-                    aria-hidden=\"true\"\n-                  ></span>\n-                  Signing In...\n-                </>\n-              ) : (\n-                \"Sign In\"\n-              )}\n-            </button>\n-\n-            {!isFormValid && (\n-              <div id=\"formErrors\" className=\"sr-only\" aria-live=\"polite\">\n-                Please fix the form errors above to continue.\n+              <div className=\"mb-3\">\n+                <div className=\"form-label mb-2\">\n+                  <i className=\"bi bi-shield-check me-2\"></i>\n+                  Security Verification\n+                </div>\n+                <div className=\"d-flex flex-column align-items-center\">\n+                  {/* Real reCAPTCHA */}\n+                  <ReCAPTCHA\n+                    ref={recaptchaRef}\n+                    sitekey={recaptchaSiteKey}\n+                    onChange={handleCaptchaChange}\n+                    onExpired={handleCaptchaExpired}\n+                    theme=\"light\"\n+                    size=\"normal\"\n+                    aria-label=\"Complete reCAPTCHA verification\"\n+                  />\n+                  {errors.captcha && (\n+                    <div className=\"text-danger small mt-2\" role=\"alert\">\n+                      <i className=\"bi bi-exclamation-circle me-1\"></i>\n+                      {errors.captcha}\n+                    </div>\n+                  )}\n+                </div>\n               </div>\n-            )}\n \n-            <div className=\"text-center mb-3\">\n               <button\n-                type=\"button\"\n-                className=\"btn btn-link text-warning text-decoration-none p-0\"\n-                onClick={handleForgotPassword}\n-                aria-describedby=\"forgotPasswordHelp\"\n+                type=\"submit\"\n+                className=\"btn btn-warning text-dark fw-bold w-100 mb-3\"\n+                disabled={!isFormValid || submitting}\n+                aria-disabled={!isFormValid || submitting}\n+                aria-describedby={!isFormValid ? \"formErrors\" : undefined}\n               >\n-                <i className=\"bi bi-question-circle me-1\"></i>\n-                Forgot your password?\n+                {submitting ? (\n+                  <>\n+                    <span\n+                      className=\"spinner-border spinner-border-sm me-2\"\n+                      role=\"status\"\n+                      aria-hidden=\"true\"\n+                    ></span>\n+                    Signing In...\n+                  </>\n+                ) : (\n+                  \"Sign In\"\n+                )}\n               </button>\n-              <small\n-                id=\"forgotPasswordHelp\"\n-                className=\"d-block text-muted mt-1\"\n-              >\n-                Enter your username above and click this link to reset your password.\n-              </small>\n-            </div>\n \n-            <hr className=\"border-secondary\" />\n+              {!isFormValid && (\n+                <div id=\"formErrors\" className=\"sr-only\" aria-live=\"polite\">\n+                  Please fix the form errors above to continue.\n+                </div>\n+              )}\n \n-            <p className=\"text-center text-white-50 mb-3\">\n-              <i className=\"bi bi-arrow-down me-2\"></i>\n-              Or sign in with\n-            </p>\n+              <div className=\"text-center mb-3\">\n+                <button\n+                  type=\"button\"\n+                  className=\"btn btn-link text-warning text-decoration-none p-0\"\n+                  onClick={handleForgotPassword}\n+                  aria-describedby=\"forgotPasswordHelp\"\n+                >\n+                  <i className=\"bi bi-question-circle me-1\"></i>\n+                  Forgot your password?\n+                </button>\n+                <small\n+                  id=\"forgotPasswordHelp\"\n+                  className=\"d-block text-muted mt-1\"\n+                >\n+                  Enter your username above and click this link to reset your password.\n+                </small>\n+              </div>\n \n-            <div className=\"d-flex flex-column flex-md-row justify-content-center gap-2\">\n-              <button\n-                type=\"button\"\n-                className=\"btn btn-light d-flex align-items-center justify-content-center w-100\"\n-                onClick={handleGoogleLogin}\n-                aria-label=\"Sign in with Google account\"\n-              >\n-                <img\n-                  src=\"https://img.icons8.com/color/24/000000/google-logo.png\"\n-                  className=\"me-2\"\n-                  alt=\"Google logo\"\n-                  aria-hidden=\"true\"\n-                />\n-                <span>Continue with Google</span>\n-              </button>\n-            </div>\n+              <hr className=\"border-secondary\" />\n \n-            <div className=\"text-center mt-3\">\n-              <small className=\"text-muted\">\n-                Don't have an account?{\" \"}\n-                <a href=\"/signup\" className=\"text-warning text-decoration-none\">\n-                  Sign up here\n-                </a>\n-              </small>\n-            </div>\n-          </form>\n+              <p className=\"text-center text-white-50 mb-3\">\n+                <i className=\"bi bi-arrow-down me-2\"></i>\n+                Or sign in with\n+              </p>\n+\n+              <div className=\"d-flex flex-column flex-md-row justify-content-center gap-2\">\n+                <button\n+                  type=\"button\"\n+                  className=\"btn btn-light d-flex align-items-center justify-content-center w-100\"\n+                  onClick={handleGoogleLogin}\n+                  aria-label=\"Sign in with Google account\"\n+                >\n+                  <img\n+                    src=\"https://img.icons8.com/color/24/000000/google-logo.png\"\n+                    className=\"me-2\"\n+                    alt=\"Google logo\"\n+                    aria-hidden=\"true\"\n+                  />\n+                  <span>Continue with Google</span>\n+                </button>\n+              </div>\n+\n+              <div className=\"text-center mt-3\">\n+                <small className=\"text-muted\">\n+                  Don't have an account?{\" \"}\n+                  <a href=\"/signup\" className=\"text-warning text-decoration-none\">\n+                    Sign up here\n+                  </a>\n+                </small>\n+              </div>\n+            </form>\n+          </div>\n         </div>\n       </div>\n-    </div>\n+    </>\n   );\n };\n \n export default Login;\n"
                },
                {
                    "date": 1752558109466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   const recaptchaRef = useRef(null);\n \n   // API Configuration\n   const API_BASE_URL = import.meta.env.VITE_API_BASE_URL ;\n-  const LOGIN_ENDPOINT = `${API_BASE_URL}/user/login`; \n+  const LOGIN_ENDPOINT = `${API_BASE_URL}/api/user/login`; \n \n   const recaptchaSiteKey =\n     import.meta.env.VITE_RECAPTCHA_SITE_KEY ||\n     \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\";\n"
                },
                {
                    "date": 1752558186637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,13 +15,12 @@\n   const recaptchaRef = useRef(null);\n \n   // API Configuration\n   const API_BASE_URL = import.meta.env.VITE_API_BASE_URL ;\n-  const LOGIN_ENDPOINT = `${API_BASE_URL}/api/user/login`; \n+  const LOGIN_ENDPOINT = `${API_BASE_URL}/api/v1/user/login`; \n \n   const recaptchaSiteKey =\n-    import.meta.env.VITE_RECAPTCHA_SITE_KEY ||\n-    \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\";\n+    import.meta.env.VITE_RECAPTCHA_SITE_KEY ;\n \n   const validate = (values) => {\n     const errs = {};\n     if (!values.username) errs.username = \"Username is required.\";\n"
                },
                {
                    "date": 1752558243828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,10 @@\n   const API_BASE_URL = import.meta.env.VITE_API_BASE_URL ;\n   const LOGIN_ENDPOINT = `${API_BASE_URL}/api/v1/user/login`; \n \n   const recaptchaSiteKey =\n-    import.meta.env.VITE_RECAPTCHA_SITE_KEY ;\n+    import.meta.env.VITE_RECAPTCHA_SITE_KEY ||\n+    \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\n \n   const validate = (values) => {\n     const errs = {};\n     if (!values.username) errs.username = \"Username is required.\";\n"
                },
                {
                    "date": 1752559257778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,13 +15,15 @@\n   const recaptchaRef = useRef(null);\n \n   // API Configuration\n   const API_BASE_URL = import.meta.env.VITE_API_BASE_URL ;\n+  console.log(\"VITE_API_BASE_URL:\", import.meta.env.VITE_API_BASE_URL);\n+\n   const LOGIN_ENDPOINT = `${API_BASE_URL}/api/v1/user/login`; \n \n   const recaptchaSiteKey =\n     import.meta.env.VITE_RECAPTCHA_SITE_KEY ||\n-    \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\n+    \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\";\n \n   const validate = (values) => {\n     const errs = {};\n     if (!values.username) errs.username = \"Username is required.\";\n"
                },
                {
                    "date": 1752559369338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n   // API Configuration\n   const API_BASE_URL = import.meta.env.VITE_API_BASE_URL ;\n   console.log(\"VITE_API_BASE_URL:\", import.meta.env.VITE_API_BASE_URL);\n \n-  const LOGIN_ENDPOINT = `${API_BASE_URL}/api/v1/user/login`; \n+  const LOGIN_ENDPOINT = `${API_BASE_URL}/user/login`; \n \n   const recaptchaSiteKey =\n     import.meta.env.VITE_RECAPTCHA_SITE_KEY ||\n     \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\";\n"
                },
                {
                    "date": 1752559819364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,44 +115,40 @@\n \n         console.log(\"Response status:\", response.status);\n         console.log(\"Response headers:\", response.headers);\n \n-        const responseData = await response.json();\n+        // Defensive JSON parsing\n+        let responseData = {};\n+        const text = await response.text();\n+        if (text) {\n+          responseData = JSON.parse(text);\n+        }\n         console.log(\"Response data:\", responseData);\n \n         setSubmitting(false);\n \n-        if (response.ok) {\n-          // Login successful\n-          if (responseData.success || responseData.token || responseData.user) {\n-            // Store token/user data as needed\n-            if (responseData.token) {\n-              localStorage.setItem(\"authToken\", responseData.token);\n-            }\n-            if (responseData.user) {\n-              localStorage.setItem(\"user\", JSON.stringify(responseData.user));\n-            }\n-            toast.success(\"Login successful!\");\n-            // Reset reCAPTCHA after successful login\n-            if (recaptchaRef.current) {\n-              recaptchaRef.current.reset();\n-              setCaptchaToken(null);\n-            }\n-            \n-            // Redirect or update app state as needed\n-            // window.location.href = \"/dashboard\"; // or use React Router navigation\n-          } else {\n-            setLoginError(\"Login successful but unexpected response format.\");\n+        if (response.ok && responseData.data && responseData.data.user && responseData.data.accessToken) {\n+          // Store token/user data as needed\n+          localStorage.setItem(\"authToken\", responseData.data.accessToken);\n+          localStorage.setItem(\"user\", JSON.stringify(responseData.data.user));\n+          toast.success(\"Login successful!\");\n+          // Reset reCAPTCHA after successful login\n+          if (recaptchaRef.current) {\n+            recaptchaRef.current.reset();\n+            setCaptchaToken(null);\n           }\n+          // Redirect or update app state as needed\n+          // window.location.href = \"/dashboard\"; // or use React Router navigation\n         } else {\n-          // Login failed\n-          const errorMessage = responseData.message || \n-                              responseData.error || \n-                              responseData.detail || \n-                              `Login failed (${response.status})`;\n+          // Login failed or unexpected response\n+          let errorMessage =\n+            (responseData.errors && responseData.errors[0]) ||\n+            responseData.message ||\n+            responseData.error ||\n+            responseData.detail ||\n+            `Login failed (${response.status})`;\n           setLoginError(errorMessage);\n           toast.error(errorMessage);\n-          \n           // Reset reCAPTCHA on failed login\n           if (recaptchaRef.current) {\n             recaptchaRef.current.reset();\n             setCaptchaToken(null);\n@@ -160,17 +156,10 @@\n         }\n       } catch (error) {\n         console.error(\"Login error:\", error);\n         setSubmitting(false);\n-        \n-        if (error.name === \"TypeError\" && error.message.includes(\"fetch\")) {\n-          setLoginError(\"Network error. Please check your connection and try again.\");\n-          toast.error(\"Network error. Please check your connection and try again.\");\n-        } else {\n-          setLoginError(\"An unexpected error occurred. Please try again.\");\n-          toast.error(\"An unexpected error occurred. Please try again.\");\n-        }\n-        \n+        setLoginError(\"An unexpected error occurred. Please try again.\");\n+        toast.error(\"An unexpected error occurred. Please try again.\");\n         // Reset reCAPTCHA on error\n         if (recaptchaRef.current) {\n           recaptchaRef.current.reset();\n           setCaptchaToken(null);\n"
                },
                {
                    "date": 1752562430005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,8 @@\n   const recaptchaRef = useRef(null);\n \n   // API Configuration\n   const API_BASE_URL = import.meta.env.VITE_API_BASE_URL ;\n-  console.log(\"VITE_API_BASE_URL:\", import.meta.env.VITE_API_BASE_URL);\n \n   const LOGIN_ENDPOINT = `${API_BASE_URL}/user/login`; \n \n   const recaptchaSiteKey =\n"
                },
                {
                    "date": 1752562794939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -282,9 +282,9 @@\n                   <i className=\"bi bi-shield-check me-2\"></i>\n                   Security Verification\n                 </div>\n                 <div className=\"d-flex flex-column align-items-center\">\n-                  {/* Real reCAPTCHA */}\n+                  \n                   <ReCAPTCHA\n                     ref={recaptchaRef}\n                     sitekey={recaptchaSiteKey}\n                     onChange={handleCaptchaChange}\n"
                },
                {
                    "date": 1752562802615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n   };\n \n   React.useEffect(() => {\n     setErrors(validate(form));\n-    // eslint-disable-next-line\n+    \n   }, [form, captchaToken]);\n \n   const isFormValid =\n     Object.keys(errors).length === 0 &&\n"
                },
                {
                    "date": 1752562809878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,9 @@\n             responseData.detail ||\n             `Login failed (${response.status})`;\n           setLoginError(errorMessage);\n           toast.error(errorMessage);\n-          // Reset reCAPTCHA on failed login\n+          \n           if (recaptchaRef.current) {\n             recaptchaRef.current.reset();\n             setCaptchaToken(null);\n           }\n@@ -157,9 +157,9 @@\n         console.error(\"Login error:\", error);\n         setSubmitting(false);\n         setLoginError(\"An unexpected error occurred. Please try again.\");\n         toast.error(\"An unexpected error occurred. Please try again.\");\n-        // Reset reCAPTCHA on error\n+        \n         if (recaptchaRef.current) {\n           recaptchaRef.current.reset();\n           setCaptchaToken(null);\n         }\n"
                },
                {
                    "date": 1752562817635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,12 +134,11 @@\n           if (recaptchaRef.current) {\n             recaptchaRef.current.reset();\n             setCaptchaToken(null);\n           }\n-          // Redirect or update app state as needed\n-          // window.location.href = \"/dashboard\"; // or use React Router navigation\n+          \n         } else {\n-          // Login failed or unexpected response\n+          \n           let errorMessage =\n             (responseData.errors && responseData.errors[0]) ||\n             responseData.message ||\n             responseData.error ||\n"
                },
                {
                    "date": 1752562824449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,13 +125,13 @@\n \n         setSubmitting(false);\n \n         if (response.ok && responseData.data && responseData.data.user && responseData.data.accessToken) {\n-          // Store token/user data as needed\n+          \n           localStorage.setItem(\"authToken\", responseData.data.accessToken);\n           localStorage.setItem(\"user\", JSON.stringify(responseData.data.user));\n           toast.success(\"Login successful!\");\n-          // Reset reCAPTCHA after successful login\n+         \n           if (recaptchaRef.current) {\n             recaptchaRef.current.reset();\n             setCaptchaToken(null);\n           }\n"
                },
                {
                    "date": 1752580780448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import banner from \"../assets/banner.png\";\n import Navbar from \"../components/Navbar\";\n import { ToastContainer, toast } from \"react-toastify\";\n import \"react-toastify/dist/ReactToastify.css\";\n+import CommonInput from \"../components/CommonInput\";\n \n const Login = () => {\n   const [form, setForm] = useState({ username: \"\", password: \"\" });\n   const [touched, setTouched] = useState({});\n@@ -210,72 +211,40 @@\n                   {loginError}\n                 </div>\n               )}\n \n-              <div className=\"mb-3\">\n-                <label htmlFor=\"username\" className=\"form-label\">\n-                  Username\n-                </label>\n-                <input\n-                  type=\"text\"\n-                  className={`form-control${\n-                    touched.username && errors.username ? \" is-invalid\" : \"\"\n-                  }`}\n-                  id=\"username\"\n-                  name=\"username\"\n-                  placeholder=\"Enter your username\"\n-                  value={form.username}\n-                  onChange={handleChange}\n-                  onBlur={handleBlur}\n-                  aria-invalid={!!(touched.username && errors.username)}\n-                  aria-describedby={\n-                    touched.username && errors.username ? \"usernameError\" : \"usernameHelp\"\n-                  }\n-                  required\n-                  autoComplete=\"username\"\n-                  autoFocus\n-                />\n-                {touched.username && errors.username && (\n-                  <div id=\"usernameError\" className=\"invalid-feedback\" role=\"alert\">\n-                    {errors.username}\n-                  </div>\n-                )}\n-              </div>\n+              <CommonInput\n+                label=\"Username\"\n+                type=\"text\"\n+                id=\"username\"\n+                name=\"username\"\n+                placeholder=\"Enter your username\"\n+                value={form.username}\n+                onChange={handleChange}\n+                onBlur={handleBlur}\n+                required\n+                autoComplete=\"username\"\n+                touched={touched.username}\n+                error={errors.username}\n+                valid={touched.username && !errors.username && form.username}\n+                autoFocus\n+              />\n \n-              <div className=\"mb-3\">\n-                <label htmlFor=\"password\" className=\"form-label\">\n-                  Password\n-                </label>\n-                <input\n-                  type=\"password\"\n-                  className={`form-control${\n-                    touched.password && errors.password ? \" is-invalid\" : \"\"\n-                  }`}\n-                  id=\"password\"\n-                  name=\"password\"\n-                  placeholder=\"Enter your password\"\n-                  value={form.password}\n-                  onChange={handleChange}\n-                  onBlur={handleBlur}\n-                  aria-invalid={!!(touched.password && errors.password)}\n-                  aria-describedby={\n-                    touched.password && errors.password\n-                      ? \"passwordError\"\n-                      : \"passwordHelp\"\n-                  }\n-                  required\n-                  autoComplete=\"current-password\"\n-                />\n-                {touched.password && errors.password && (\n-                  <div\n-                    id=\"passwordError\"\n-                    className=\"invalid-feedback d-block\"\n-                    role=\"alert\"\n-                  >\n-                    {errors.password}\n-                  </div>\n-                )}\n-              </div>\n+              <CommonInput\n+                label=\"Password\"\n+                type=\"password\"\n+                id=\"password\"\n+                name=\"password\"\n+                placeholder=\"Enter your password\"\n+                value={form.password}\n+                onChange={handleChange}\n+                onBlur={handleBlur}\n+                required\n+                autoComplete=\"current-password\"\n+                touched={touched.password}\n+                error={errors.password}\n+                valid={touched.password && !errors.password && form.password}\n+              />\n \n               <div className=\"mb-3\">\n                 <div className=\"form-label mb-2\">\n                   <i className=\"bi bi-shield-check me-2\"></i>\n"
                },
                {
                    "date": 1752580921666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,8 @@\n   const [captchaToken, setCaptchaToken] = useState(null);\n   const [loginError, setLoginError] = useState(\"\");\n   const recaptchaRef = useRef(null);\n \n-  // API Configuration\n   const API_BASE_URL = import.meta.env.VITE_API_BASE_URL ;\n \n   const LOGIN_ENDPOINT = `${API_BASE_URL}/user/login`; \n \n"
                },
                {
                    "date": 1752580928755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,356 @@\n+import React, { useState, useRef } from \"react\";\n+import ReCAPTCHA from \"react-google-recaptcha\";\n+import banner from \"../assets/banner.png\";\n+import Navbar from \"../components/Navbar\";\n+import { ToastContainer, toast } from \"react-toastify\";\n+import \"react-toastify/dist/ReactToastify.css\";\n+import CommonInput from \"../components/CommonInput\";\n+\n+const Login = () => {\n+  const [form, setForm] = useState({ username: \"\", password: \"\" });\n+  const [touched, setTouched] = useState({});\n+  const [errors, setErrors] = useState({});\n+  const [submitting, setSubmitting] = useState(false);\n+  const [captchaToken, setCaptchaToken] = useState(null);\n+  const [loginError, setLoginError] = useState(\"\");\n+  const recaptchaRef = useRef(null);\n+\n+  const API_BASE_URL = import.meta.env.VITE_API_BASE_URL ;\n+\n+  const LOGIN_ENDPOINT = `${API_BASE_URL}/user/login`; \n+\n+  const recaptchaSiteKey =\n+    import.meta.env.VITE_RECAPTCHA_SITE_KEY ||\n+    \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\";\n+\n+  const validate = (values) => {\n+    const errs = {};\n+    if (!values.username) errs.username = \"Username is required.\";\n+    if (!values.password) errs.password = \"Password is required.\";\n+    else if (!/^(?=.*[A-Z])(?=.*\\d).{8,20}$/.test(values.password))\n+      errs.password =\n+        \"Password must be 8-20 characters with at least one number and one uppercase letter.\";\n+    if (!captchaToken)\n+      errs.captcha = \"Please complete the reCAPTCHA verification.\";\n+    return errs;\n+  };\n+\n+  const handleChange = (e) => {\n+    const { name, value } = e.target;\n+    setForm((prev) => ({ ...prev, [name]: value }));\n+    if (loginError) setLoginError(\"\");\n+  };\n+\n+  const handleBlur = (e) => {\n+    setTouched((prev) => ({ ...prev, [e.target.name]: true }));\n+  };\n+\n+  const handleCaptchaChange = (token) => {\n+    setCaptchaToken(token);\n+    // Clear captcha error when user completes verification\n+    if (errors.captcha) {\n+      setErrors((prev) => ({ ...prev, captcha: null }));\n+    }\n+  };\n+\n+  const handleCaptchaExpired = () => {\n+    setCaptchaToken(null);\n+    setErrors((prev) => ({\n+      ...prev,\n+      captcha: \"reCAPTCHA verification expired. Please try again.\",\n+    }));\n+  };\n+\n+  const handleForgotPassword = (e) => {\n+    e.preventDefault();\n+    if (!form.username) {\n+      setErrors((prev) => ({\n+        ...prev,\n+        username: \"Please enter your username to reset your password.\",\n+      }));\n+      return;\n+    }\n+    // Simulate password reset\n+    alert(`Password reset link sent for username: ${form.username} (Demo)`);\n+  };\n+\n+  const handleGoogleLogin = () => {\n+    // Simulate Google OAuth\n+    alert(\"Redirecting to Google OAuth (Demo)\");\n+  };\n+\n+  const handleSubmit = async (e) => {\n+    e.preventDefault();\n+    setTouched({ username: true, password: true });\n+    setLoginError(\"\"); // Clear previous login errors\n+\n+    const validationErrors = validate(form);\n+    setErrors(validationErrors);\n+\n+    if (Object.keys(validationErrors).length === 0) {\n+      setSubmitting(true);\n+\n+      try {\n+        // Prepare request payload\n+        const requestPayload = {\n+          username: form.username,\n+          password: form.password,\n+          captchaToken: captchaToken,\n+        };\n+\n+        console.log(\"Sending login request to:\", LOGIN_ENDPOINT);\n+        console.log(\"Request payload:\", requestPayload);\n+\n+        // Make API call to your backend\n+        const response = await fetch(LOGIN_ENDPOINT, {\n+          method: \"POST\",\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+            \"Accept\": \"application/json\",\n+          },\n+          body: JSON.stringify(requestPayload),\n+        });\n+\n+        console.log(\"Response status:\", response.status);\n+        console.log(\"Response headers:\", response.headers);\n+\n+        // Defensive JSON parsing\n+        let responseData = {};\n+        const text = await response.text();\n+        if (text) {\n+          responseData = JSON.parse(text);\n+        }\n+        console.log(\"Response data:\", responseData);\n+\n+        setSubmitting(false);\n+\n+        if (response.ok && responseData.data && responseData.data.user && responseData.data.accessToken) {\n+          \n+          localStorage.setItem(\"authToken\", responseData.data.accessToken);\n+          localStorage.setItem(\"user\", JSON.stringify(responseData.data.user));\n+          toast.success(\"Login successful!\");\n+         \n+          if (recaptchaRef.current) {\n+            recaptchaRef.current.reset();\n+            setCaptchaToken(null);\n+          }\n+          \n+        } else {\n+          \n+          let errorMessage =\n+            (responseData.errors && responseData.errors[0]) ||\n+            responseData.message ||\n+            responseData.error ||\n+            responseData.detail ||\n+            `Login failed (${response.status})`;\n+          setLoginError(errorMessage);\n+          toast.error(errorMessage);\n+          \n+          if (recaptchaRef.current) {\n+            recaptchaRef.current.reset();\n+            setCaptchaToken(null);\n+          }\n+        }\n+      } catch (error) {\n+        console.error(\"Login error:\", error);\n+        setSubmitting(false);\n+        setLoginError(\"An unexpected error occurred. Please try again.\");\n+        toast.error(\"An unexpected error occurred. Please try again.\");\n+        \n+        if (recaptchaRef.current) {\n+          recaptchaRef.current.reset();\n+          setCaptchaToken(null);\n+        }\n+      }\n+    }\n+  };\n+\n+  React.useEffect(() => {\n+    setErrors(validate(form));\n+    \n+  }, [form, captchaToken]);\n+\n+  const isFormValid =\n+    Object.keys(errors).length === 0 &&\n+    form.username &&\n+    form.password &&\n+    captchaToken;\n+\n+  return (\n+    <>\n+      <ToastContainer position=\"top-center\" autoClose={3000} />\n+      <div\n+        className=\"min-vh-100 d-flex flex-column bg-black overflow-x-hidden\"\n+        style={{ minHeight: \"100vh\" }}\n+      >\n+        <div\n+          className=\"d-flex flex-grow-1 align-items-center justify-content-center w-100 px-2\"\n+          style={{ minHeight: 0, width: \"100%\" }}\n+        >\n+          <div\n+            className=\"card bg-black text-white shadow p-4 w-100 mt-3\"\n+            style={{ maxWidth: 500 }}\n+          >\n+            <img\n+              src={banner}\n+              alt=\"Promo Banner\"\n+              className=\"img-fluid rounded mb-3\"\n+            />\n+\n+            <form onSubmit={handleSubmit} noValidate>\n+              {/* Login Error Message */}\n+              {loginError && (\n+                <div\n+                  className=\"alert alert-danger mb-3\"\n+                  role=\"alert\"\n+                  aria-live=\"polite\"\n+                >\n+                  <i className=\"bi bi-exclamation-triangle me-2\"></i>\n+                  {loginError}\n+                </div>\n+              )}\n+\n+              <CommonInput\n+                label=\"Username\"\n+                type=\"text\"\n+                id=\"username\"\n+                name=\"username\"\n+                placeholder=\"Enter your username\"\n+                value={form.username}\n+                onChange={handleChange}\n+                onBlur={handleBlur}\n+                required\n+                autoComplete=\"username\"\n+                touched={touched.username}\n+                error={errors.username}\n+                valid={touched.username && !errors.username && form.username}\n+                autoFocus\n+              />\n+\n+              <CommonInput\n+                label=\"Password\"\n+                type=\"password\"\n+                id=\"password\"\n+                name=\"password\"\n+                placeholder=\"Enter your password\"\n+                value={form.password}\n+                onChange={handleChange}\n+                onBlur={handleBlur}\n+                required\n+                autoComplete=\"current-password\"\n+                touched={touched.password}\n+                error={errors.password}\n+                valid={touched.password && !errors.password && form.password}\n+              />\n+\n+              <div className=\"mb-3\">\n+                <div className=\"form-label mb-2\">\n+                  <i className=\"bi bi-shield-check me-2\"></i>\n+                  Security Verification\n+                </div>\n+                <div className=\"d-flex flex-column align-items-center\">\n+                  \n+                  <ReCAPTCHA\n+                    ref={recaptchaRef}\n+                    sitekey={recaptchaSiteKey}\n+                    onChange={handleCaptchaChange}\n+                    onExpired={handleCaptchaExpired}\n+                    theme=\"light\"\n+                    size=\"normal\"\n+                    aria-label=\"Complete reCAPTCHA verification\"\n+                  />\n+                  {errors.captcha && (\n+                    <div className=\"text-danger small mt-2\" role=\"alert\">\n+                      <i className=\"bi bi-exclamation-circle me-1\"></i>\n+                      {errors.captcha}\n+                    </div>\n+                  )}\n+                </div>\n+              </div>\n+\n+              <button\n+                type=\"submit\"\n+                className=\"btn btn-warning text-dark fw-bold w-100 mb-3\"\n+                disabled={!isFormValid || submitting}\n+                aria-disabled={!isFormValid || submitting}\n+                aria-describedby={!isFormValid ? \"formErrors\" : undefined}\n+              >\n+                {submitting ? (\n+                  <>\n+                    <span\n+                      className=\"spinner-border spinner-border-sm me-2\"\n+                      role=\"status\"\n+                      aria-hidden=\"true\"\n+                    ></span>\n+                    Signing In...\n+                  </>\n+                ) : (\n+                  \"Sign In\"\n+                )}\n+              </button>\n+\n+              {!isFormValid && (\n+                <div id=\"formErrors\" className=\"sr-only\" aria-live=\"polite\">\n+                  Please fix the form errors above to continue.\n+                </div>\n+              )}\n+\n+              <div className=\"text-center mb-3\">\n+                <button\n+                  type=\"button\"\n+                  className=\"btn btn-link text-warning text-decoration-none p-0\"\n+                  onClick={handleForgotPassword}\n+                  aria-describedby=\"forgotPasswordHelp\"\n+                >\n+                  <i className=\"bi bi-question-circle me-1\"></i>\n+                  Forgot your password?\n+                </button>\n+                <small\n+                  id=\"forgotPasswordHelp\"\n+                  className=\"d-block text-muted mt-1\"\n+                >\n+                  Enter your username above and click this link to reset your password.\n+                </small>\n+              </div>\n+\n+              <hr className=\"border-secondary\" />\n+\n+              <p className=\"text-center text-white-50 mb-3\">\n+                <i className=\"bi bi-arrow-down me-2\"></i>\n+                Or sign in with\n+              </p>\n+\n+              <div className=\"d-flex flex-column flex-md-row justify-content-center gap-2\">\n+                <button\n+                  type=\"button\"\n+                  className=\"btn btn-light d-flex align-items-center justify-content-center w-100\"\n+                  onClick={handleGoogleLogin}\n+                  aria-label=\"Sign in with Google account\"\n+                >\n+                  <img\n+                    src=\"https://img.icons8.com/color/24/000000/google-logo.png\"\n+                    className=\"me-2\"\n+                    alt=\"Google logo\"\n+                    aria-hidden=\"true\"\n+                  />\n+                  <span>Continue with Google</span>\n+                </button>\n+              </div>\n+\n+              <div className=\"text-center mt-3\">\n+                <small className=\"text-muted\">\n+                  Don't have an account?{\" \"}\n+                  <a href=\"/signup\" className=\"text-warning text-decoration-none\">\n+                    Sign up here\n+                  </a>\n+                </small>\n+              </div>\n+            </form>\n+          </div>\n+        </div>\n+      </div>\n+    </>\n+  );\n+};\n+\n+export default Login;\n"
                },
                {
                    "date": 1752580936581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,8 @@\n   };\n \n   const handleCaptchaChange = (token) => {\n     setCaptchaToken(token);\n-    // Clear captcha error when user completes verification\n     if (errors.captcha) {\n       setErrors((prev) => ({ ...prev, captcha: null }));\n     }\n   };\n@@ -69,9 +68,8 @@\n         username: \"Please enter your username to reset your password.\",\n       }));\n       return;\n     }\n-    // Simulate password reset\n     alert(`Password reset link sent for username: ${form.username} (Demo)`);\n   };\n \n   const handleGoogleLogin = () => {\n@@ -353,361 +351,4 @@\n   );\n };\n \n export default Login;\n-import React, { useState, useRef } from \"react\";\n-import ReCAPTCHA from \"react-google-recaptcha\";\n-import banner from \"../assets/banner.png\";\n-import Navbar from \"../components/Navbar\";\n-import { ToastContainer, toast } from \"react-toastify\";\n-import \"react-toastify/dist/ReactToastify.css\";\n-import CommonInput from \"../components/CommonInput\";\n-\n-const Login = () => {\n-  const [form, setForm] = useState({ username: \"\", password: \"\" });\n-  const [touched, setTouched] = useState({});\n-  const [errors, setErrors] = useState({});\n-  const [submitting, setSubmitting] = useState(false);\n-  const [captchaToken, setCaptchaToken] = useState(null);\n-  const [loginError, setLoginError] = useState(\"\");\n-  const recaptchaRef = useRef(null);\n-\n-  const API_BASE_URL = import.meta.env.VITE_API_BASE_URL ;\n-\n-  const LOGIN_ENDPOINT = `${API_BASE_URL}/user/login`; \n-\n-  const recaptchaSiteKey =\n-    import.meta.env.VITE_RECAPTCHA_SITE_KEY ||\n-    \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\";\n-\n-  const validate = (values) => {\n-    const errs = {};\n-    if (!values.username) errs.username = \"Username is required.\";\n-    if (!values.password) errs.password = \"Password is required.\";\n-    else if (!/^(?=.*[A-Z])(?=.*\\d).{8,20}$/.test(values.password))\n-      errs.password =\n-        \"Password must be 8-20 characters with at least one number and one uppercase letter.\";\n-    if (!captchaToken)\n-      errs.captcha = \"Please complete the reCAPTCHA verification.\";\n-    return errs;\n-  };\n-\n-  const handleChange = (e) => {\n-    const { name, value } = e.target;\n-    setForm((prev) => ({ ...prev, [name]: value }));\n-    // Clear login error when user starts typing\n-    if (loginError) setLoginError(\"\");\n-  };\n-\n-  const handleBlur = (e) => {\n-    setTouched((prev) => ({ ...prev, [e.target.name]: true }));\n-  };\n-\n-  const handleCaptchaChange = (token) => {\n-    setCaptchaToken(token);\n-    // Clear captcha error when user completes verification\n-    if (errors.captcha) {\n-      setErrors((prev) => ({ ...prev, captcha: null }));\n-    }\n-  };\n-\n-  const handleCaptchaExpired = () => {\n-    setCaptchaToken(null);\n-    setErrors((prev) => ({\n-      ...prev,\n-      captcha: \"reCAPTCHA verification expired. Please try again.\",\n-    }));\n-  };\n-\n-  const handleForgotPassword = (e) => {\n-    e.preventDefault();\n-    if (!form.username) {\n-      setErrors((prev) => ({\n-        ...prev,\n-        username: \"Please enter your username to reset your password.\",\n-      }));\n-      return;\n-    }\n-    // Simulate password reset\n-    alert(`Password reset link sent for username: ${form.username} (Demo)`);\n-  };\n-\n-  const handleGoogleLogin = () => {\n-    // Simulate Google OAuth\n-    alert(\"Redirecting to Google OAuth (Demo)\");\n-  };\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-    setTouched({ username: true, password: true });\n-    setLoginError(\"\"); // Clear previous login errors\n-\n-    const validationErrors = validate(form);\n-    setErrors(validationErrors);\n-\n-    if (Object.keys(validationErrors).length === 0) {\n-      setSubmitting(true);\n-\n-      try {\n-        // Prepare request payload\n-        const requestPayload = {\n-          username: form.username,\n-          password: form.password,\n-          captchaToken: captchaToken,\n-        };\n-\n-        console.log(\"Sending login request to:\", LOGIN_ENDPOINT);\n-        console.log(\"Request payload:\", requestPayload);\n-\n-        // Make API call to your backend\n-        const response = await fetch(LOGIN_ENDPOINT, {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-            \"Accept\": \"application/json\",\n-          },\n-          body: JSON.stringify(requestPayload),\n-        });\n-\n-        console.log(\"Response status:\", response.status);\n-        console.log(\"Response headers:\", response.headers);\n-\n-        // Defensive JSON parsing\n-        let responseData = {};\n-        const text = await response.text();\n-        if (text) {\n-          responseData = JSON.parse(text);\n-        }\n-        console.log(\"Response data:\", responseData);\n-\n-        setSubmitting(false);\n-\n-        if (response.ok && responseData.data && responseData.data.user && responseData.data.accessToken) {\n-          \n-          localStorage.setItem(\"authToken\", responseData.data.accessToken);\n-          localStorage.setItem(\"user\", JSON.stringify(responseData.data.user));\n-          toast.success(\"Login successful!\");\n-         \n-          if (recaptchaRef.current) {\n-            recaptchaRef.current.reset();\n-            setCaptchaToken(null);\n-          }\n-          \n-        } else {\n-          \n-          let errorMessage =\n-            (responseData.errors && responseData.errors[0]) ||\n-            responseData.message ||\n-            responseData.error ||\n-            responseData.detail ||\n-            `Login failed (${response.status})`;\n-          setLoginError(errorMessage);\n-          toast.error(errorMessage);\n-          \n-          if (recaptchaRef.current) {\n-            recaptchaRef.current.reset();\n-            setCaptchaToken(null);\n-          }\n-        }\n-      } catch (error) {\n-        console.error(\"Login error:\", error);\n-        setSubmitting(false);\n-        setLoginError(\"An unexpected error occurred. Please try again.\");\n-        toast.error(\"An unexpected error occurred. Please try again.\");\n-        \n-        if (recaptchaRef.current) {\n-          recaptchaRef.current.reset();\n-          setCaptchaToken(null);\n-        }\n-      }\n-    }\n-  };\n-\n-  React.useEffect(() => {\n-    setErrors(validate(form));\n-    \n-  }, [form, captchaToken]);\n-\n-  const isFormValid =\n-    Object.keys(errors).length === 0 &&\n-    form.username &&\n-    form.password &&\n-    captchaToken;\n-\n-  return (\n-    <>\n-      <ToastContainer position=\"top-center\" autoClose={3000} />\n-      <div\n-        className=\"min-vh-100 d-flex flex-column bg-black overflow-x-hidden\"\n-        style={{ minHeight: \"100vh\" }}\n-      >\n-        <div\n-          className=\"d-flex flex-grow-1 align-items-center justify-content-center w-100 px-2\"\n-          style={{ minHeight: 0, width: \"100%\" }}\n-        >\n-          <div\n-            className=\"card bg-black text-white shadow p-4 w-100 mt-3\"\n-            style={{ maxWidth: 500 }}\n-          >\n-            <img\n-              src={banner}\n-              alt=\"Promo Banner\"\n-              className=\"img-fluid rounded mb-3\"\n-            />\n-\n-            <form onSubmit={handleSubmit} noValidate>\n-              {/* Login Error Message */}\n-              {loginError && (\n-                <div\n-                  className=\"alert alert-danger mb-3\"\n-                  role=\"alert\"\n-                  aria-live=\"polite\"\n-                >\n-                  <i className=\"bi bi-exclamation-triangle me-2\"></i>\n-                  {loginError}\n-                </div>\n-              )}\n-\n-              <CommonInput\n-                label=\"Username\"\n-                type=\"text\"\n-                id=\"username\"\n-                name=\"username\"\n-                placeholder=\"Enter your username\"\n-                value={form.username}\n-                onChange={handleChange}\n-                onBlur={handleBlur}\n-                required\n-                autoComplete=\"username\"\n-                touched={touched.username}\n-                error={errors.username}\n-                valid={touched.username && !errors.username && form.username}\n-                autoFocus\n-              />\n-\n-              <CommonInput\n-                label=\"Password\"\n-                type=\"password\"\n-                id=\"password\"\n-                name=\"password\"\n-                placeholder=\"Enter your password\"\n-                value={form.password}\n-                onChange={handleChange}\n-                onBlur={handleBlur}\n-                required\n-                autoComplete=\"current-password\"\n-                touched={touched.password}\n-                error={errors.password}\n-                valid={touched.password && !errors.password && form.password}\n-              />\n-\n-              <div className=\"mb-3\">\n-                <div className=\"form-label mb-2\">\n-                  <i className=\"bi bi-shield-check me-2\"></i>\n-                  Security Verification\n-                </div>\n-                <div className=\"d-flex flex-column align-items-center\">\n-                  \n-                  <ReCAPTCHA\n-                    ref={recaptchaRef}\n-                    sitekey={recaptchaSiteKey}\n-                    onChange={handleCaptchaChange}\n-                    onExpired={handleCaptchaExpired}\n-                    theme=\"light\"\n-                    size=\"normal\"\n-                    aria-label=\"Complete reCAPTCHA verification\"\n-                  />\n-                  {errors.captcha && (\n-                    <div className=\"text-danger small mt-2\" role=\"alert\">\n-                      <i className=\"bi bi-exclamation-circle me-1\"></i>\n-                      {errors.captcha}\n-                    </div>\n-                  )}\n-                </div>\n-              </div>\n-\n-              <button\n-                type=\"submit\"\n-                className=\"btn btn-warning text-dark fw-bold w-100 mb-3\"\n-                disabled={!isFormValid || submitting}\n-                aria-disabled={!isFormValid || submitting}\n-                aria-describedby={!isFormValid ? \"formErrors\" : undefined}\n-              >\n-                {submitting ? (\n-                  <>\n-                    <span\n-                      className=\"spinner-border spinner-border-sm me-2\"\n-                      role=\"status\"\n-                      aria-hidden=\"true\"\n-                    ></span>\n-                    Signing In...\n-                  </>\n-                ) : (\n-                  \"Sign In\"\n-                )}\n-              </button>\n-\n-              {!isFormValid && (\n-                <div id=\"formErrors\" className=\"sr-only\" aria-live=\"polite\">\n-                  Please fix the form errors above to continue.\n-                </div>\n-              )}\n-\n-              <div className=\"text-center mb-3\">\n-                <button\n-                  type=\"button\"\n-                  className=\"btn btn-link text-warning text-decoration-none p-0\"\n-                  onClick={handleForgotPassword}\n-                  aria-describedby=\"forgotPasswordHelp\"\n-                >\n-                  <i className=\"bi bi-question-circle me-1\"></i>\n-                  Forgot your password?\n-                </button>\n-                <small\n-                  id=\"forgotPasswordHelp\"\n-                  className=\"d-block text-muted mt-1\"\n-                >\n-                  Enter your username above and click this link to reset your password.\n-                </small>\n-              </div>\n-\n-              <hr className=\"border-secondary\" />\n-\n-              <p className=\"text-center text-white-50 mb-3\">\n-                <i className=\"bi bi-arrow-down me-2\"></i>\n-                Or sign in with\n-              </p>\n-\n-              <div className=\"d-flex flex-column flex-md-row justify-content-center gap-2\">\n-                <button\n-                  type=\"button\"\n-                  className=\"btn btn-light d-flex align-items-center justify-content-center w-100\"\n-                  onClick={handleGoogleLogin}\n-                  aria-label=\"Sign in with Google account\"\n-                >\n-                  <img\n-                    src=\"https://img.icons8.com/color/24/000000/google-logo.png\"\n-                    className=\"me-2\"\n-                    alt=\"Google logo\"\n-                    aria-hidden=\"true\"\n-                  />\n-                  <span>Continue with Google</span>\n-                </button>\n-              </div>\n-\n-              <div className=\"text-center mt-3\">\n-                <small className=\"text-muted\">\n-                  Don't have an account?{\" \"}\n-                  <a href=\"/signup\" className=\"text-warning text-decoration-none\">\n-                    Sign up here\n-                  </a>\n-                </small>\n-              </div>\n-            </form>\n-          </div>\n-        </div>\n-      </div>\n-    </>\n-  );\n-};\n-\n-export default Login;\n"
                },
                {
                    "date": 1752580943187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,16 +72,15 @@\n     alert(`Password reset link sent for username: ${form.username} (Demo)`);\n   };\n \n   const handleGoogleLogin = () => {\n-    // Simulate Google OAuth\n     alert(\"Redirecting to Google OAuth (Demo)\");\n   };\n \n   const handleSubmit = async (e) => {\n     e.preventDefault();\n     setTouched({ username: true, password: true });\n-    setLoginError(\"\"); // Clear previous login errors\n+    setLoginError(\"\"); \n \n     const validationErrors = validate(form);\n     setErrors(validationErrors);\n \n"
                },
                {
                    "date": 1752580948695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,8 @@\n     if (Object.keys(validationErrors).length === 0) {\n       setSubmitting(true);\n \n       try {\n-        // Prepare request payload\n         const requestPayload = {\n           username: form.username,\n           password: form.password,\n           captchaToken: captchaToken,\n@@ -97,9 +96,8 @@\n \n         console.log(\"Sending login request to:\", LOGIN_ENDPOINT);\n         console.log(\"Request payload:\", requestPayload);\n \n-        // Make API call to your backend\n         const response = await fetch(LOGIN_ENDPOINT, {\n           method: \"POST\",\n           headers: {\n             \"Content-Type\": \"application/json\",\n"
                },
                {
                    "date": 1752580955723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,9 +108,8 @@\n \n         console.log(\"Response status:\", response.status);\n         console.log(\"Response headers:\", response.headers);\n \n-        // Defensive JSON parsing\n         let responseData = {};\n         const text = await response.text();\n         if (text) {\n           responseData = JSON.parse(text);\n@@ -192,9 +191,8 @@\n               className=\"img-fluid rounded mb-3\"\n             />\n \n             <form onSubmit={handleSubmit} noValidate>\n-              {/* Login Error Message */}\n               {loginError && (\n                 <div\n                   className=\"alert alert-danger mb-3\"\n                   role=\"alert\"\n"
                },
                {
                    "date": 1752639402617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,349 +1,380 @@\n-import React, { useState, useRef } from \"react\";\n-import ReCAPTCHA from \"react-google-recaptcha\";\n-import banner from \"../assets/banner.png\";\n-import Navbar from \"../components/Navbar\";\n-import { ToastContainer, toast } from \"react-toastify\";\n-import \"react-toastify/dist/ReactToastify.css\";\n-import CommonInput from \"../components/CommonInput\";\n-\n-const Login = () => {\n-  const [form, setForm] = useState({ username: \"\", password: \"\" });\n-  const [touched, setTouched] = useState({});\n-  const [errors, setErrors] = useState({});\n-  const [submitting, setSubmitting] = useState(false);\n-  const [captchaToken, setCaptchaToken] = useState(null);\n-  const [loginError, setLoginError] = useState(\"\");\n-  const recaptchaRef = useRef(null);\n-\n-  const API_BASE_URL = import.meta.env.VITE_API_BASE_URL ;\n-\n-  const LOGIN_ENDPOINT = `${API_BASE_URL}/user/login`; \n-\n-  const recaptchaSiteKey =\n-    import.meta.env.VITE_RECAPTCHA_SITE_KEY ||\n-    \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\";\n-\n-  const validate = (values) => {\n-    const errs = {};\n-    if (!values.username) errs.username = \"Username is required.\";\n-    if (!values.password) errs.password = \"Password is required.\";\n-    else if (!/^(?=.*[A-Z])(?=.*\\d).{8,20}$/.test(values.password))\n-      errs.password =\n-        \"Password must be 8-20 characters with at least one number and one uppercase letter.\";\n-    if (!captchaToken)\n-      errs.captcha = \"Please complete the reCAPTCHA verification.\";\n-    return errs;\n-  };\n-\n-  const handleChange = (e) => {\n-    const { name, value } = e.target;\n-    setForm((prev) => ({ ...prev, [name]: value }));\n-    if (loginError) setLoginError(\"\");\n-  };\n-\n-  const handleBlur = (e) => {\n-    setTouched((prev) => ({ ...prev, [e.target.name]: true }));\n-  };\n-\n-  const handleCaptchaChange = (token) => {\n-    setCaptchaToken(token);\n-    if (errors.captcha) {\n-      setErrors((prev) => ({ ...prev, captcha: null }));\n-    }\n-  };\n-\n-  const handleCaptchaExpired = () => {\n-    setCaptchaToken(null);\n-    setErrors((prev) => ({\n-      ...prev,\n-      captcha: \"reCAPTCHA verification expired. Please try again.\",\n-    }));\n-  };\n-\n-  const handleForgotPassword = (e) => {\n-    e.preventDefault();\n-    if (!form.username) {\n-      setErrors((prev) => ({\n-        ...prev,\n-        username: \"Please enter your username to reset your password.\",\n-      }));\n-      return;\n-    }\n-    alert(`Password reset link sent for username: ${form.username} (Demo)`);\n-  };\n-\n-  const handleGoogleLogin = () => {\n-    alert(\"Redirecting to Google OAuth (Demo)\");\n-  };\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault();\n-    setTouched({ username: true, password: true });\n-    setLoginError(\"\"); \n-\n-    const validationErrors = validate(form);\n-    setErrors(validationErrors);\n-\n-    if (Object.keys(validationErrors).length === 0) {\n-      setSubmitting(true);\n-\n-      try {\n-        const requestPayload = {\n-          username: form.username,\n-          password: form.password,\n-          captchaToken: captchaToken,\n-        };\n-\n-        console.log(\"Sending login request to:\", LOGIN_ENDPOINT);\n-        console.log(\"Request payload:\", requestPayload);\n-\n-        const response = await fetch(LOGIN_ENDPOINT, {\n-          method: \"POST\",\n-          headers: {\n-            \"Content-Type\": \"application/json\",\n-            \"Accept\": \"application/json\",\n-          },\n-          body: JSON.stringify(requestPayload),\n-        });\n-\n-        console.log(\"Response status:\", response.status);\n-        console.log(\"Response headers:\", response.headers);\n-\n-        let responseData = {};\n-        const text = await response.text();\n-        if (text) {\n-          responseData = JSON.parse(text);\n-        }\n-        console.log(\"Response data:\", responseData);\n-\n-        setSubmitting(false);\n-\n-        if (response.ok && responseData.data && responseData.data.user && responseData.data.accessToken) {\n-          \n-          localStorage.setItem(\"authToken\", responseData.data.accessToken);\n-          localStorage.setItem(\"user\", JSON.stringify(responseData.data.user));\n-          toast.success(\"Login successful!\");\n-         \n-          if (recaptchaRef.current) {\n-            recaptchaRef.current.reset();\n-            setCaptchaToken(null);\n-          }\n-          \n-        } else {\n-          \n-          let errorMessage =\n-            (responseData.errors && responseData.errors[0]) ||\n-            responseData.message ||\n-            responseData.error ||\n-            responseData.detail ||\n-            `Login failed (${response.status})`;\n-          setLoginError(errorMessage);\n-          toast.error(errorMessage);\n-          \n-          if (recaptchaRef.current) {\n-            recaptchaRef.current.reset();\n-            setCaptchaToken(null);\n-          }\n-        }\n-      } catch (error) {\n-        console.error(\"Login error:\", error);\n-        setSubmitting(false);\n-        setLoginError(\"An unexpected error occurred. Please try again.\");\n-        toast.error(\"An unexpected error occurred. Please try again.\");\n-        \n-        if (recaptchaRef.current) {\n-          recaptchaRef.current.reset();\n-          setCaptchaToken(null);\n-        }\n-      }\n-    }\n-  };\n-\n-  React.useEffect(() => {\n-    setErrors(validate(form));\n-    \n-  }, [form, captchaToken]);\n-\n-  const isFormValid =\n-    Object.keys(errors).length === 0 &&\n-    form.username &&\n-    form.password &&\n-    captchaToken;\n-\n-  return (\n-    <>\n-      <ToastContainer position=\"top-center\" autoClose={3000} />\n-      <div\n-        className=\"min-vh-100 d-flex flex-column bg-black overflow-x-hidden\"\n-        style={{ minHeight: \"100vh\" }}\n-      >\n-        <div\n-          className=\"d-flex flex-grow-1 align-items-center justify-content-center w-100 px-2\"\n-          style={{ minHeight: 0, width: \"100%\" }}\n-        >\n-          <div\n-            className=\"card bg-black text-white shadow p-4 w-100 mt-3\"\n-            style={{ maxWidth: 500 }}\n-          >\n-            <img\n-              src={banner}\n-              alt=\"Promo Banner\"\n-              className=\"img-fluid rounded mb-3\"\n-            />\n-\n-            <form onSubmit={handleSubmit} noValidate>\n-              {loginError && (\n-                <div\n-                  className=\"alert alert-danger mb-3\"\n-                  role=\"alert\"\n-                  aria-live=\"polite\"\n-                >\n-                  <i className=\"bi bi-exclamation-triangle me-2\"></i>\n-                  {loginError}\n-                </div>\n-              )}\n-\n-              <CommonInput\n-                label=\"Username\"\n-                type=\"text\"\n-                id=\"username\"\n-                name=\"username\"\n-                placeholder=\"Enter your username\"\n-                value={form.username}\n-                onChange={handleChange}\n-                onBlur={handleBlur}\n-                required\n-                autoComplete=\"username\"\n-                touched={touched.username}\n-                error={errors.username}\n-                valid={touched.username && !errors.username && form.username}\n-                autoFocus\n-              />\n-\n-              <CommonInput\n-                label=\"Password\"\n-                type=\"password\"\n-                id=\"password\"\n-                name=\"password\"\n-                placeholder=\"Enter your password\"\n-                value={form.password}\n-                onChange={handleChange}\n-                onBlur={handleBlur}\n-                required\n-                autoComplete=\"current-password\"\n-                touched={touched.password}\n-                error={errors.password}\n-                valid={touched.password && !errors.password && form.password}\n-              />\n-\n-              <div className=\"mb-3\">\n-                <div className=\"form-label mb-2\">\n-                  <i className=\"bi bi-shield-check me-2\"></i>\n-                  Security Verification\n-                </div>\n-                <div className=\"d-flex flex-column align-items-center\">\n-                  \n-                  <ReCAPTCHA\n-                    ref={recaptchaRef}\n-                    sitekey={recaptchaSiteKey}\n-                    onChange={handleCaptchaChange}\n-                    onExpired={handleCaptchaExpired}\n-                    theme=\"light\"\n-                    size=\"normal\"\n-                    aria-label=\"Complete reCAPTCHA verification\"\n-                  />\n-                  {errors.captcha && (\n-                    <div className=\"text-danger small mt-2\" role=\"alert\">\n-                      <i className=\"bi bi-exclamation-circle me-1\"></i>\n-                      {errors.captcha}\n-                    </div>\n-                  )}\n-                </div>\n-              </div>\n-\n-              <button\n-                type=\"submit\"\n-                className=\"btn btn-warning text-dark fw-bold w-100 mb-3\"\n-                disabled={!isFormValid || submitting}\n-                aria-disabled={!isFormValid || submitting}\n-                aria-describedby={!isFormValid ? \"formErrors\" : undefined}\n-              >\n-                {submitting ? (\n-                  <>\n-                    <span\n-                      className=\"spinner-border spinner-border-sm me-2\"\n-                      role=\"status\"\n-                      aria-hidden=\"true\"\n-                    ></span>\n-                    Signing In...\n-                  </>\n-                ) : (\n-                  \"Sign In\"\n-                )}\n-              </button>\n-\n-              {!isFormValid && (\n-                <div id=\"formErrors\" className=\"sr-only\" aria-live=\"polite\">\n-                  Please fix the form errors above to continue.\n-                </div>\n-              )}\n-\n-              <div className=\"text-center mb-3\">\n-                <button\n-                  type=\"button\"\n-                  className=\"btn btn-link text-warning text-decoration-none p-0\"\n-                  onClick={handleForgotPassword}\n-                  aria-describedby=\"forgotPasswordHelp\"\n-                >\n-                  <i className=\"bi bi-question-circle me-1\"></i>\n-                  Forgot your password?\n-                </button>\n-                <small\n-                  id=\"forgotPasswordHelp\"\n-                  className=\"d-block text-muted mt-1\"\n-                >\n-                  Enter your username above and click this link to reset your password.\n-                </small>\n-              </div>\n-\n-              <hr className=\"border-secondary\" />\n-\n-              <p className=\"text-center text-white-50 mb-3\">\n-                <i className=\"bi bi-arrow-down me-2\"></i>\n-                Or sign in with\n-              </p>\n-\n-              <div className=\"d-flex flex-column flex-md-row justify-content-center gap-2\">\n-                <button\n-                  type=\"button\"\n-                  className=\"btn btn-light d-flex align-items-center justify-content-center w-100\"\n-                  onClick={handleGoogleLogin}\n-                  aria-label=\"Sign in with Google account\"\n-                >\n-                  <img\n-                    src=\"https://img.icons8.com/color/24/000000/google-logo.png\"\n-                    className=\"me-2\"\n-                    alt=\"Google logo\"\n-                    aria-hidden=\"true\"\n-                  />\n-                  <span>Continue with Google</span>\n-                </button>\n-              </div>\n-\n-              <div className=\"text-center mt-3\">\n-                <small className=\"text-muted\">\n-                  Don't have an account?{\" \"}\n-                  <a href=\"/signup\" className=\"text-warning text-decoration-none\">\n-                    Sign up here\n-                  </a>\n-                </small>\n-              </div>\n-            </form>\n-          </div>\n-        </div>\n-      </div>\n-    </>\n-  );\n-};\n-\n-export default Login;\n+import React, { useState, useRef } from \"react\";\r\n+import ReCAPTCHA from \"react-google-recaptcha\";\r\n+import banner from \"../assets/banner.png\";\r\n+import Navbar from \"../components/Navbar\";\r\n+import { ToastContainer, toast } from \"react-toastify\";\r\n+import \"react-toastify/dist/ReactToastify.css\";\r\n+import CommonInput from \"../components/CommonInput\";\r\n+\r\n+const Login = () => {\r\n+  const [form, setForm] = useState({ username: \"\", password: \"\" });\r\n+  const [touched, setTouched] = useState({});\r\n+  const [errors, setErrors] = useState({});\r\n+  const [submitting, setSubmitting] = useState(false);\r\n+  const [captchaToken, setCaptchaToken] = useState(null);\r\n+  const [loginError, setLoginError] = useState(\"\");\r\n+  const recaptchaRef = useRef(null);\r\n+\r\n+  const API_BASE_URL = import.meta.env.VITE_API_BASE_URL ;\r\n+\r\n+  const LOGIN_ENDPOINT = `${API_BASE_URL}/user/login`; \r\n+\r\n+  const recaptchaSiteKey =\r\n+    import.meta.env.VITE_RECAPTCHA_SITE_KEY ||\r\n+    \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\";\r\n+\r\n+  const validate = (values) => {\r\n+    const errs = {};\r\n+    if (!values.username) errs.username = \"Username is required.\";\r\n+    if (!values.password) errs.password = \"Password is required.\";\r\n+    else if (!/^(?=.*[A-Z])(?=.*\\d).{8,20}$/.test(values.password))\r\n+      errs.password =\r\n+        \"Password must be 8-20 characters with at least one number and one uppercase letter.\";\r\n+    if (!captchaToken)\r\n+      errs.captcha = \"Please complete the reCAPTCHA verification.\";\r\n+    return errs;\r\n+  };\r\n+\r\n+  const handleChange = (e) => {\r\n+    const { name, value } = e.target;\r\n+    setForm((prev) => ({ ...prev, [name]: value }));\r\n+    if (loginError) setLoginError(\"\");\r\n+  };\r\n+\r\n+  const handleBlur = (e) => {\r\n+    setTouched((prev) => ({ ...prev, [e.target.name]: true }));\r\n+  };\r\n+\r\n+  const handleCaptchaChange = (token) => {\r\n+    setCaptchaToken(token);\r\n+    if (errors.captcha) {\r\n+      setErrors((prev) => ({ ...prev, captcha: null }));\r\n+    }\r\n+  };\r\n+\r\n+  const handleCaptchaExpired = () => {\r\n+    setCaptchaToken(null);\r\n+    setErrors((prev) => ({\r\n+      ...prev,\r\n+      captcha: \"reCAPTCHA verification expired. Please try again.\",\r\n+    }));\r\n+  };\r\n+\r\n+  const handleForgotPassword = (e) => {\r\n+    e.preventDefault();\r\n+    if (!form.username) {\r\n+      setErrors((prev) => ({\r\n+        ...prev,\r\n+        username: \"Please enter your username to reset your password.\",\r\n+      }));\r\n+      return;\r\n+    }\r\n+    alert(`Password reset link sent for username: ${form.username} (Demo)`);\r\n+  };\r\n+\r\n+  const handleGoogleLogin = () => {\r\n+    alert(\"Redirecting to Google OAuth (Demo)\");\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setTouched({ username: true, password: true });\r\n+    setLoginError(\"\"); \r\n+\r\n+    const validationErrors = validate(form);\r\n+    setErrors(validationErrors);\r\n+\r\n+    if (Object.keys(validationErrors).length === 0) {\r\n+      setSubmitting(true);\r\n+\r\n+      try {\r\n+        const requestPayload = {\r\n+          username: form.username,\r\n+          password: form.password,\r\n+          captchaToken: captchaToken,\r\n+        };\r\n+\r\n+        console.log(\"Sending login request to:\", LOGIN_ENDPOINT);\r\n+        console.log(\"Request payload:\", requestPayload);\r\n+\r\n+        const response = await fetch(LOGIN_ENDPOINT, {\r\n+          method: \"POST\",\r\n+          headers: {\r\n+            \"Content-Type\": \"application/json\",\r\n+            \"Accept\": \"application/json\",\r\n+          },\r\n+          credentials: 'include', // Include cookies for CORS\r\n+          body: JSON.stringify(requestPayload),\r\n+        });\r\n+\r\n+        console.log(\"Response status:\", response.status);\r\n+        console.log(\"Response headers:\", response.headers);\r\n+\r\n+        let responseData = {};\r\n+        const text = await response.text();\r\n+        if (text) {\r\n+          try {\r\n+            responseData = JSON.parse(text);\r\n+          } catch (parseError) {\r\n+            console.error(\"Failed to parse response:\", parseError);\r\n+            responseData = { message: \"Invalid response format\" };\r\n+          }\r\n+        }\r\n+        console.log(\"Response data:\", responseData);\r\n+\r\n+        setSubmitting(false);\r\n+\r\n+        if (response.ok && responseData.data && responseData.data.user && responseData.data.accessToken) {\r\n+          \r\n+          localStorage.setItem(\"authToken\", responseData.data.accessToken);\r\n+          localStorage.setItem(\"user\", JSON.stringify(responseData.data.user));\r\n+          toast.success(\"Login successful!\");\r\n+         \r\n+          if (recaptchaRef.current) {\r\n+            recaptchaRef.current.reset();\r\n+            setCaptchaToken(null);\r\n+          }\r\n+          \r\n+        } else {\r\n+          \r\n+          let errorMessage = \"Login failed\";\r\n+          \r\n+          if (responseData.errors && responseData.errors.length > 0) {\r\n+            errorMessage = responseData.errors[0].message || responseData.errors[0];\r\n+          } else if (responseData.message) {\r\n+            errorMessage = responseData.message;\r\n+          } else if (responseData.error) {\r\n+            errorMessage = responseData.error;\r\n+          } else if (responseData.detail) {\r\n+            errorMessage = responseData.detail;\r\n+          } else if (response.status === 401) {\r\n+            errorMessage = \"Invalid username or password\";\r\n+          } else if (response.status === 403) {\r\n+            errorMessage = \"Access denied. Please check your credentials.\";\r\n+          } else if (response.status === 400) {\r\n+            errorMessage = \"Invalid request. Please check your input.\";\r\n+          } else if (response.status === 0) {\r\n+            errorMessage = \"Network error. Please check your connection.\";\r\n+          } else {\r\n+            errorMessage = `Login failed (${response.status})`;\r\n+          }\r\n+          \r\n+          setLoginError(errorMessage);\r\n+          toast.error(errorMessage);\r\n+          \r\n+          if (recaptchaRef.current) {\r\n+            recaptchaRef.current.reset();\r\n+            setCaptchaToken(null);\r\n+          }\r\n+        }\r\n+      } catch (error) {\r\n+        console.error(\"Login error:\", error);\r\n+        setSubmitting(false);\r\n+        \r\n+        let errorMessage = \"An unexpected error occurred. Please try again.\";\r\n+        \r\n+        if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n+          errorMessage = \"Network error. Please check your connection and try again.\";\r\n+        } else if (error.message) {\r\n+          errorMessage = error.message;\r\n+        }\r\n+        \r\n+        setLoginError(errorMessage);\r\n+        toast.error(errorMessage);\r\n+        \r\n+        if (recaptchaRef.current) {\r\n+          recaptchaRef.current.reset();\r\n+          setCaptchaToken(null);\r\n+        }\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  React.useEffect(() => {\r\n+    setErrors(validate(form));\r\n+    \r\n+  }, [form, captchaToken]);\r\n+\r\n+  const isFormValid =\r\n+    Object.keys(errors).length === 0 &&\r\n+    form.username &&\r\n+    form.password &&\r\n+    captchaToken;\r\n+\r\n+  return (\r\n+    <>\r\n+      <ToastContainer position=\"top-center\" autoClose={3000} />\r\n+      <div\r\n+        className=\"min-vh-100 d-flex flex-column bg-black overflow-x-hidden\"\r\n+        style={{ minHeight: \"100vh\" }}\r\n+      >\r\n+        <div\r\n+          className=\"d-flex flex-grow-1 align-items-center justify-content-center w-100 px-2\"\r\n+          style={{ minHeight: 0, width: \"100%\" }}\r\n+        >\r\n+          <div\r\n+            className=\"card bg-black text-white shadow p-4 w-100 mt-3\"\r\n+            style={{ maxWidth: 500 }}\r\n+          >\r\n+            <img\r\n+              src={banner}\r\n+              alt=\"Promo Banner\"\r\n+              className=\"img-fluid rounded mb-3\"\r\n+            />\r\n+\r\n+            <form onSubmit={handleSubmit} noValidate>\r\n+              {loginError && (\r\n+                <div\r\n+                  className=\"alert alert-danger mb-3\"\r\n+                  role=\"alert\"\r\n+                  aria-live=\"polite\"\r\n+                >\r\n+                  <i className=\"bi bi-exclamation-triangle me-2\"></i>\r\n+                  {loginError}\r\n+                </div>\r\n+              )}\r\n+\r\n+              <CommonInput\r\n+                label=\"Username\"\r\n+                type=\"text\"\r\n+                id=\"username\"\r\n+                name=\"username\"\r\n+                placeholder=\"Enter your username\"\r\n+                value={form.username}\r\n+                onChange={handleChange}\r\n+                onBlur={handleBlur}\r\n+                required\r\n+                autoComplete=\"username\"\r\n+                touched={touched.username}\r\n+                error={errors.username}\r\n+                valid={touched.username && !errors.username && form.username}\r\n+                autoFocus\r\n+              />\r\n+\r\n+              <CommonInput\r\n+                label=\"Password\"\r\n+                type=\"password\"\r\n+                id=\"password\"\r\n+                name=\"password\"\r\n+                placeholder=\"Enter your password\"\r\n+                value={form.password}\r\n+                onChange={handleChange}\r\n+                onBlur={handleBlur}\r\n+                required\r\n+                autoComplete=\"current-password\"\r\n+                touched={touched.password}\r\n+                error={errors.password}\r\n+                valid={touched.password && !errors.password && form.password}\r\n+              />\r\n+\r\n+              <div className=\"mb-3\">\r\n+                <div className=\"form-label mb-2\">\r\n+                  <i className=\"bi bi-shield-check me-2\"></i>\r\n+                  Security Verification\r\n+                </div>\r\n+                <div className=\"d-flex flex-column align-items-center\">\r\n+                  \r\n+                  <ReCAPTCHA\r\n+                    ref={recaptchaRef}\r\n+                    sitekey={recaptchaSiteKey}\r\n+                    onChange={handleCaptchaChange}\r\n+                    onExpired={handleCaptchaExpired}\r\n+                    theme=\"light\"\r\n+                    size=\"normal\"\r\n+                    aria-label=\"Complete reCAPTCHA verification\"\r\n+                  />\r\n+                  {errors.captcha && (\r\n+                    <div className=\"text-danger small mt-2\" role=\"alert\">\r\n+                      <i className=\"bi bi-exclamation-circle me-1\"></i>\r\n+                      {errors.captcha}\r\n+                    </div>\r\n+                  )}\r\n+                </div>\r\n+              </div>\r\n+\r\n+              <button\r\n+                type=\"submit\"\r\n+                className=\"btn btn-warning text-dark fw-bold w-100 mb-3\"\r\n+                disabled={!isFormValid || submitting}\r\n+                aria-disabled={!isFormValid || submitting}\r\n+                aria-describedby={!isFormValid ? \"formErrors\" : undefined}\r\n+              >\r\n+                {submitting ? (\r\n+                  <>\r\n+                    <span\r\n+                      className=\"spinner-border spinner-border-sm me-2\"\r\n+                      role=\"status\"\r\n+                      aria-hidden=\"true\"\r\n+                    ></span>\r\n+                    Signing In...\r\n+                  </>\r\n+                ) : (\r\n+                  \"Sign In\"\r\n+                )}\r\n+              </button>\r\n+\r\n+              {!isFormValid && (\r\n+                <div id=\"formErrors\" className=\"sr-only\" aria-live=\"polite\">\r\n+                  Please fix the form errors above to continue.\r\n+                </div>\r\n+              )}\r\n+\r\n+              <div className=\"text-center mb-3\">\r\n+                <button\r\n+                  type=\"button\"\r\n+                  className=\"btn btn-link text-warning text-decoration-none p-0\"\r\n+                  onClick={handleForgotPassword}\r\n+                  aria-describedby=\"forgotPasswordHelp\"\r\n+                >\r\n+                  <i className=\"bi bi-question-circle me-1\"></i>\r\n+                  Forgot your password?\r\n+                </button>\r\n+                <small\r\n+                  id=\"forgotPasswordHelp\"\r\n+                  className=\"d-block text-muted mt-1\"\r\n+                >\r\n+                  Enter your username above and click this link to reset your password.\r\n+                </small>\r\n+              </div>\r\n+\r\n+              <hr className=\"border-secondary\" />\r\n+\r\n+              <p className=\"text-center text-white-50 mb-3\">\r\n+                <i className=\"bi bi-arrow-down me-2\"></i>\r\n+                Or sign in with\r\n+              </p>\r\n+\r\n+              <div className=\"d-flex flex-column flex-md-row justify-content-center gap-2\">\r\n+                <button\r\n+                  type=\"button\"\r\n+                  className=\"btn btn-light d-flex align-items-center justify-content-center w-100\"\r\n+                  onClick={handleGoogleLogin}\r\n+                  aria-label=\"Sign in with Google account\"\r\n+                >\r\n+                  <img\r\n+                    src=\"https://img.icons8.com/color/24/000000/google-logo.png\"\r\n+                    className=\"me-2\"\r\n+                    alt=\"Google logo\"\r\n+                    aria-hidden=\"true\"\r\n+                  />\r\n+                  <span>Continue with Google</span>\r\n+                </button>\r\n+              </div>\r\n+\r\n+              <div className=\"text-center mt-3\">\r\n+                <small className=\"text-muted\">\r\n+                  Don't have an account?{\" \"}\r\n+                  <a href=\"/signup\" className=\"text-warning text-decoration-none\">\r\n+                    Sign up here\r\n+                  </a>\r\n+                </small>\r\n+              </div>\r\n+            </form>\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+export default Login;\r\n"
                },
                {
                    "date": 1752639899295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,11 +14,11 @@\n   const [captchaToken, setCaptchaToken] = useState(null);\r\n   const [loginError, setLoginError] = useState(\"\");\r\n   const recaptchaRef = useRef(null);\r\n \r\n-  const API_BASE_URL = import.meta.env.VITE_API_BASE_URL ;\r\n+  const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || '';\r\n \r\n-  const LOGIN_ENDPOINT = `${API_BASE_URL}/user/login`; \r\n+  const LOGIN_ENDPOINT = API_BASE_URL ? `${API_BASE_URL}/user/login` : '/api/v1/user/login'; \r\n \r\n   const recaptchaSiteKey =\r\n     import.meta.env.VITE_RECAPTCHA_SITE_KEY ||\r\n     \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\";\r\n"
                },
                {
                    "date": 1752640082563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,11 +14,11 @@\n   const [captchaToken, setCaptchaToken] = useState(null);\r\n   const [loginError, setLoginError] = useState(\"\");\r\n   const recaptchaRef = useRef(null);\r\n \r\n-  const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || '';\r\n+  const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://54.234.145.12:8004/api/v1';\r\n \r\n-  const LOGIN_ENDPOINT = API_BASE_URL ? `${API_BASE_URL}/user/login` : '/api/v1/user/login'; \r\n+  const LOGIN_ENDPOINT = `${API_BASE_URL}/user/login`; \r\n \r\n   const recaptchaSiteKey =\r\n     import.meta.env.VITE_RECAPTCHA_SITE_KEY ||\r\n     \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\";\r\n"
                },
                {
                    "date": 1752664856279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,11 +72,15 @@\n     alert(`Password reset link sent for username: ${form.username} (Demo)`);\r\n   };\r\n \r\n   const handleGoogleLogin = () => {\r\n-    alert(\"Redirecting to Google OAuth (Demo)\");\r\n+    window.location.href = 'http://54.234.145.12:8004/api/v1/auth/google';\r\n   };\r\n \r\n+  const handleFacebookLogin = () => {\r\n+    window.location.href = 'http://54.234.145.12:8004/api/v1/auth/facebook';\r\n+  };\r\n+\r\n   const handleSubmit = async (e) => {\r\n     e.preventDefault();\r\n     setTouched({ username: true, password: true });\r\n     setLoginError(\"\"); \r\n@@ -358,8 +362,22 @@\n                     aria-hidden=\"true\"\r\n                   />\r\n                   <span>Continue with Google</span>\r\n                 </button>\r\n+                <button\r\n+                  type=\"button\"\r\n+                  className=\"btn btn-primary d-flex align-items-center justify-content-center w-100\"\r\n+                  onClick={handleFacebookLogin}\r\n+                  aria-label=\"Sign in with Facebook account\"\r\n+                >\r\n+                  <img\r\n+                    src=\"https://img.icons8.com/color/24/000000/facebook-new.png\"\r\n+                    className=\"me-2\"\r\n+                    alt=\"Facebook logo\"\r\n+                    aria-hidden=\"true\"\r\n+                  />\r\n+                  <span>Continue with Facebook</span>\r\n+                </button>\r\n               </div>\r\n \r\n               <div className=\"text-center mt-3\">\r\n                 <small className=\"text-muted\">\r\n"
                },
                {
                    "date": 1752667805068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n     alert(`Password reset link sent for username: ${form.username} (Demo)`);\r\n   };\r\n \r\n   const handleGoogleLogin = () => {\r\n-    window.location.href = 'http://54.234.145.12:8004/api/v1/auth/google';\r\n+    window.location.href = 'http://localhost:8004/api/v1/auth/google';\r\n   };\r\n \r\n   const handleFacebookLogin = () => {\r\n     window.location.href = 'http://54.234.145.12:8004/api/v1/auth/facebook';\r\n"
                },
                {
                    "date": 1752667810407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,11 +72,11 @@\n     alert(`Password reset link sent for username: ${form.username} (Demo)`);\r\n   };\r\n \r\n   const handleGoogleLogin = () => {\r\n-    window.location.href = 'http://localhost:8004/api/v1/auth/google';\r\n+    window.location.href = 'http://54.234.145.12:8004/api/v1/auth/google';\r\n   };\r\n-\r\n+  \r\n   const handleFacebookLogin = () => {\r\n     window.location.href = 'http://54.234.145.12:8004/api/v1/auth/facebook';\r\n   };\r\n \r\n"
                },
                {
                    "date": 1752667816712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,13 +72,13 @@\n     alert(`Password reset link sent for username: ${form.username} (Demo)`);\r\n   };\r\n \r\n   const handleGoogleLogin = () => {\r\n-    window.location.href = 'http://54.234.145.12:8004/api/v1/auth/google';\r\n+    window.location.href = 'http://localhost:8004/api/v1/auth/google';\r\n   };\r\n-  \r\n+\r\n   const handleFacebookLogin = () => {\r\n-    window.location.href = 'http://54.234.145.12:8004/api/v1/auth/facebook';\r\n+    window.location.href = 'http://localhost:8004/api/v1/auth/facebook';\r\n   };\r\n \r\n   const handleSubmit = async (e) => {\r\n     e.preventDefault();\r\n"
                },
                {
                    "date": 1752729270516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,10 @@\n import React, { useState, useRef } from \"react\";\r\n import ReCAPTCHA from \"react-google-recaptcha\";\r\n import banner from \"../assets/banner.png\";\r\n-import Navbar from \"../components/Navbar\";\r\n import { ToastContainer, toast } from \"react-toastify\";\r\n import \"react-toastify/dist/ReactToastify.css\";\r\n-import CommonInput from \"../components/CommonInput\";\r\n+import { Eye, EyeOff, Shield, AlertTriangle, ArrowDown, ExternalLink } from \"lucide-react\";\r\n \r\n const Login = () => {\r\n   const [form, setForm] = useState({ username: \"\", password: \"\" });\r\n   const [touched, setTouched] = useState({});\r\n"
                },
                {
                    "date": 1752729278972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n   const [errors, setErrors] = useState({});\r\n   const [submitting, setSubmitting] = useState(false);\r\n   const [captchaToken, setCaptchaToken] = useState(null);\r\n   const [loginError, setLoginError] = useState(\"\");\r\n+  const [showPassword, setShowPassword] = useState(false);\r\n   const recaptchaRef = useRef(null);\r\n \r\n   const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://54.234.145.12:8004/api/v1';\r\n \r\n"
                },
                {
                    "date": 1752729317039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,78 +207,108 @@\n \r\n   return (\r\n     <>\r\n       <ToastContainer position=\"top-center\" autoClose={3000} />\r\n-      <div\r\n-        className=\"min-vh-100 d-flex flex-column bg-black overflow-x-hidden\"\r\n-        style={{ minHeight: \"100vh\" }}\r\n-      >\r\n-        <div\r\n-          className=\"d-flex flex-grow-1 align-items-center justify-content-center w-100 px-2\"\r\n-          style={{ minHeight: 0, width: \"100%\" }}\r\n-        >\r\n-          <div\r\n-            className=\"card bg-black text-white shadow p-4 w-100 mt-3\"\r\n-            style={{ maxWidth: 500 }}\r\n-          >\r\n+      <div className=\"min-h-screen bg-black flex flex-col overflow-x-hidden\">\r\n+        <div className=\"flex-1 flex items-center justify-center w-full px-4 py-8\">\r\n+          <div className=\"card w-full max-w-md p-6 animate-fade-in\">\r\n             <img\r\n               src={banner}\r\n               alt=\"Promo Banner\"\r\n-              className=\"img-fluid rounded mb-3\"\r\n+              className=\"w-full rounded-lg mb-6\"\r\n             />\r\n \r\n-            <form onSubmit={handleSubmit} noValidate>\r\n+            <form onSubmit={handleSubmit} noValidate className=\"space-y-6\">\r\n               {loginError && (\r\n                 <div\r\n-                  className=\"alert alert-danger mb-3\"\r\n+                  className=\"flex items-center p-4 bg-danger-500/10 border border-danger-500/20 rounded-lg text-danger-400\"\r\n                   role=\"alert\"\r\n                   aria-live=\"polite\"\r\n                 >\r\n-                  <i className=\"bi bi-exclamation-triangle me-2\"></i>\r\n-                  {loginError}\r\n+                  <AlertTriangle className=\"w-5 h-5 mr-3 flex-shrink-0\" />\r\n+                  <span className=\"text-sm font-medium\">{loginError}</span>\r\n                 </div>\r\n               )}\r\n \r\n-              <CommonInput\r\n-                label=\"Username\"\r\n-                type=\"text\"\r\n-                id=\"username\"\r\n-                name=\"username\"\r\n-                placeholder=\"Enter your username\"\r\n-                value={form.username}\r\n-                onChange={handleChange}\r\n-                onBlur={handleBlur}\r\n-                required\r\n-                autoComplete=\"username\"\r\n-                touched={touched.username}\r\n-                error={errors.username}\r\n-                valid={touched.username && !errors.username && form.username}\r\n-                autoFocus\r\n-              />\r\n+              {/* Username Field */}\r\n+              <div className=\"space-y-2\">\r\n+                <label htmlFor=\"username\" className=\"block text-sm font-medium text-white\">\r\n+                  Username\r\n+                </label>\r\n+                <input\r\n+                  type=\"text\"\r\n+                  id=\"username\"\r\n+                  name=\"username\"\r\n+                  placeholder=\"Enter your username\"\r\n+                  value={form.username}\r\n+                  onChange={handleChange}\r\n+                  onBlur={handleBlur}\r\n+                  required\r\n+                  autoComplete=\"username\"\r\n+                  autoFocus\r\n+                  className={`input-field ${\r\n+                    touched.username && errors.username\r\n+                      ? \"border-danger-500 focus:ring-danger-500\"\r\n+                      : touched.username && !errors.username && form.username\r\n+                      ? \"border-success-500 focus:ring-success-500\"\r\n+                      : \"\"\r\n+                  }`}\r\n+                />\r\n+                {touched.username && errors.username && (\r\n+                  <p className=\"text-danger-400 text-sm flex items-center\">\r\n+                    <AlertTriangle className=\"w-4 h-4 mr-1\" />\r\n+                    {errors.username}\r\n+                  </p>\r\n+                )}\r\n+              </div>\r\n \r\n-              <CommonInput\r\n-                label=\"Password\"\r\n-                type=\"password\"\r\n-                id=\"password\"\r\n-                name=\"password\"\r\n-                placeholder=\"Enter your password\"\r\n-                value={form.password}\r\n-                onChange={handleChange}\r\n-                onBlur={handleBlur}\r\n-                required\r\n-                autoComplete=\"current-password\"\r\n-                touched={touched.password}\r\n-                error={errors.password}\r\n-                valid={touched.password && !errors.password && form.password}\r\n-              />\r\n+              {/* Password Field */}\r\n+              <div className=\"space-y-2\">\r\n+                <label htmlFor=\"password\" className=\"block text-sm font-medium text-white\">\r\n+                  Password\r\n+                </label>\r\n+                <div className=\"relative\">\r\n+                  <input\r\n+                    type={showPassword ? \"text\" : \"password\"}\r\n+                    id=\"password\"\r\n+                    name=\"password\"\r\n+                    placeholder=\"Enter your password\"\r\n+                    value={form.password}\r\n+                    onChange={handleChange}\r\n+                    onBlur={handleBlur}\r\n+                    required\r\n+                    autoComplete=\"current-password\"\r\n+                    className={`input-field pr-12 ${\r\n+                      touched.password && errors.password\r\n+                        ? \"border-danger-500 focus:ring-danger-500\"\r\n+                        : touched.password && !errors.password && form.password\r\n+                        ? \"border-success-500 focus:ring-success-500\"\r\n+                        : \"\"\r\n+                    }`}\r\n+                  />\r\n+                  <button\r\n+                    type=\"button\"\r\n+                    onClick={() => setShowPassword(!showPassword)}\r\n+                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-secondary-400 hover:text-white transition-colors\"\r\n+                  >\r\n+                    {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\r\n+                  </button>\r\n+                </div>\r\n+                {touched.password && errors.password && (\r\n+                  <p className=\"text-danger-400 text-sm flex items-center\">\r\n+                    <AlertTriangle className=\"w-4 h-4 mr-1\" />\r\n+                    {errors.password}\r\n+                  </p>\r\n+                )}\r\n+              </div>\r\n \r\n-              <div className=\"mb-3\">\r\n-                <div className=\"form-label mb-2\">\r\n-                  <i className=\"bi bi-shield-check me-2\"></i>\r\n+              {/* reCAPTCHA */}\r\n+              <div className=\"space-y-3\">\r\n+                <div className=\"flex items-center text-sm font-medium text-white\">\r\n+                  <Shield className=\"w-5 h-5 mr-2 text-primary-400\" />\r\n                   Security Verification\r\n                 </div>\r\n-                <div className=\"d-flex flex-column align-items-center\">\r\n-                  \r\n+                <div className=\"flex flex-col items-center\">\r\n                   <ReCAPTCHA\r\n                     ref={recaptchaRef}\r\n                     sitekey={recaptchaSiteKey}\r\n                     onChange={handleCaptchaChange}\r\n@@ -287,32 +317,29 @@\n                     size=\"normal\"\r\n                     aria-label=\"Complete reCAPTCHA verification\"\r\n                   />\r\n                   {errors.captcha && (\r\n-                    <div className=\"text-danger small mt-2\" role=\"alert\">\r\n-                      <i className=\"bi bi-exclamation-circle me-1\"></i>\r\n+                    <p className=\"text-danger-400 text-sm mt-2 flex items-center\">\r\n+                      <AlertTriangle className=\"w-4 h-4 mr-1\" />\r\n                       {errors.captcha}\r\n-                    </div>\r\n+                    </p>\r\n                   )}\r\n                 </div>\r\n               </div>\r\n \r\n+              {/* Submit Button */}\r\n               <button\r\n                 type=\"submit\"\r\n-                className=\"btn btn-warning text-dark fw-bold w-100 mb-3\"\r\n+                className=\"btn-primary w-full py-3 text-lg\"\r\n                 disabled={!isFormValid || submitting}\r\n                 aria-disabled={!isFormValid || submitting}\r\n                 aria-describedby={!isFormValid ? \"formErrors\" : undefined}\r\n               >\r\n                 {submitting ? (\r\n-                  <>\r\n-                    <span\r\n-                      className=\"spinner-border spinner-border-sm me-2\"\r\n-                      role=\"status\"\r\n-                      aria-hidden=\"true\"\r\n-                    ></span>\r\n+                  <div className=\"flex items-center justify-center\">\r\n+                    <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-black mr-3\"></div>\r\n                     Signing In...\r\n-                  </>\r\n+                  </div>\r\n                 ) : (\r\n                   \"Sign In\"\r\n                 )}\r\n               </button>\r\n@@ -322,71 +349,75 @@\n                   Please fix the form errors above to continue.\r\n                 </div>\r\n               )}\r\n \r\n-              <div className=\"text-center mb-3\">\r\n+              {/* Forgot Password */}\r\n+              <div className=\"text-center\">\r\n                 <button\r\n                   type=\"button\"\r\n-                  className=\"btn btn-link text-warning text-decoration-none p-0\"\r\n+                  className=\"text-primary-400 hover:text-primary-300 text-sm font-medium transition-colors\"\r\n                   onClick={handleForgotPassword}\r\n                   aria-describedby=\"forgotPasswordHelp\"\r\n                 >\r\n-                  <i className=\"bi bi-question-circle me-1\"></i>\r\n                   Forgot your password?\r\n                 </button>\r\n-                <small\r\n+                <p\r\n                   id=\"forgotPasswordHelp\"\r\n-                  className=\"d-block text-muted mt-1\"\r\n+                  className=\"text-secondary-400 text-xs mt-1\"\r\n                 >\r\n                   Enter your username above and click this link to reset your password.\r\n-                </small>\r\n+                </p>\r\n               </div>\r\n \r\n-              <hr className=\"border-secondary\" />\r\n+              <div className=\"border-t border-secondary-700\"></div>\r\n \r\n-              <p className=\"text-center text-white-50 mb-3\">\r\n-                <i className=\"bi bi-arrow-down me-2\"></i>\r\n-                Or sign in with\r\n-              </p>\r\n+              {/* OAuth Section */}\r\n+              <div className=\"space-y-4\">\r\n+                <p className=\"text-center text-secondary-400 text-sm flex items-center justify-center\">\r\n+                  <ArrowDown className=\"w-4 h-4 mr-2\" />\r\n+                  Or sign in with\r\n+                </p>\r\n \r\n-              <div className=\"d-flex flex-column flex-md-row justify-content-center gap-2\">\r\n-                <button\r\n-                  type=\"button\"\r\n-                  className=\"btn btn-light d-flex align-items-center justify-content-center w-100\"\r\n-                  onClick={handleGoogleLogin}\r\n-                  aria-label=\"Sign in with Google account\"\r\n-                >\r\n-                  <img\r\n-                    src=\"https://img.icons8.com/color/24/000000/google-logo.png\"\r\n-                    className=\"me-2\"\r\n-                    alt=\"Google logo\"\r\n-                    aria-hidden=\"true\"\r\n-                  />\r\n-                  <span>Continue with Google</span>\r\n-                </button>\r\n-                <button\r\n-                  type=\"button\"\r\n-                  className=\"btn btn-primary d-flex align-items-center justify-content-center w-100\"\r\n-                  onClick={handleFacebookLogin}\r\n-                  aria-label=\"Sign in with Facebook account\"\r\n-                >\r\n-                  <img\r\n-                    src=\"https://img.icons8.com/color/24/000000/facebook-new.png\"\r\n-                    className=\"me-2\"\r\n-                    alt=\"Facebook logo\"\r\n-                    aria-hidden=\"true\"\r\n-                  />\r\n-                  <span>Continue with Facebook</span>\r\n-                </button>\r\n+                <div className=\"space-y-3\">\r\n+                  <button\r\n+                    type=\"button\"\r\n+                    className=\"w-full flex items-center justify-center px-4 py-3 bg-white text-black rounded-lg font-medium hover:bg-gray-100 transition-colors\"\r\n+                    onClick={handleGoogleLogin}\r\n+                    aria-label=\"Sign in with Google account\"\r\n+                  >\r\n+                    <img\r\n+                      src=\"https://img.icons8.com/color/24/000000/google-logo.png\"\r\n+                      className=\"w-5 h-5 mr-3\"\r\n+                      alt=\"Google logo\"\r\n+                      aria-hidden=\"true\"\r\n+                    />\r\n+                    Continue with Google\r\n+                  </button>\r\n+                  <button\r\n+                    type=\"button\"\r\n+                    className=\"w-full flex items-center justify-center px-4 py-3 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors\"\r\n+                    onClick={handleFacebookLogin}\r\n+                    aria-label=\"Sign in with Facebook account\"\r\n+                  >\r\n+                    <img\r\n+                      src=\"https://img.icons8.com/color/24/000000/facebook-new.png\"\r\n+                      className=\"w-5 h-5 mr-3\"\r\n+                      alt=\"Facebook logo\"\r\n+                      aria-hidden=\"true\"\r\n+                    />\r\n+                    Continue with Facebook\r\n+                  </button>\r\n+                </div>\r\n               </div>\r\n \r\n-              <div className=\"text-center mt-3\">\r\n-                <small className=\"text-muted\">\r\n+              {/* Sign Up Link */}\r\n+              <div className=\"text-center\">\r\n+                <p className=\"text-secondary-400 text-sm\">\r\n                   Don't have an account?{\" \"}\r\n-                  <a href=\"/signup\" className=\"text-warning text-decoration-none\">\r\n+                  <a href=\"/signup\" className=\"text-primary-400 hover:text-primary-300 font-medium transition-colors\">\r\n                     Sign up here\r\n                   </a>\r\n-                </small>\r\n+                </p>\r\n               </div>\r\n             </form>\r\n           </div>\r\n         </div>\r\n"
                },
                {
                    "date": 1752734503659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,10 @@\n import ReCAPTCHA from \"react-google-recaptcha\";\r\n import banner from \"../assets/banner.png\";\r\n import { ToastContainer, toast } from \"react-toastify\";\r\n import \"react-toastify/dist/ReactToastify.css\";\r\n-import { Eye, EyeOff, Shield, AlertTriangle, ArrowDown, ExternalLink } from \"lucide-react\";\r\n+import { Eye, EyeOff, Shield, AlertTriangle, ArrowDown } from \"lucide-react\";\r\n+import CommonInput from \"../components/CommonInput\";\r\n \r\n const Login = () => {\r\n   const [form, setForm] = useState({ username: \"\", password: \"\" });\r\n   const [touched, setTouched] = useState({});\r\n@@ -14,25 +15,19 @@\n   const [loginError, setLoginError] = useState(\"\");\r\n   const [showPassword, setShowPassword] = useState(false);\r\n   const recaptchaRef = useRef(null);\r\n \r\n-  const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://54.234.145.12:8004/api/v1';\r\n+  const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8004/api/v1';\r\n+  const LOGIN_ENDPOINT = `${API_BASE_URL}/user/login`;\r\n+  const recaptchaSiteKey = import.meta.env.VITE_RECAPTCHA_SITE_KEY || \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\";\r\n \r\n-  const LOGIN_ENDPOINT = `${API_BASE_URL}/user/login`; \r\n-\r\n-  const recaptchaSiteKey =\r\n-    import.meta.env.VITE_RECAPTCHA_SITE_KEY ||\r\n-    \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\";\r\n-\r\n   const validate = (values) => {\r\n     const errs = {};\r\n     if (!values.username) errs.username = \"Username is required.\";\r\n     if (!values.password) errs.password = \"Password is required.\";\r\n     else if (!/^(?=.*[A-Z])(?=.*\\d).{8,20}$/.test(values.password))\r\n-      errs.password =\r\n-        \"Password must be 8-20 characters with at least one number and one uppercase letter.\";\r\n-    if (!captchaToken)\r\n-      errs.captcha = \"Please complete the reCAPTCHA verification.\";\r\n+      errs.password = \"Password must be 8-20 characters with at least one number and one uppercase letter.\";\r\n+    if (!captchaToken) errs.captcha = \"Please complete the reCAPTCHA verification.\";\r\n     return errs;\r\n   };\r\n \r\n   const handleChange = (e) => {\r\n@@ -68,82 +63,62 @@\n         username: \"Please enter your username to reset your password.\",\r\n       }));\r\n       return;\r\n     }\r\n-    alert(`Password reset link sent for username: ${form.username} (Demo)`);\r\n+    toast.info(`Password reset link sent for username: ${form.username} (Demo)`);\r\n   };\r\n \r\n   const handleGoogleLogin = () => {\r\n-    window.location.href = 'http://localhost:8004/api/v1/auth/google';\r\n+    window.location.href = `${API_BASE_URL}/auth/google`;\r\n   };\r\n \r\n   const handleFacebookLogin = () => {\r\n-    window.location.href = 'http://localhost:8004/api/v1/auth/facebook';\r\n+    window.location.href = `${API_BASE_URL}/auth/facebook`;\r\n   };\r\n \r\n   const handleSubmit = async (e) => {\r\n     e.preventDefault();\r\n     setTouched({ username: true, password: true });\r\n-    setLoginError(\"\"); \r\n-\r\n+    setLoginError(\"\");\r\n     const validationErrors = validate(form);\r\n     setErrors(validationErrors);\r\n-\r\n     if (Object.keys(validationErrors).length === 0) {\r\n       setSubmitting(true);\r\n-\r\n       try {\r\n         const requestPayload = {\r\n           username: form.username,\r\n           password: form.password,\r\n           captchaToken: captchaToken,\r\n         };\r\n-\r\n-        console.log(\"Sending login request to:\", LOGIN_ENDPOINT);\r\n-        console.log(\"Request payload:\", requestPayload);\r\n-\r\n         const response = await fetch(LOGIN_ENDPOINT, {\r\n           method: \"POST\",\r\n           headers: {\r\n             \"Content-Type\": \"application/json\",\r\n             \"Accept\": \"application/json\",\r\n           },\r\n-          credentials: 'include', // Include cookies for CORS\r\n+          credentials: 'include',\r\n           body: JSON.stringify(requestPayload),\r\n         });\r\n-\r\n-        console.log(\"Response status:\", response.status);\r\n-        console.log(\"Response headers:\", response.headers);\r\n-\r\n         let responseData = {};\r\n         const text = await response.text();\r\n         if (text) {\r\n           try {\r\n             responseData = JSON.parse(text);\r\n           } catch (parseError) {\r\n-            console.error(\"Failed to parse response:\", parseError);\r\n             responseData = { message: \"Invalid response format\" };\r\n           }\r\n         }\r\n-        console.log(\"Response data:\", responseData);\r\n-\r\n         setSubmitting(false);\r\n-\r\n         if (response.ok && responseData.data && responseData.data.user && responseData.data.accessToken) {\r\n-          \r\n           localStorage.setItem(\"authToken\", responseData.data.accessToken);\r\n           localStorage.setItem(\"user\", JSON.stringify(responseData.data.user));\r\n           toast.success(\"Login successful!\");\r\n-         \r\n           if (recaptchaRef.current) {\r\n             recaptchaRef.current.reset();\r\n             setCaptchaToken(null);\r\n           }\r\n-          \r\n         } else {\r\n-          \r\n           let errorMessage = \"Login failed\";\r\n-          \r\n           if (responseData.errors && responseData.errors.length > 0) {\r\n             errorMessage = responseData.errors[0].message || responseData.errors[0];\r\n           } else if (responseData.message) {\r\n             errorMessage = responseData.message;\r\n@@ -161,32 +136,25 @@\n             errorMessage = \"Network error. Please check your connection.\";\r\n           } else {\r\n             errorMessage = `Login failed (${response.status})`;\r\n           }\r\n-          \r\n           setLoginError(errorMessage);\r\n           toast.error(errorMessage);\r\n-          \r\n           if (recaptchaRef.current) {\r\n             recaptchaRef.current.reset();\r\n             setCaptchaToken(null);\r\n           }\r\n         }\r\n       } catch (error) {\r\n-        console.error(\"Login error:\", error);\r\n         setSubmitting(false);\r\n-        \r\n         let errorMessage = \"An unexpected error occurred. Please try again.\";\r\n-        \r\n         if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n           errorMessage = \"Network error. Please check your connection and try again.\";\r\n         } else if (error.message) {\r\n           errorMessage = error.message;\r\n         }\r\n-        \r\n         setLoginError(errorMessage);\r\n         toast.error(errorMessage);\r\n-        \r\n         if (recaptchaRef.current) {\r\n           recaptchaRef.current.reset();\r\n           setCaptchaToken(null);\r\n         }\r\n@@ -195,9 +163,8 @@\n   };\r\n \r\n   React.useEffect(() => {\r\n     setErrors(validate(form));\r\n-    \r\n   }, [form, captchaToken]);\r\n \r\n   const isFormValid =\r\n     Object.keys(errors).length === 0 &&\r\n@@ -215,9 +182,8 @@\n               src={banner}\r\n               alt=\"Promo Banner\"\r\n               className=\"w-full rounded-lg mb-6\"\r\n             />\r\n-\r\n             <form onSubmit={handleSubmit} noValidate className=\"space-y-6\">\r\n               {loginError && (\r\n                 <div\r\n                   className=\"flex items-center p-4 bg-danger-500/10 border border-danger-500/20 rounded-lg text-danger-400\"\r\n@@ -227,48 +193,30 @@\n                   <AlertTriangle className=\"w-5 h-5 mr-3 flex-shrink-0\" />\r\n                   <span className=\"text-sm font-medium\">{loginError}</span>\r\n                 </div>\r\n               )}\r\n-\r\n-              {/* Username Field */}\r\n+              <CommonInput\r\n+                label=\"Username\"\r\n+                type=\"text\"\r\n+                id=\"username\"\r\n+                name=\"username\"\r\n+                placeholder=\"Enter your username\"\r\n+                value={form.username}\r\n+                onChange={handleChange}\r\n+                onBlur={handleBlur}\r\n+                required\r\n+                autoComplete=\"username\"\r\n+                touched={touched.username}\r\n+                error={errors.username}\r\n+                valid={touched.username && !errors.username && form.username}\r\n+                autoFocus\r\n+              />\r\n               <div className=\"space-y-2\">\r\n-                <label htmlFor=\"username\" className=\"block text-sm font-medium text-white\">\r\n-                  Username\r\n-                </label>\r\n-                <input\r\n-                  type=\"text\"\r\n-                  id=\"username\"\r\n-                  name=\"username\"\r\n-                  placeholder=\"Enter your username\"\r\n-                  value={form.username}\r\n-                  onChange={handleChange}\r\n-                  onBlur={handleBlur}\r\n-                  required\r\n-                  autoComplete=\"username\"\r\n-                  autoFocus\r\n-                  className={`input-field ${\r\n-                    touched.username && errors.username\r\n-                      ? \"border-danger-500 focus:ring-danger-500\"\r\n-                      : touched.username && !errors.username && form.username\r\n-                      ? \"border-success-500 focus:ring-success-500\"\r\n-                      : \"\"\r\n-                  }`}\r\n-                />\r\n-                {touched.username && errors.username && (\r\n-                  <p className=\"text-danger-400 text-sm flex items-center\">\r\n-                    <AlertTriangle className=\"w-4 h-4 mr-1\" />\r\n-                    {errors.username}\r\n-                  </p>\r\n-                )}\r\n-              </div>\r\n-\r\n-              {/* Password Field */}\r\n-              <div className=\"space-y-2\">\r\n                 <label htmlFor=\"password\" className=\"block text-sm font-medium text-white\">\r\n                   Password\r\n                 </label>\r\n                 <div className=\"relative\">\r\n-                  <input\r\n+                  <CommonInput\r\n                     type={showPassword ? \"text\" : \"password\"}\r\n                     id=\"password\"\r\n                     name=\"password\"\r\n                     placeholder=\"Enter your password\"\r\n@@ -276,15 +224,12 @@\n                     onChange={handleChange}\r\n                     onBlur={handleBlur}\r\n                     required\r\n                     autoComplete=\"current-password\"\r\n-                    className={`input-field pr-12 ${\r\n-                      touched.password && errors.password\r\n-                        ? \"border-danger-500 focus:ring-danger-500\"\r\n-                        : touched.password && !errors.password && form.password\r\n-                        ? \"border-success-500 focus:ring-success-500\"\r\n-                        : \"\"\r\n-                    }`}\r\n+                    touched={touched.password}\r\n+                    error={errors.password}\r\n+                    valid={touched.password && !errors.password && form.password}\r\n+                    className=\"pr-12\"\r\n                   />\r\n                   <button\r\n                     type=\"button\"\r\n                     onClick={() => setShowPassword(!showPassword)}\r\n@@ -292,17 +237,9 @@\n                   >\r\n                     {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\r\n                   </button>\r\n                 </div>\r\n-                {touched.password && errors.password && (\r\n-                  <p className=\"text-danger-400 text-sm flex items-center\">\r\n-                    <AlertTriangle className=\"w-4 h-4 mr-1\" />\r\n-                    {errors.password}\r\n-                  </p>\r\n-                )}\r\n               </div>\r\n-\r\n-              {/* reCAPTCHA */}\r\n               <div className=\"space-y-3\">\r\n                 <div className=\"flex items-center text-sm font-medium text-white\">\r\n                   <Shield className=\"w-5 h-5 mr-2 text-primary-400\" />\r\n                   Security Verification\r\n@@ -324,10 +261,8 @@\n                     </p>\r\n                   )}\r\n                 </div>\r\n               </div>\r\n-\r\n-              {/* Submit Button */}\r\n               <button\r\n                 type=\"submit\"\r\n                 className=\"btn-primary w-full py-3 text-lg\"\r\n                 disabled={!isFormValid || submitting}\r\n@@ -342,16 +277,13 @@\n                 ) : (\r\n                   \"Sign In\"\r\n                 )}\r\n               </button>\r\n-\r\n               {!isFormValid && (\r\n                 <div id=\"formErrors\" className=\"sr-only\" aria-live=\"polite\">\r\n                   Please fix the form errors above to continue.\r\n                 </div>\r\n               )}\r\n-\r\n-              {/* Forgot Password */}\r\n               <div className=\"text-center\">\r\n                 <button\r\n                   type=\"button\"\r\n                   className=\"text-primary-400 hover:text-primary-300 text-sm font-medium transition-colors\"\r\n@@ -366,18 +298,14 @@\n                 >\r\n                   Enter your username above and click this link to reset your password.\r\n                 </p>\r\n               </div>\r\n-\r\n               <div className=\"border-t border-secondary-700\"></div>\r\n-\r\n-              {/* OAuth Section */}\r\n               <div className=\"space-y-4\">\r\n                 <p className=\"text-center text-secondary-400 text-sm flex items-center justify-center\">\r\n                   <ArrowDown className=\"w-4 h-4 mr-2\" />\r\n                   Or sign in with\r\n                 </p>\r\n-\r\n                 <div className=\"space-y-3\">\r\n                   <button\r\n                     type=\"button\"\r\n                     className=\"w-full flex items-center justify-center px-4 py-3 bg-white text-black rounded-lg font-medium hover:bg-gray-100 transition-colors\"\r\n@@ -407,10 +335,8 @@\n                     Continue with Facebook\r\n                   </button>\r\n                 </div>\r\n               </div>\r\n-\r\n-              {/* Sign Up Link */}\r\n               <div className=\"text-center\">\r\n                 <p className=\"text-secondary-400 text-sm\">\r\n                   Don't have an account?{\" \"}\r\n                   <a href=\"/signup\" className=\"text-primary-400 hover:text-primary-300 font-medium transition-colors\">\r\n"
                },
                {
                    "date": 1752746474855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   const [showPassword, setShowPassword] = useState(false);\r\n   const recaptchaRef = useRef(null);\r\n \r\n   const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8004/api/v1';\r\n-  const LOGIN_ENDPOINT = `${API_BASE_URL}/user/login`;\r\n+  const LOGIN_ENDPOINT = `${API_BASE_URL}/auth/login`;\r\n   const recaptchaSiteKey = import.meta.env.VITE_RECAPTCHA_SITE_KEY || \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\";\r\n \r\n   const validate = (values) => {\r\n     const errs = {};\r\n"
                },
                {
                    "date": 1752746481360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   const [loginError, setLoginError] = useState(\"\");\r\n   const [showPassword, setShowPassword] = useState(false);\r\n   const recaptchaRef = useRef(null);\r\n \r\n-  const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8004/api/v1';\r\n+  const API_BASE_URL = import.meta.env.VITE_API_BASE_URL;\r\n   const LOGIN_ENDPOINT = `${API_BASE_URL}/auth/login`;\r\n   const recaptchaSiteKey = import.meta.env.VITE_RECAPTCHA_SITE_KEY || \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\";\r\n \r\n   const validate = (values) => {\r\n"
                },
                {
                    "date": 1752750363474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,18 +176,18 @@\n     <>\r\n       <ToastContainer position=\"top-center\" autoClose={3000} />\r\n       <div className=\"min-h-screen bg-black flex flex-col overflow-x-hidden\">\r\n         <div className=\"flex-1 flex items-center justify-center w-full px-4 py-8\">\r\n-          <div className=\"card w-full max-w-md p-6 animate-fade-in\">\r\n+          <div className=\"w-full max-w-md p-6 bg-gray-900 rounded-2xl shadow-lg animate-fade-in\">\r\n             <img\r\n               src={banner}\r\n               alt=\"Promo Banner\"\r\n               className=\"w-full rounded-lg mb-6\"\r\n             />\r\n             <form onSubmit={handleSubmit} noValidate className=\"space-y-6\">\r\n               {loginError && (\r\n                 <div\r\n-                  className=\"flex items-center p-4 bg-danger-500/10 border border-danger-500/20 rounded-lg text-danger-400\"\r\n+                  className=\"flex items-center p-4 bg-red-500/10 border border-red-500/20 rounded-lg text-red-400\"\r\n                   role=\"alert\"\r\n                   aria-live=\"polite\"\r\n                 >\r\n                   <AlertTriangle className=\"w-5 h-5 mr-3 flex-shrink-0\" />\r\n@@ -232,17 +232,17 @@\n                   />\r\n                   <button\r\n                     type=\"button\"\r\n                     onClick={() => setShowPassword(!showPassword)}\r\n-                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-secondary-400 hover:text-white transition-colors\"\r\n+                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white transition-colors\"\r\n                   >\r\n                     {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\r\n                   </button>\r\n                 </div>\r\n               </div>\r\n               <div className=\"space-y-3\">\r\n                 <div className=\"flex items-center text-sm font-medium text-white\">\r\n-                  <Shield className=\"w-5 h-5 mr-2 text-primary-400\" />\r\n+                  <Shield className=\"w-5 h-5 mr-2 text-yellow-400\" />\r\n                   Security Verification\r\n                 </div>\r\n                 <div className=\"flex flex-col items-center\">\r\n                   <ReCAPTCHA\r\n@@ -254,29 +254,24 @@\n                     size=\"normal\"\r\n                     aria-label=\"Complete reCAPTCHA verification\"\r\n                   />\r\n                   {errors.captcha && (\r\n-                    <p className=\"text-danger-400 text-sm mt-2 flex items-center\">\r\n+                    <p className=\"text-red-400 text-sm mt-2 flex items-center\">\r\n                       <AlertTriangle className=\"w-4 h-4 mr-1\" />\r\n                       {errors.captcha}\r\n                     </p>\r\n                   )}\r\n                 </div>\r\n               </div>\r\n               <button\r\n                 type=\"submit\"\r\n-                className=\"btn-primary w-full py-3 text-lg\"\r\n-                disabled={!isFormValid || submitting}\r\n-                aria-disabled={!isFormValid || submitting}\r\n-                aria-describedby={!isFormValid ? \"formErrors\" : undefined}\r\n+                className=\"w-full py-3 text-lg font-semibold rounded-lg bg-gradient-to-r from-pink-500 to-yellow-400 text-white shadow hover:from-pink-600 hover:to-yellow-500 transition disabled:opacity-60 disabled:cursor-not-allowed\"\r\n+                disabled={submitting || !isFormValid}\r\n               >\r\n                 {submitting ? (\r\n-                  <div className=\"flex items-center justify-center\">\r\n-                    <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-black mr-3\"></div>\r\n-                    Signing In...\r\n-                  </div>\r\n+                  <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-black mr-3 inline-block align-middle\"></div>\r\n                 ) : (\r\n-                  \"Sign In\"\r\n+                  \"Login\"\r\n                 )}\r\n               </button>\r\n               {!isFormValid && (\r\n                 <div id=\"formErrors\" className=\"sr-only\" aria-live=\"polite\">\r\n@@ -307,10 +302,10 @@\n                 </p>\r\n                 <div className=\"space-y-3\">\r\n                   <button\r\n                     type=\"button\"\r\n+                    onClick={handleGoogleLogin}\r\n                     className=\"w-full flex items-center justify-center px-4 py-3 bg-white text-black rounded-lg font-medium hover:bg-gray-100 transition-colors\"\r\n-                    onClick={handleGoogleLogin}\r\n                     aria-label=\"Sign in with Google account\"\r\n                   >\r\n                     <img\r\n                       src=\"https://img.icons8.com/color/24/000000/google-logo.png\"\r\n@@ -321,10 +316,10 @@\n                     Continue with Google\r\n                   </button>\r\n                   <button\r\n                     type=\"button\"\r\n+                    onClick={handleFacebookLogin}\r\n                     className=\"w-full flex items-center justify-center px-4 py-3 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors\"\r\n-                    onClick={handleFacebookLogin}\r\n                     aria-label=\"Sign in with Facebook account\"\r\n                   >\r\n                     <img\r\n                       src=\"https://img.icons8.com/color/24/000000/facebook-new.png\"\r\n"
                },
                {
                    "date": 1752757728612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import { ToastContainer, toast } from \"react-toastify\";\r\n import \"react-toastify/dist/ReactToastify.css\";\r\n import { Eye, EyeOff, Shield, AlertTriangle, ArrowDown } from \"lucide-react\";\r\n import CommonInput from \"../components/CommonInput\";\r\n+import { useNavigate } from \"react-router-dom\";\r\n \r\n const Login = () => {\r\n   const [form, setForm] = useState({ username: \"\", password: \"\" });\r\n   const [touched, setTouched] = useState({});\r\n@@ -14,8 +15,9 @@\n   const [captchaToken, setCaptchaToken] = useState(null);\r\n   const [loginError, setLoginError] = useState(\"\");\r\n   const [showPassword, setShowPassword] = useState(false);\r\n   const recaptchaRef = useRef(null);\r\n+  const navigate = useNavigate();\r\n \r\n   const API_BASE_URL = import.meta.env.VITE_API_BASE_URL;\r\n   const LOGIN_ENDPOINT = `${API_BASE_URL}/auth/login`;\r\n   const recaptchaSiteKey = import.meta.env.VITE_RECAPTCHA_SITE_KEY || \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\";\r\n@@ -115,8 +117,9 @@\n           if (recaptchaRef.current) {\r\n             recaptchaRef.current.reset();\r\n             setCaptchaToken(null);\r\n           }\r\n+          navigate(\"/\"); // Redirect to home page after successful login\r\n         } else {\r\n           let errorMessage = \"Login failed\";\r\n           if (responseData.errors && responseData.errors.length > 0) {\r\n             errorMessage = responseData.errors[0].message || responseData.errors[0];\r\n"
                },
                {
                    "date": 1752759310096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n           if (recaptchaRef.current) {\r\n             recaptchaRef.current.reset();\r\n             setCaptchaToken(null);\r\n           }\r\n-          navigate(\"/\"); // Redirect to home page after successful login\r\n+          navigate(\"/\"); \r\n         } else {\r\n           let errorMessage = \"Login failed\";\r\n           if (responseData.errors && responseData.errors.length > 0) {\r\n             errorMessage = responseData.errors[0].message || responseData.errors[0];\r\n"
                }
            ],
            "date": 1752494174747,
            "name": "Commit-0",
            "content": "import React, { useState } from \"react\";\r\nimport banner from \"../assets/banner.png\";\r\nimport logo from \"../assets/logo.png\";\r\n\r\nconst Login = () => {\r\n  const [form, setForm] = useState({ email: \"\", password: \"\" });\r\n  const [touched, setTouched] = useState({});\r\n  const [errors, setErrors] = useState({});\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [captchaChecked, setCaptchaChecked] = useState(false);\r\n\r\n  const validate = (values) => {\r\n    const errs = {};\r\n    if (!values.email) errs.email = \"Email is required.\";\r\n    else if (!/^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/.test(values.email)) errs.email = \"Invalid email format.\";\r\n    if (!values.password) errs.password = \"Password is required.\";\r\n    if (!captchaChecked) errs.captcha = \"Please complete the CAPTCHA.\";\r\n    return errs;\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setForm((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleBlur = (e) => {\r\n    setTouched((prev) => ({ ...prev, [e.target.name]: true }));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setTouched({ email: true, password: true });\r\n    const validationErrors = validate(form);\r\n    setErrors(validationErrors);\r\n    if (Object.keys(validationErrors).length === 0) {\r\n      setSubmitting(true);\r\n      setTimeout(() => {\r\n        setSubmitting(false);\r\n        alert(\"Login successful! (Demo)\");\r\n      }, 1000);\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    setErrors(validate(form));\r\n    // eslint-disable-next-line\r\n  }, [form, captchaChecked]);\r\n\r\n  const isFormValid = Object.keys(errors).length === 0 && form.email && form.password && captchaChecked;\r\n\r\n  return (\r\n    <div className=\"min-vh-100 d-flex flex-column align-items-start bg-black overflow-x-hidden\" style={{ minHeight: '100vh' }}>\r\n      {/* Logo at top left in normal flow */}\r\n      <div className=\"w-100\" style={{ padding: '24px 0 0 32px' }}>\r\n        <img src={logo} alt=\"Orion Stars Logo\" style={{ height: 48, width: 'auto', maxWidth: '40vw' }} className=\"d-block d-md-none\" />\r\n        <img src={logo} alt=\"Orion Stars Logo\" style={{ height: 60, width: 'auto', maxWidth: '200px' }} className=\"d-none d-md-block\" />\r\n      </div>\r\n      {/* Centered Form below logo */}\r\n      <div className=\"d-flex flex-grow-1 align-items-center justify-content-center w-100\" style={{ minHeight: 0, width: '100%' }}>\r\n        <div className=\"card bg-black text-white shadow p-4 w-100 mt-3\" style={{ maxWidth: 500 }}>\r\n          <img src={banner} alt=\"Promo Banner\" className=\"img-fluid rounded mb-3\" />\r\n          <form onSubmit={handleSubmit} noValidate>\r\n            <div className=\"mb-3\">\r\n              <label htmlFor=\"email\" className=\"form-label\">Email Address</label>\r\n              <input\r\n                type=\"email\"\r\n                className={`form-control${touched.email && errors.email ? \" is-invalid\" : \"\"}`}\r\n                id=\"email\"\r\n                name=\"email\"\r\n                placeholder=\"Email Address\"\r\n                value={form.email}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                aria-invalid={!!(touched.email && errors.email)}\r\n                required\r\n                autoComplete=\"email\"\r\n              />\r\n              {touched.email && errors.email && <div className=\"invalid-feedback\">{errors.email}</div>}\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <label htmlFor=\"password\" className=\"form-label\">Password</label>\r\n              <input\r\n                type=\"password\"\r\n                className={`form-control${touched.password && errors.password ? \" is-invalid\" : \"\"}`}\r\n                id=\"password\"\r\n                name=\"password\"\r\n                placeholder=\"Password\"\r\n                value={form.password}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                aria-invalid={!!(touched.password && errors.password)}\r\n                required\r\n                autoComplete=\"current-password\"\r\n              />\r\n              {touched.password && errors.password && <div className=\"invalid-feedback\">{errors.password}</div>}\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <div className=\"form-label mb-2\">As a protection against automated spam, you will need to complete the CAPTCHA below:</div>\r\n              <div className=\"d-flex flex-column align-items-center\">\r\n                {/* CAPTCHA Placeholder */}\r\n                <div className=\"bg-light rounded p-3 mb-2\" style={{ minWidth: 280, minHeight: 70, maxWidth: 340, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    id=\"captchaCheck\"\r\n                    checked={captchaChecked}\r\n                    onChange={e => setCaptchaChecked(e.target.checked)}\r\n                    style={{ width: 24, height: 24, marginRight: 8 }}\r\n                  />\r\n                  <label htmlFor=\"captchaCheck\" className=\"mb-0 text-dark\" style={{ fontWeight: 500 }}>\r\n                    I am not a Robot\r\n                  </label>\r\n                  <img src=\"https://www.gstatic.com/recaptcha/api2/logo_48.png\" alt=\"reCAPTCHA\" style={{ height: 32, marginLeft: 12 }} />\r\n                </div>\r\n                {errors.captcha && <div className=\"text-danger small\">{errors.captcha}</div>}\r\n              </div>\r\n            </div>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn btn-warning text-dark fw-bold w-100 mb-3\"\r\n              disabled={!isFormValid || submitting}\r\n              aria-disabled={!isFormValid || submitting}\r\n            >\r\n              {submitting ? \"Logging in...\" : \"Login\"}\r\n            </button>\r\n            <div className=\"text-center mb-3\">\r\n              <a href=\"#\" className=\"text-warning text-decoration-none\">Forgot your password?</a>\r\n            </div>\r\n            <hr className=\"border-secondary\" />\r\n            <p className=\"text-center text-white-50\">Or Register with</p>\r\n            <div className=\"d-flex flex-column flex-md-row justify-content-between gap-2\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-light d-flex align-items-center justify-content-center w-100\"\r\n                onClick={() => alert(\"Google login (demo)\")}\r\n                aria-label=\"Login with Google\"\r\n              >\r\n                <img src=\"https://img.icons8.com/color/24/000000/google-logo.png\" className=\"me-2\" alt=\"Google\" />\r\n                Google\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login; "
        }
    ]
}