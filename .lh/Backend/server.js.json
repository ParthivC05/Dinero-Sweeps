{
    "sourceFile": "backend/server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1752728229743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752728845934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,50 +1,61 @@\n import express from 'express';\r\n-import mongoose from 'mongoose';\r\n import cors from 'cors';\r\n import helmet from 'helmet';\r\n import compression from 'compression';\r\n import morgan from 'morgan';\r\n import rateLimit from 'express-rate-limit';\r\n-import dotenv from 'dotenv';\r\n import session from 'express-session';\r\n import MongoStore from 'connect-mongo';\r\n+import dotenv from 'dotenv';\r\n+import passport from 'passport';\r\n \r\n+// Import configurations\r\n+import { connectDB } from './config/database.js';\r\n+import { logger } from './config/logger.js';\r\n+import passportConfig from './config/passport.js';\r\n+\r\n // Import routes\r\n-import authRoutes from './routes/auth.routes.js';\r\n-import userRoutes from './routes/user.routes.js';\r\n-import gameRoutes from './routes/game.routes.js';\r\n-import walletRoutes from './routes/wallet.routes.js';\r\n+import authRoutes from './routes/auth.js';\r\n+import userRoutes from './routes/user.js';\r\n+import gameRoutes from './routes/game.js';\r\n+import walletRoutes from './routes/wallet.js';\r\n \r\n // Import middleware\r\n-import { errorHandler } from './middleware/error.middleware.js';\r\n-import { notFound } from './middleware/notFound.middleware.js';\r\n+import { errorHandler } from './middleware/errorHandler.js';\r\n+import { notFound } from './middleware/notFound.js';\r\n \r\n-// Import passport configuration\r\n-import './config/passport.config.js';\r\n-\r\n // Load environment variables\r\n dotenv.config();\r\n \r\n const app = express();\r\n const PORT = process.env.PORT || 8004;\r\n \r\n+// Connect to MongoDB\r\n+connectDB();\r\n+\r\n+// Configure passport\r\n+passportConfig(passport);\r\n+\r\n // Security middleware\r\n app.use(helmet({\r\n+  crossOriginEmbedderPolicy: false,\r\n   contentSecurityPolicy: {\r\n     directives: {\r\n       defaultSrc: [\"'self'\"],\r\n       styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://fonts.googleapis.com\"],\r\n       fontSrc: [\"'self'\", \"https://fonts.gstatic.com\"],\r\n       imgSrc: [\"'self'\", \"data:\", \"https:\"],\r\n-      scriptSrc: [\"'self'\", \"'unsafe-inline'\", \"https://www.google.com\"],\r\n+      scriptSrc: [\"'self'\", \"'unsafe-inline'\", \"'unsafe-eval'\"],\r\n     },\r\n   },\r\n }));\r\n \r\n // CORS configuration\r\n app.use(cors({\r\n-  origin: process.env.FRONTEND_URL || 'http://localhost:5173',\r\n+  origin: process.env.NODE_ENV === 'production' \r\n+    ? [process.env.FRONTEND_URL_PROD] \r\n+    : [process.env.FRONTEND_URL, 'http://localhost:3000'],\r\n   credentials: true,\r\n   methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\r\n   allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],\r\n }));\r\n@@ -61,88 +72,72 @@\n });\r\n \r\n app.use('/api/', limiter);\r\n \r\n+// Body parsing middleware\r\n+app.use(express.json({ limit: '10mb' }));\r\n+app.use(express.urlencoded({ extended: true, limit: '10mb' }));\r\n+\r\n+// Compression middleware\r\n+app.use(compression());\r\n+\r\n+// Logging middleware\r\n+app.use(morgan('combined', { stream: { write: message => logger.info(message.trim()) } }));\r\n+\r\n // Session configuration\r\n app.use(session({\r\n-  secret: process.env.SESSION_SECRET || 'your-session-secret',\r\n+  secret: process.env.SESSION_SECRET || 'your-secret-key',\r\n   resave: false,\r\n   saveUninitialized: false,\r\n   store: MongoStore.create({\r\n     mongoUrl: process.env.MONGODB_URI,\r\n-    collectionName: 'sessions',\r\n+    ttl: 24 * 60 * 60, // 1 day\r\n   }),\r\n   cookie: {\r\n     secure: process.env.NODE_ENV === 'production',\r\n     httpOnly: true,\r\n-    maxAge: 24 * 60 * 60 * 1000, // 24 hours\r\n+    maxAge: 24 * 60 * 60 * 1000, // 1 day\r\n   },\r\n }));\r\n \r\n-// Body parsing middleware\r\n-app.use(express.json({ limit: '10mb' }));\r\n-app.use(express.urlencoded({ extended: true, limit: '10mb' }));\r\n+// Initialize passport\r\n+app.use(passport.initialize());\r\n+app.use(passport.session());\r\n \r\n-// Compression middleware\r\n-app.use(compression());\r\n-\r\n-// Logging middleware\r\n-if (process.env.NODE_ENV === 'development') {\r\n-  app.use(morgan('dev'));\r\n-} else {\r\n-  app.use(morgan('combined'));\r\n-}\r\n-\r\n // Health check endpoint\r\n app.get('/health', (req, res) => {\r\n   res.status(200).json({\r\n     status: 'OK',\r\n-    message: 'Dinero Sweeps API is running',\r\n     timestamp: new Date().toISOString(),\r\n+    uptime: process.uptime(),\r\n     environment: process.env.NODE_ENV,\r\n   });\r\n });\r\n \r\n // API routes\r\n app.use('/api/v1/auth', authRoutes);\r\n-app.use('/api/v1/users', userRoutes);\r\n-app.use('/api/v1/games', gameRoutes);\r\n+app.use('/api/v1/user', userRoutes);\r\n+app.use('/api/v1/game', gameRoutes);\r\n app.use('/api/v1/wallet', walletRoutes);\r\n \r\n // Error handling middleware\r\n app.use(notFound);\r\n app.use(errorHandler);\r\n \r\n-// MongoDB connection\r\n-const connectDB = async () => {\r\n-  try {\r\n-    const conn = await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/dinero_sweeps', {\r\n-      useNewUrlParser: true,\r\n-      useUnifiedTopology: true,\r\n-    });\r\n-\r\n-    console.log(`MongoDB Connected: ${conn.connection.host}`);\r\n-  } catch (error) {\r\n-    console.error('MongoDB connection error:', error);\r\n-    process.exit(1);\r\n-  }\r\n-};\r\n-\r\n\\ No newline at end of file\n // Start server\r\n-const startServer = async () => {\r\n-  await connectDB();\r\n-  \r\n-  app.listen(PORT, () => {\r\n-    console.log(`🚀 Server running on port ${PORT}`);\r\n-    console.log(`📊 Environment: ${process.env.NODE_ENV}`);\r\n-    console.log(`🌐 Health check: http://localhost:${PORT}/health`);\r\n-  });\r\n-};\r\n+app.listen(PORT, () => {\r\n+  logger.info(`Server running on port ${PORT} in ${process.env.NODE_ENV} mode`);\r\n+  logger.info(`Health check: http://localhost:${PORT}/health`);\r\n+});\r\n \r\n-// Handle unhandled promise rejections\r\n-process.on('unhandledRejection', (err, promise) => {\r\n-  console.log(`Error: ${err.message}`);\r\n-  // Close server & exit process\r\n-  process.exit(1);\r\n+// Graceful shutdown\r\n+process.on('SIGTERM', () => {\r\n+  logger.info('SIGTERM received. Shutting down gracefully...');\r\n+  process.exit(0);\r\n });\r\n \r\n-startServer(); \n+process.on('SIGINT', () => {\r\n+  logger.info('SIGINT received. Shutting down gracefully...');\r\n+  process.exit(0);\r\n+});\r\n+\r\n+export default app; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752734899689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,11 +51,9 @@\n }));\r\n \r\n // CORS configuration\r\n app.use(cors({\r\n-  origin: process.env.NODE_ENV === 'production' \r\n-    ? [process.env.FRONTEND_URL_PROD] \r\n-    : [process.env.FRONTEND_URL, 'http://localhost:3000'],\r\n+  origin: 'http://localhost:5173',\r\n   credentials: true,\r\n   methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\r\n   allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],\r\n }));\r\n"
                },
                {
                    "date": 1752745905167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,141 +1,55 @@\n import express from 'express';\r\n import cors from 'cors';\r\n-import helmet from 'helmet';\r\n-import compression from 'compression';\r\n-import morgan from 'morgan';\r\n-import rateLimit from 'express-rate-limit';\r\n-import session from 'express-session';\r\n-import MongoStore from 'connect-mongo';\r\n import dotenv from 'dotenv';\r\n import passport from 'passport';\r\n-\r\n-// Import configurations\r\n-import { connectDB } from './config/database.js';\r\n-import { logger } from './config/logger.js';\r\n+import session from 'express-session';\r\n+import mongoose from 'mongoose';\r\n+import authRoutes from './routes/auth.js';\r\n import passportConfig from './config/passport.js';\r\n \r\n-// Import routes\r\n-import authRoutes from './routes/auth.js';\r\n-import userRoutes from './routes/user.js';\r\n-import gameRoutes from './routes/game.js';\r\n-import walletRoutes from './routes/wallet.js';\r\n-\r\n-// Import middleware\r\n-import { errorHandler } from './middleware/errorHandler.js';\r\n-import { notFound } from './middleware/notFound.js';\r\n-\r\n-// Load environment variables\r\n dotenv.config();\r\n \r\n const app = express();\r\n const PORT = process.env.PORT || 8004;\r\n \r\n-// Connect to MongoDB\r\n-connectDB();\r\n+// MongoDB connection\r\n+mongoose.connect(process.env.MONGODB_URI, {\r\n+  useNewUrlParser: true,\r\n+  useUnifiedTopology: true,\r\n+});\r\n \r\n-// Configure passport\r\n-passportConfig(passport);\r\n-\r\n-// Security middleware\r\n-app.use(helmet({\r\n-  crossOriginEmbedderPolicy: false,\r\n-  contentSecurityPolicy: {\r\n-    directives: {\r\n-      defaultSrc: [\"'self'\"],\r\n-      styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://fonts.googleapis.com\"],\r\n-      fontSrc: [\"'self'\", \"https://fonts.gstatic.com\"],\r\n-      imgSrc: [\"'self'\", \"data:\", \"https:\"],\r\n-      scriptSrc: [\"'self'\", \"'unsafe-inline'\", \"'unsafe-eval'\"],\r\n-    },\r\n-  },\r\n-}));\r\n-\r\n-// CORS configuration\r\n+// CORS for frontend\r\n app.use(cors({\r\n-  origin: 'http://localhost:5173',\r\n+  origin: process.env.FRONTEND_URL || 'http://localhost:5173',\r\n   credentials: true,\r\n-  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\r\n-  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],\r\n }));\r\n \r\n-// Rate limiting\r\n-const limiter = rateLimit({\r\n-  windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS) || 15 * 60 * 1000, // 15 minutes\r\n-  max: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS) || 100, // limit each IP to 100 requests per windowMs\r\n-  message: {\r\n-    error: 'Too many requests from this IP, please try again later.',\r\n-  },\r\n-  standardHeaders: true,\r\n-  legacyHeaders: false,\r\n-});\r\n+app.use(express.json());\r\n+app.use(express.urlencoded({ extended: true }));\r\n \r\n-app.use('/api/', limiter);\r\n-\r\n-// Body parsing middleware\r\n-app.use(express.json({ limit: '10mb' }));\r\n-app.use(express.urlencoded({ extended: true, limit: '10mb' }));\r\n-\r\n-// Compression middleware\r\n-app.use(compression());\r\n-\r\n-// Logging middleware\r\n-app.use(morgan('combined', { stream: { write: message => logger.info(message.trim()) } }));\r\n-\r\n-// Session configuration\r\n+// Session (for OAuth)\r\n app.use(session({\r\n-  secret: process.env.SESSION_SECRET || 'your-secret-key',\r\n+  secret: process.env.SESSION_SECRET || 'secret',\r\n   resave: false,\r\n   saveUninitialized: false,\r\n-  store: MongoStore.create({\r\n-    mongoUrl: process.env.MONGODB_URI,\r\n-    ttl: 24 * 60 * 60, // 1 day\r\n-  }),\r\n-  cookie: {\r\n-    secure: process.env.NODE_ENV === 'production',\r\n-    httpOnly: true,\r\n-    maxAge: 24 * 60 * 60 * 1000, // 1 day\r\n-  },\r\n }));\r\n \r\n-// Initialize passport\r\n+// Passport\r\n+passportConfig(passport);\r\n app.use(passport.initialize());\r\n app.use(passport.session());\r\n \r\n-// Health check endpoint\r\n-app.get('/health', (req, res) => {\r\n-  res.status(200).json({\r\n-    status: 'OK',\r\n-    timestamp: new Date().toISOString(),\r\n-    uptime: process.uptime(),\r\n-    environment: process.env.NODE_ENV,\r\n+// Routes\r\n+app.use('/api/v1/auth', authRoutes);\r\n+\r\n+// Error handler\r\n+app.use((err, req, res, next) => {\r\n+  res.status(err.status || 500).json({\r\n+    success: false,\r\n+    error: err.message || 'Server error',\r\n   });\r\n });\r\n \r\n-// API routes\r\n-app.use('/api/v1/auth', authRoutes);\r\n-app.use('/api/v1/user', userRoutes);\r\n-app.use('/api/v1/game', gameRoutes);\r\n\\ No newline at end of file\n-app.use('/api/v1/wallet', walletRoutes);\r\n-\r\n-// Error handling middleware\r\n-app.use(notFound);\r\n-app.use(errorHandler);\r\n-\r\n-// Start server\r\n app.listen(PORT, () => {\r\n-  logger.info(`Server running on port ${PORT} in ${process.env.NODE_ENV} mode`);\r\n-  logger.info(`Health check: http://localhost:${PORT}/health`);\r\n-});\r\n-\r\n-// Graceful shutdown\r\n-process.on('SIGTERM', () => {\r\n-  logger.info('SIGTERM received. Shutting down gracefully...');\r\n-  process.exit(0);\r\n-});\r\n-\r\n-process.on('SIGINT', () => {\r\n-  logger.info('SIGINT received. Shutting down gracefully...');\r\n-  process.exit(0);\r\n-});\r\n-\r\n-export default app; \n+  console.log(`Auth server running on http://localhost:${PORT}`);\r\n+}); \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752752111670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,12 +5,21 @@\n import session from 'express-session';\r\n import mongoose from 'mongoose';\r\n import authRoutes from './routes/auth.js';\r\n import passportConfig from './config/passport.js';\r\n+import http from 'http';\r\n+import { Server as SocketIOServer } from 'socket.io';\r\n \r\n dotenv.config();\r\n \r\n const app = express();\r\n+const server = http.createServer(app);\r\n+const io = new SocketIOServer(server, {\r\n+  cors: {\r\n+    origin: process.env.FRONTEND_URL || 'http://localhost:5173',\r\n+    credentials: true,\r\n+  },\r\n+});\r\n const PORT = process.env.PORT || 8004;\r\n \r\n // MongoDB connection\r\n mongoose.connect(process.env.MONGODB_URI, {\r\n@@ -41,15 +50,36 @@\n \r\n // Routes\r\n app.use('/api/v1/auth', authRoutes);\r\n \r\n+// --- Live Chat Logic ---\r\n+const offensiveWords = ['badword1', 'badword2']; // Add your list\r\n+function isOffensive(text) {\r\n+  return offensiveWords.some(word => text.toLowerCase().includes(word));\r\n+}\r\n+let messages = [];\r\n+\r\n+io.on('connection', (socket) => {\r\n+  socket.emit('chat_history', messages);\r\n+  socket.on('send_message', (msg) => {\r\n+    let messageObj;\r\n+    if (isOffensive(msg.text)) {\r\n+      messageObj = { ...msg, text: 'Deleted because of offensive content', offensive: true };\r\n+    } else {\r\n+      messageObj = { ...msg, offensive: false };\r\n+    }\r\n+    messages.push(messageObj);\r\n+    io.emit('receive_message', messageObj);\r\n+  });\r\n+});\r\n+\r\n // Error handler\r\n app.use((err, req, res, next) => {\r\n   res.status(err.status || 500).json({\r\n     success: false,\r\n     error: err.message || 'Server error',\r\n   });\r\n });\r\n \r\n-app.listen(PORT, () => {\r\n-  console.log(`Auth server running on http://localhost:${PORT}`);\r\n+server.listen(PORT, () => {\r\n+  console.log(`Server running on http://localhost:${PORT}`);\r\n }); \n\\ No newline at end of file\n"
                }
            ],
            "date": 1752728229743,
            "name": "Commit-0",
            "content": "import express from 'express';\r\nimport mongoose from 'mongoose';\r\nimport cors from 'cors';\r\nimport helmet from 'helmet';\r\nimport compression from 'compression';\r\nimport morgan from 'morgan';\r\nimport rateLimit from 'express-rate-limit';\r\nimport dotenv from 'dotenv';\r\nimport session from 'express-session';\r\nimport MongoStore from 'connect-mongo';\r\n\r\n// Import routes\r\nimport authRoutes from './routes/auth.routes.js';\r\nimport userRoutes from './routes/user.routes.js';\r\nimport gameRoutes from './routes/game.routes.js';\r\nimport walletRoutes from './routes/wallet.routes.js';\r\n\r\n// Import middleware\r\nimport { errorHandler } from './middleware/error.middleware.js';\r\nimport { notFound } from './middleware/notFound.middleware.js';\r\n\r\n// Import passport configuration\r\nimport './config/passport.config.js';\r\n\r\n// Load environment variables\r\ndotenv.config();\r\n\r\nconst app = express();\r\nconst PORT = process.env.PORT || 8004;\r\n\r\n// Security middleware\r\napp.use(helmet({\r\n  contentSecurityPolicy: {\r\n    directives: {\r\n      defaultSrc: [\"'self'\"],\r\n      styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://fonts.googleapis.com\"],\r\n      fontSrc: [\"'self'\", \"https://fonts.gstatic.com\"],\r\n      imgSrc: [\"'self'\", \"data:\", \"https:\"],\r\n      scriptSrc: [\"'self'\", \"'unsafe-inline'\", \"https://www.google.com\"],\r\n    },\r\n  },\r\n}));\r\n\r\n// CORS configuration\r\napp.use(cors({\r\n  origin: process.env.FRONTEND_URL || 'http://localhost:5173',\r\n  credentials: true,\r\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\r\n  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],\r\n}));\r\n\r\n// Rate limiting\r\nconst limiter = rateLimit({\r\n  windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS) || 15 * 60 * 1000, // 15 minutes\r\n  max: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS) || 100, // limit each IP to 100 requests per windowMs\r\n  message: {\r\n    error: 'Too many requests from this IP, please try again later.',\r\n  },\r\n  standardHeaders: true,\r\n  legacyHeaders: false,\r\n});\r\n\r\napp.use('/api/', limiter);\r\n\r\n// Session configuration\r\napp.use(session({\r\n  secret: process.env.SESSION_SECRET || 'your-session-secret',\r\n  resave: false,\r\n  saveUninitialized: false,\r\n  store: MongoStore.create({\r\n    mongoUrl: process.env.MONGODB_URI,\r\n    collectionName: 'sessions',\r\n  }),\r\n  cookie: {\r\n    secure: process.env.NODE_ENV === 'production',\r\n    httpOnly: true,\r\n    maxAge: 24 * 60 * 60 * 1000, // 24 hours\r\n  },\r\n}));\r\n\r\n// Body parsing middleware\r\napp.use(express.json({ limit: '10mb' }));\r\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\r\n\r\n// Compression middleware\r\napp.use(compression());\r\n\r\n// Logging middleware\r\nif (process.env.NODE_ENV === 'development') {\r\n  app.use(morgan('dev'));\r\n} else {\r\n  app.use(morgan('combined'));\r\n}\r\n\r\n// Health check endpoint\r\napp.get('/health', (req, res) => {\r\n  res.status(200).json({\r\n    status: 'OK',\r\n    message: 'Dinero Sweeps API is running',\r\n    timestamp: new Date().toISOString(),\r\n    environment: process.env.NODE_ENV,\r\n  });\r\n});\r\n\r\n// API routes\r\napp.use('/api/v1/auth', authRoutes);\r\napp.use('/api/v1/users', userRoutes);\r\napp.use('/api/v1/games', gameRoutes);\r\napp.use('/api/v1/wallet', walletRoutes);\r\n\r\n// Error handling middleware\r\napp.use(notFound);\r\napp.use(errorHandler);\r\n\r\n// MongoDB connection\r\nconst connectDB = async () => {\r\n  try {\r\n    const conn = await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/dinero_sweeps', {\r\n      useNewUrlParser: true,\r\n      useUnifiedTopology: true,\r\n    });\r\n\r\n    console.log(`MongoDB Connected: ${conn.connection.host}`);\r\n  } catch (error) {\r\n    console.error('MongoDB connection error:', error);\r\n    process.exit(1);\r\n  }\r\n};\r\n\r\n// Start server\r\nconst startServer = async () => {\r\n  await connectDB();\r\n  \r\n  app.listen(PORT, () => {\r\n    console.log(`🚀 Server running on port ${PORT}`);\r\n    console.log(`📊 Environment: ${process.env.NODE_ENV}`);\r\n    console.log(`🌐 Health check: http://localhost:${PORT}/health`);\r\n  });\r\n};\r\n\r\n// Handle unhandled promise rejections\r\nprocess.on('unhandledRejection', (err, promise) => {\r\n  console.log(`Error: ${err.message}`);\r\n  // Close server & exit process\r\n  process.exit(1);\r\n});\r\n\r\nstartServer(); "
        }
    ]
}