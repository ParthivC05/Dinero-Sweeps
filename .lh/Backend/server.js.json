{
    "sourceFile": "backend/server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 60,
            "patches": [
                {
                    "date": 1752728229743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752728845934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,50 +1,61 @@\n import express from 'express';\r\n-import mongoose from 'mongoose';\r\n import cors from 'cors';\r\n import helmet from 'helmet';\r\n import compression from 'compression';\r\n import morgan from 'morgan';\r\n import rateLimit from 'express-rate-limit';\r\n-import dotenv from 'dotenv';\r\n import session from 'express-session';\r\n import MongoStore from 'connect-mongo';\r\n+import dotenv from 'dotenv';\r\n+import passport from 'passport';\r\n \r\n+// Import configurations\r\n+import { connectDB } from './config/database.js';\r\n+import { logger } from './config/logger.js';\r\n+import passportConfig from './config/passport.js';\r\n+\r\n // Import routes\r\n-import authRoutes from './routes/auth.routes.js';\r\n-import userRoutes from './routes/user.routes.js';\r\n-import gameRoutes from './routes/game.routes.js';\r\n-import walletRoutes from './routes/wallet.routes.js';\r\n+import authRoutes from './routes/auth.js';\r\n+import userRoutes from './routes/user.js';\r\n+import gameRoutes from './routes/game.js';\r\n+import walletRoutes from './routes/wallet.js';\r\n \r\n // Import middleware\r\n-import { errorHandler } from './middleware/error.middleware.js';\r\n-import { notFound } from './middleware/notFound.middleware.js';\r\n+import { errorHandler } from './middleware/errorHandler.js';\r\n+import { notFound } from './middleware/notFound.js';\r\n \r\n-// Import passport configuration\r\n-import './config/passport.config.js';\r\n-\r\n // Load environment variables\r\n dotenv.config();\r\n \r\n const app = express();\r\n const PORT = process.env.PORT || 8004;\r\n \r\n+// Connect to MongoDB\r\n+connectDB();\r\n+\r\n+// Configure passport\r\n+passportConfig(passport);\r\n+\r\n // Security middleware\r\n app.use(helmet({\r\n+  crossOriginEmbedderPolicy: false,\r\n   contentSecurityPolicy: {\r\n     directives: {\r\n       defaultSrc: [\"'self'\"],\r\n       styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://fonts.googleapis.com\"],\r\n       fontSrc: [\"'self'\", \"https://fonts.gstatic.com\"],\r\n       imgSrc: [\"'self'\", \"data:\", \"https:\"],\r\n-      scriptSrc: [\"'self'\", \"'unsafe-inline'\", \"https://www.google.com\"],\r\n+      scriptSrc: [\"'self'\", \"'unsafe-inline'\", \"'unsafe-eval'\"],\r\n     },\r\n   },\r\n }));\r\n \r\n // CORS configuration\r\n app.use(cors({\r\n-  origin: process.env.FRONTEND_URL || 'http://localhost:5173',\r\n+  origin: process.env.NODE_ENV === 'production' \r\n+    ? [process.env.FRONTEND_URL_PROD] \r\n+    : [process.env.FRONTEND_URL, 'http://localhost:3000'],\r\n   credentials: true,\r\n   methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\r\n   allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],\r\n }));\r\n@@ -61,88 +72,72 @@\n });\r\n \r\n app.use('/api/', limiter);\r\n \r\n+// Body parsing middleware\r\n+app.use(express.json({ limit: '10mb' }));\r\n+app.use(express.urlencoded({ extended: true, limit: '10mb' }));\r\n+\r\n+// Compression middleware\r\n+app.use(compression());\r\n+\r\n+// Logging middleware\r\n+app.use(morgan('combined', { stream: { write: message => logger.info(message.trim()) } }));\r\n+\r\n // Session configuration\r\n app.use(session({\r\n-  secret: process.env.SESSION_SECRET || 'your-session-secret',\r\n+  secret: process.env.SESSION_SECRET || 'your-secret-key',\r\n   resave: false,\r\n   saveUninitialized: false,\r\n   store: MongoStore.create({\r\n     mongoUrl: process.env.MONGODB_URI,\r\n-    collectionName: 'sessions',\r\n+    ttl: 24 * 60 * 60, // 1 day\r\n   }),\r\n   cookie: {\r\n     secure: process.env.NODE_ENV === 'production',\r\n     httpOnly: true,\r\n-    maxAge: 24 * 60 * 60 * 1000, // 24 hours\r\n+    maxAge: 24 * 60 * 60 * 1000, // 1 day\r\n   },\r\n }));\r\n \r\n-// Body parsing middleware\r\n-app.use(express.json({ limit: '10mb' }));\r\n-app.use(express.urlencoded({ extended: true, limit: '10mb' }));\r\n+// Initialize passport\r\n+app.use(passport.initialize());\r\n+app.use(passport.session());\r\n \r\n-// Compression middleware\r\n-app.use(compression());\r\n-\r\n-// Logging middleware\r\n-if (process.env.NODE_ENV === 'development') {\r\n-  app.use(morgan('dev'));\r\n-} else {\r\n-  app.use(morgan('combined'));\r\n-}\r\n-\r\n // Health check endpoint\r\n app.get('/health', (req, res) => {\r\n   res.status(200).json({\r\n     status: 'OK',\r\n-    message: 'Dinero Sweeps API is running',\r\n     timestamp: new Date().toISOString(),\r\n+    uptime: process.uptime(),\r\n     environment: process.env.NODE_ENV,\r\n   });\r\n });\r\n \r\n // API routes\r\n app.use('/api/v1/auth', authRoutes);\r\n-app.use('/api/v1/users', userRoutes);\r\n-app.use('/api/v1/games', gameRoutes);\r\n+app.use('/api/v1/user', userRoutes);\r\n+app.use('/api/v1/game', gameRoutes);\r\n app.use('/api/v1/wallet', walletRoutes);\r\n \r\n // Error handling middleware\r\n app.use(notFound);\r\n app.use(errorHandler);\r\n \r\n-// MongoDB connection\r\n-const connectDB = async () => {\r\n-  try {\r\n-    const conn = await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/dinero_sweeps', {\r\n-      useNewUrlParser: true,\r\n-      useUnifiedTopology: true,\r\n-    });\r\n-\r\n-    console.log(`MongoDB Connected: ${conn.connection.host}`);\r\n-  } catch (error) {\r\n-    console.error('MongoDB connection error:', error);\r\n-    process.exit(1);\r\n-  }\r\n-};\r\n-\r\n\\ No newline at end of file\n // Start server\r\n-const startServer = async () => {\r\n-  await connectDB();\r\n-  \r\n-  app.listen(PORT, () => {\r\n-    console.log(`🚀 Server running on port ${PORT}`);\r\n-    console.log(`📊 Environment: ${process.env.NODE_ENV}`);\r\n-    console.log(`🌐 Health check: http://localhost:${PORT}/health`);\r\n-  });\r\n-};\r\n+app.listen(PORT, () => {\r\n+  logger.info(`Server running on port ${PORT} in ${process.env.NODE_ENV} mode`);\r\n+  logger.info(`Health check: http://localhost:${PORT}/health`);\r\n+});\r\n \r\n-// Handle unhandled promise rejections\r\n-process.on('unhandledRejection', (err, promise) => {\r\n-  console.log(`Error: ${err.message}`);\r\n-  // Close server & exit process\r\n-  process.exit(1);\r\n+// Graceful shutdown\r\n+process.on('SIGTERM', () => {\r\n+  logger.info('SIGTERM received. Shutting down gracefully...');\r\n+  process.exit(0);\r\n });\r\n \r\n-startServer(); \n+process.on('SIGINT', () => {\r\n+  logger.info('SIGINT received. Shutting down gracefully...');\r\n+  process.exit(0);\r\n+});\r\n+\r\n+export default app; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752734899689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,11 +51,9 @@\n }));\r\n \r\n // CORS configuration\r\n app.use(cors({\r\n-  origin: process.env.NODE_ENV === 'production' \r\n-    ? [process.env.FRONTEND_URL_PROD] \r\n-    : [process.env.FRONTEND_URL, 'http://localhost:3000'],\r\n+  origin: 'http://localhost:5173',\r\n   credentials: true,\r\n   methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\r\n   allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],\r\n }));\r\n"
                },
                {
                    "date": 1752745905167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,141 +1,55 @@\n import express from 'express';\r\n import cors from 'cors';\r\n-import helmet from 'helmet';\r\n-import compression from 'compression';\r\n-import morgan from 'morgan';\r\n-import rateLimit from 'express-rate-limit';\r\n-import session from 'express-session';\r\n-import MongoStore from 'connect-mongo';\r\n import dotenv from 'dotenv';\r\n import passport from 'passport';\r\n-\r\n-// Import configurations\r\n-import { connectDB } from './config/database.js';\r\n-import { logger } from './config/logger.js';\r\n+import session from 'express-session';\r\n+import mongoose from 'mongoose';\r\n+import authRoutes from './routes/auth.js';\r\n import passportConfig from './config/passport.js';\r\n \r\n-// Import routes\r\n-import authRoutes from './routes/auth.js';\r\n-import userRoutes from './routes/user.js';\r\n-import gameRoutes from './routes/game.js';\r\n-import walletRoutes from './routes/wallet.js';\r\n-\r\n-// Import middleware\r\n-import { errorHandler } from './middleware/errorHandler.js';\r\n-import { notFound } from './middleware/notFound.js';\r\n-\r\n-// Load environment variables\r\n dotenv.config();\r\n \r\n const app = express();\r\n const PORT = process.env.PORT || 8004;\r\n \r\n-// Connect to MongoDB\r\n-connectDB();\r\n+// MongoDB connection\r\n+mongoose.connect(process.env.MONGODB_URI, {\r\n+  useNewUrlParser: true,\r\n+  useUnifiedTopology: true,\r\n+});\r\n \r\n-// Configure passport\r\n-passportConfig(passport);\r\n-\r\n-// Security middleware\r\n-app.use(helmet({\r\n-  crossOriginEmbedderPolicy: false,\r\n-  contentSecurityPolicy: {\r\n-    directives: {\r\n-      defaultSrc: [\"'self'\"],\r\n-      styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://fonts.googleapis.com\"],\r\n-      fontSrc: [\"'self'\", \"https://fonts.gstatic.com\"],\r\n-      imgSrc: [\"'self'\", \"data:\", \"https:\"],\r\n-      scriptSrc: [\"'self'\", \"'unsafe-inline'\", \"'unsafe-eval'\"],\r\n-    },\r\n-  },\r\n-}));\r\n-\r\n-// CORS configuration\r\n+// CORS for frontend\r\n app.use(cors({\r\n-  origin: 'http://localhost:5173',\r\n+  origin: process.env.FRONTEND_URL || 'http://localhost:5173',\r\n   credentials: true,\r\n-  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\r\n-  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],\r\n }));\r\n \r\n-// Rate limiting\r\n-const limiter = rateLimit({\r\n-  windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS) || 15 * 60 * 1000, // 15 minutes\r\n-  max: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS) || 100, // limit each IP to 100 requests per windowMs\r\n-  message: {\r\n-    error: 'Too many requests from this IP, please try again later.',\r\n-  },\r\n-  standardHeaders: true,\r\n-  legacyHeaders: false,\r\n-});\r\n+app.use(express.json());\r\n+app.use(express.urlencoded({ extended: true }));\r\n \r\n-app.use('/api/', limiter);\r\n-\r\n-// Body parsing middleware\r\n-app.use(express.json({ limit: '10mb' }));\r\n-app.use(express.urlencoded({ extended: true, limit: '10mb' }));\r\n-\r\n-// Compression middleware\r\n-app.use(compression());\r\n-\r\n-// Logging middleware\r\n-app.use(morgan('combined', { stream: { write: message => logger.info(message.trim()) } }));\r\n-\r\n-// Session configuration\r\n+// Session (for OAuth)\r\n app.use(session({\r\n-  secret: process.env.SESSION_SECRET || 'your-secret-key',\r\n+  secret: process.env.SESSION_SECRET || 'secret',\r\n   resave: false,\r\n   saveUninitialized: false,\r\n-  store: MongoStore.create({\r\n-    mongoUrl: process.env.MONGODB_URI,\r\n-    ttl: 24 * 60 * 60, // 1 day\r\n-  }),\r\n-  cookie: {\r\n-    secure: process.env.NODE_ENV === 'production',\r\n-    httpOnly: true,\r\n-    maxAge: 24 * 60 * 60 * 1000, // 1 day\r\n-  },\r\n }));\r\n \r\n-// Initialize passport\r\n+// Passport\r\n+passportConfig(passport);\r\n app.use(passport.initialize());\r\n app.use(passport.session());\r\n \r\n-// Health check endpoint\r\n-app.get('/health', (req, res) => {\r\n-  res.status(200).json({\r\n-    status: 'OK',\r\n-    timestamp: new Date().toISOString(),\r\n-    uptime: process.uptime(),\r\n-    environment: process.env.NODE_ENV,\r\n+// Routes\r\n+app.use('/api/v1/auth', authRoutes);\r\n+\r\n+// Error handler\r\n+app.use((err, req, res, next) => {\r\n+  res.status(err.status || 500).json({\r\n+    success: false,\r\n+    error: err.message || 'Server error',\r\n   });\r\n });\r\n \r\n-// API routes\r\n-app.use('/api/v1/auth', authRoutes);\r\n-app.use('/api/v1/user', userRoutes);\r\n-app.use('/api/v1/game', gameRoutes);\r\n\\ No newline at end of file\n-app.use('/api/v1/wallet', walletRoutes);\r\n-\r\n-// Error handling middleware\r\n-app.use(notFound);\r\n-app.use(errorHandler);\r\n-\r\n-// Start server\r\n app.listen(PORT, () => {\r\n-  logger.info(`Server running on port ${PORT} in ${process.env.NODE_ENV} mode`);\r\n-  logger.info(`Health check: http://localhost:${PORT}/health`);\r\n-});\r\n-\r\n-// Graceful shutdown\r\n-process.on('SIGTERM', () => {\r\n-  logger.info('SIGTERM received. Shutting down gracefully...');\r\n-  process.exit(0);\r\n-});\r\n-\r\n-process.on('SIGINT', () => {\r\n-  logger.info('SIGINT received. Shutting down gracefully...');\r\n-  process.exit(0);\r\n-});\r\n-\r\n-export default app; \n+  console.log(`Auth server running on http://localhost:${PORT}`);\r\n+}); \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752752111670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,12 +5,21 @@\n import session from 'express-session';\r\n import mongoose from 'mongoose';\r\n import authRoutes from './routes/auth.js';\r\n import passportConfig from './config/passport.js';\r\n+import http from 'http';\r\n+import { Server as SocketIOServer } from 'socket.io';\r\n \r\n dotenv.config();\r\n \r\n const app = express();\r\n+const server = http.createServer(app);\r\n+const io = new SocketIOServer(server, {\r\n+  cors: {\r\n+    origin: process.env.FRONTEND_URL || 'http://localhost:5173',\r\n+    credentials: true,\r\n+  },\r\n+});\r\n const PORT = process.env.PORT || 8004;\r\n \r\n // MongoDB connection\r\n mongoose.connect(process.env.MONGODB_URI, {\r\n@@ -41,15 +50,36 @@\n \r\n // Routes\r\n app.use('/api/v1/auth', authRoutes);\r\n \r\n+// --- Live Chat Logic ---\r\n+const offensiveWords = ['badword1', 'badword2']; // Add your list\r\n+function isOffensive(text) {\r\n+  return offensiveWords.some(word => text.toLowerCase().includes(word));\r\n+}\r\n+let messages = [];\r\n+\r\n+io.on('connection', (socket) => {\r\n+  socket.emit('chat_history', messages);\r\n+  socket.on('send_message', (msg) => {\r\n+    let messageObj;\r\n+    if (isOffensive(msg.text)) {\r\n+      messageObj = { ...msg, text: 'Deleted because of offensive content', offensive: true };\r\n+    } else {\r\n+      messageObj = { ...msg, offensive: false };\r\n+    }\r\n+    messages.push(messageObj);\r\n+    io.emit('receive_message', messageObj);\r\n+  });\r\n+});\r\n+\r\n // Error handler\r\n app.use((err, req, res, next) => {\r\n   res.status(err.status || 500).json({\r\n     success: false,\r\n     error: err.message || 'Server error',\r\n   });\r\n });\r\n \r\n-app.listen(PORT, () => {\r\n-  console.log(`Auth server running on http://localhost:${PORT}`);\r\n+server.listen(PORT, () => {\r\n+  console.log(`Server running on http://localhost:${PORT}`);\r\n }); \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752812943368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import passportConfig from './config/passport.js';\r\n import http from 'http';\r\n import { Server as SocketIOServer } from 'socket.io';\r\n \r\n-dotenv.config();\r\n+require('dotenv').config();\r\n \r\n const app = express();\r\n const server = http.createServer(app);\r\n const io = new SocketIOServer(server, {\r\n"
                },
                {
                    "date": 1752812994939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import passportConfig from './config/passport.js';\r\n import http from 'http';\r\n import { Server as SocketIOServer } from 'socket.io';\r\n \r\n-require('dotenv').config();\r\n+require('dotenv').config(); \r\n \r\n const app = express();\r\n const server = http.createServer(app);\r\n const io = new SocketIOServer(server, {\r\n"
                },
                {
                    "date": 1752813000204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import passportConfig from './config/passport.js';\r\n import http from 'http';\r\n import { Server as SocketIOServer } from 'socket.io';\r\n \r\n-require('dotenv').config(); \r\n+require('dotenv').config();\r\n \r\n const app = express();\r\n const server = http.createServer(app);\r\n const io = new SocketIOServer(server, {\r\n"
                },
                {
                    "date": 1752813034955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,11 +7,10 @@\n import authRoutes from './routes/auth.js';\r\n import passportConfig from './config/passport.js';\r\n import http from 'http';\r\n import { Server as SocketIOServer } from 'socket.io';\r\n+import 'dotenv/config';\r\n \r\n-require('dotenv').config();\r\n-\r\n const app = express();\r\n const server = http.createServer(app);\r\n const io = new SocketIOServer(server, {\r\n   cors: {\r\n"
                },
                {
                    "date": 1752813418689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,14 @@\n // MongoDB connection\r\n mongoose.connect(process.env.MONGODB_URI, {\r\n   useNewUrlParser: true,\r\n   useUnifiedTopology: true,\r\n+})\r\n+.then(() => {\r\n+  console.log('✅ MongoDB connected successfully');\r\n+})\r\n+.catch((err) => {\r\n+  console.error('❌ MongoDB connection error:', err.message);\r\n });\r\n \r\n // CORS for frontend\r\n app.use(cors({\r\n"
                },
                {
                    "date": 1752813779124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import dotenv from 'dotenv';\r\n import passport from 'passport';\r\n import session from 'express-session';\r\n import mongoose from 'mongoose';\r\n+import MongoStore from 'connect-mongo';\r\n import authRoutes from './routes/auth.js';\r\n import passportConfig from './config/passport.js';\r\n import http from 'http';\r\n import { Server as SocketIOServer } from 'socket.io';\r\n@@ -85,6 +86,7 @@\n   });\r\n });\r\n \r\n server.listen(PORT, () => {\r\n-  console.log(`Server running on http://localhost:${PORT}`);\r\n+  console.log(`🚀 Server running on http://localhost:${PORT}`);\r\n+  console.log(`📡 Socket.IO server ready`);\r\n }); \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752813784886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,13 +41,23 @@\n \r\n app.use(express.json());\r\n app.use(express.urlencoded({ extended: true }));\r\n \r\n-// Session (for OAuth)\r\n+// Session (for OAuth) - Using MongoDB store for production\r\n app.use(session({\r\n   secret: process.env.SESSION_SECRET || 'secret',\r\n   resave: false,\r\n   saveUninitialized: false,\r\n+  store: MongoStore.create({\r\n+    mongoUrl: process.env.MONGODB_URI,\r\n+    collectionName: 'sessions',\r\n+    ttl: 24 * 60 * 60, // 1 day\r\n+  }),\r\n+  cookie: {\r\n+    secure: process.env.NODE_ENV === 'production', // Use secure cookies in production\r\n+    httpOnly: true,\r\n+    maxAge: 24 * 60 * 60 * 1000, // 1 day\r\n+  },\r\n }));\r\n \r\n // Passport\r\n passportConfig(passport);\r\n"
                },
                {
                    "date": 1752813798194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n import express from 'express';\r\n import cors from 'cors';\r\n import dotenv from 'dotenv';\r\n import passport from 'passport';\r\n+import helmet from 'helmet';\r\n+import compression from 'compression';\r\n import session from 'express-session';\r\n import mongoose from 'mongoose';\r\n import MongoStore from 'connect-mongo';\r\n import authRoutes from './routes/auth.js';\r\n@@ -12,8 +14,13 @@\n import 'dotenv/config';\r\n \r\n const app = express();\r\n const server = http.createServer(app);\r\n+\r\n+// Production security middleware\r\n+app.use(helmet());\r\n+app.use(compression());\r\n+\r\n const io = new SocketIOServer(server, {\r\n   cors: {\r\n     origin: process.env.FRONTEND_URL || 'http://localhost:5173',\r\n     credentials: true,\r\n"
                },
                {
                    "date": 1752814667350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n });\r\n \r\n // CORS for frontend\r\n app.use(cors({\r\n-  origin: process.env.FRONTEND_URL || 'http://localhost:5173',\r\n+  origin: process.env.FRONTEND_URL || 'http://localhost:5173' || ,\r\n   credentials: true,\r\n }));\r\n \r\n app.use(express.json());\r\n"
                },
                {
                    "date": 1752814674288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n });\r\n \r\n // CORS for frontend\r\n app.use(cors({\r\n-  origin: process.env.FRONTEND_URL || 'http://localhost:5173' || ,\r\n+  origin: process.env.FRONTEND_URL || 'http://localhost:5173' || '',\r\n   credentials: true,\r\n }));\r\n \r\n app.use(express.json());\r\n"
                },
                {
                    "date": 1752814686491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n });\r\n \r\n // CORS for frontend\r\n app.use(cors({\r\n-  origin: process.env.FRONTEND_URL || 'http://localhost:5173' || '',\r\n+  origin: process.env.FRONTEND_URL || 'http://localhost:5173' || 'https://dinero-sweeps.vercel.app/',\r\n   credentials: true,\r\n }));\r\n \r\n app.use(express.json());\r\n"
                },
                {
                    "date": 1752814726326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,11 +19,24 @@\n // Production security middleware\r\n app.use(helmet());\r\n app.use(compression());\r\n \r\n+const allowedOrigins = [\r\n+  'http://localhost:5173',\r\n+  'https://dinero-sweeps.vercel.app'\r\n+];\r\n+\r\n const io = new SocketIOServer(server, {\r\n   cors: {\r\n-    origin: process.env.FRONTEND_URL || 'http://localhost:5173',\r\n+    origin: function (origin, callback) {\r\n+      // allow requests with no origin (like mobile apps, curl, etc.)\r\n+      if (!origin) return callback(null, true);\r\n+      if (allowedOrigins.includes(origin)) {\r\n+        return callback(null, true);\r\n+      } else {\r\n+        return callback(new Error('Not allowed by CORS'));\r\n+      }\r\n+    },\r\n     credentials: true,\r\n   },\r\n });\r\n const PORT = process.env.PORT || 8004;\r\n@@ -41,9 +54,17 @@\n });\r\n \r\n // CORS for frontend\r\n app.use(cors({\r\n-  origin: process.env.FRONTEND_URL || 'http://localhost:5173' || 'https://dinero-sweeps.vercel.app/',\r\n+  origin: function (origin, callback) {\r\n+    // allow requests with no origin (like mobile apps, curl, etc.)\r\n+    if (!origin) return callback(null, true);\r\n+    if (allowedOrigins.includes(origin)) {\r\n+      return callback(null, true);\r\n+    } else {\r\n+      return callback(new Error('Not allowed by CORS'));\r\n+    }\r\n+  },\r\n   credentials: true,\r\n }));\r\n \r\n app.use(express.json());\r\n"
                },
                {
                    "date": 1752814743378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,17 +26,9 @@\n ];\r\n \r\n const io = new SocketIOServer(server, {\r\n   cors: {\r\n-    origin: function (origin, callback) {\r\n-      // allow requests with no origin (like mobile apps, curl, etc.)\r\n-      if (!origin) return callback(null, true);\r\n-      if (allowedOrigins.includes(origin)) {\r\n-        return callback(null, true);\r\n-      } else {\r\n-        return callback(new Error('Not allowed by CORS'));\r\n-      }\r\n-    },\r\n+    origin: allowedOrigins,\r\n     credentials: true,\r\n   },\r\n });\r\n const PORT = process.env.PORT || 8004;\r\n"
                },
                {
                    "date": 1752817532078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,11 +24,29 @@\n   'http://localhost:5173',\r\n   'https://dinero-sweeps.vercel.app'\r\n ];\r\n \r\n+// CORS origin function for both Express and Socket.IO\r\n+const corsOriginFunction = function (origin, callback) {\r\n+  // allow requests with no origin (like mobile apps, curl, etc.)\r\n+  if (!origin) return callback(null, true);\r\n+  if (allowedOrigins.includes(origin)) {\r\n+    return callback(null, true);\r\n+  } else {\r\n+    return callback(new Error('Not allowed by CORS'));\r\n+  }\r\n+};\r\n+\r\n+// Express CORS\r\n+app.use(cors({\r\n+  origin: corsOriginFunction,\r\n+  credentials: true,\r\n+}));\r\n+\r\n+// Socket.IO CORS\r\n const io = new SocketIOServer(server, {\r\n   cors: {\r\n-    origin: allowedOrigins,\r\n+    origin: corsOriginFunction,\r\n     credentials: true,\r\n   },\r\n });\r\n const PORT = process.env.PORT || 8004;\r\n@@ -44,22 +62,8 @@\n .catch((err) => {\r\n   console.error('❌ MongoDB connection error:', err.message);\r\n });\r\n \r\n-// CORS for frontend\r\n-app.use(cors({\r\n-  origin: function (origin, callback) {\r\n-    // allow requests with no origin (like mobile apps, curl, etc.)\r\n-    if (!origin) return callback(null, true);\r\n-    if (allowedOrigins.includes(origin)) {\r\n-      return callback(null, true);\r\n-    } else {\r\n-      return callback(new Error('Not allowed by CORS'));\r\n-    }\r\n-  },\r\n-  credentials: true,\r\n-}));\r\n-\r\n app.use(express.json());\r\n app.use(express.urlencoded({ extended: true }));\r\n \r\n // Session (for OAuth) - Using MongoDB store for production\r\n"
                },
                {
                    "date": 1752835370888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n import passportConfig from './config/passport.js';\r\n import http from 'http';\r\n import { Server as SocketIOServer } from 'socket.io';\r\n import 'dotenv/config';\r\n+import mysql from 'mysql2/promise';\r\n \r\n const app = express();\r\n const server = http.createServer(app);\r\n \r\n@@ -62,8 +63,16 @@\n .catch((err) => {\r\n   console.error('❌ MongoDB connection error:', err.message);\r\n });\r\n \r\n+// SQL Database connection\r\n+export const sqlDb = mysql.createPool({\r\n+  host: process.env.SQL_HOST,\r\n+  user: process.env.SQL_USER,\r\n+  password: process.env.SQL_PASSWORD,\r\n+  database: process.env.SQL_DATABASE,\r\n+});\r\n+\r\n app.use(express.json());\r\n app.use(express.urlencoded({ extended: true }));\r\n \r\n // Session (for OAuth) - Using MongoDB store for production\r\n"
                },
                {
                    "date": 1752836257025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n import http from 'http';\r\n import { Server as SocketIOServer } from 'socket.io';\r\n import 'dotenv/config';\r\n import mysql from 'mysql2/promise';\r\n+import gamesRouter from './routes/games.js';\r\n \r\n const app = express();\r\n const server = http.createServer(app);\r\n \r\n@@ -98,8 +99,9 @@\n app.use(passport.session());\r\n \r\n // Routes\r\n app.use('/api/v1/auth', authRoutes);\r\n+app.use('/api/v1/games', gamesRouter);\r\n \r\n // --- Live Chat Logic ---\r\n const offensiveWords = ['badword1', 'badword2']; // Add your list\r\n function isOffensive(text) {\r\n"
                },
                {
                    "date": 1752836693067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,8 +72,18 @@\n   password: process.env.SQL_PASSWORD,\r\n   database: process.env.SQL_DATABASE,\r\n });\r\n \r\n+// Test SQL connection on startup\r\n+sqlDb.getConnection()\r\n+  .then(conn => {\r\n+    console.log('✅ SQL database connected successfully');\r\n+    conn.release();\r\n+  })\r\n+  .catch(err => {\r\n+    console.error('❌ SQL database connection error:', err.message);\r\n+  });\r\n+\r\n app.use(express.json());\r\n app.use(express.urlencoded({ extended: true }));\r\n \r\n // Session (for OAuth) - Using MongoDB store for production\r\n"
                },
                {
                    "date": 1752836753456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n     console.log('✅ SQL database connected successfully');\r\n     conn.release();\r\n   })\r\n   .catch(err => {\r\n-    console.error('❌ SQL database connection error:', err.message);\r\n+    console.error('❌ SQL database connection error:', err);\r\n   });\r\n \r\n app.use(express.json());\r\n app.use(express.urlencoded({ extended: true }));\r\n"
                },
                {
                    "date": 1752837328338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,10 @@\n import passportConfig from './config/passport.js';\r\n import http from 'http';\r\n import { Server as SocketIOServer } from 'socket.io';\r\n import 'dotenv/config';\r\n-import mysql from 'mysql2/promise';\r\n+import pkg from 'pg';\r\n+const { Pool } = pkg;\r\n import gamesRouter from './routes/games.js';\r\n \r\n const app = express();\r\n const server = http.createServer(app);\r\n@@ -65,20 +66,20 @@\n   console.error('❌ MongoDB connection error:', err.message);\r\n });\r\n \r\n // SQL Database connection\r\n-export const sqlDb = mysql.createPool({\r\n+export const sqlDb = new Pool({\r\n   host: process.env.SQL_HOST,\r\n   user: process.env.SQL_USER,\r\n   password: process.env.SQL_PASSWORD,\r\n   database: process.env.SQL_DATABASE,\r\n+  port: process.env.SQL_PORT || 5432,\r\n });\r\n \r\n // Test SQL connection on startup\r\n-sqlDb.getConnection()\r\n-  .then(conn => {\r\n+sqlDb.connect()\r\n+  .then(() => {\r\n     console.log('✅ SQL database connected successfully');\r\n-    conn.release();\r\n   })\r\n   .catch(err => {\r\n     console.error('❌ SQL database connection error:', err);\r\n   });\r\n"
                },
                {
                    "date": 1752842572969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   database: process.env.SQL_DATABASE,\r\n   port: process.env.SQL_PORT || 5432,\r\n });\r\n \r\n-// Test SQL connection on startup\r\n+// Test SQL connection on startup   \r\n sqlDb.connect()\r\n   .then(() => {\r\n     console.log('✅ SQL database connected successfully');\r\n   })\r\n"
                },
                {
                    "date": 1752842578279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,18 +65,16 @@\n .catch((err) => {\r\n   console.error('❌ MongoDB connection error:', err.message);\r\n });\r\n \r\n-// SQL Database connection\r\n export const sqlDb = new Pool({\r\n   host: process.env.SQL_HOST,\r\n   user: process.env.SQL_USER,\r\n   password: process.env.SQL_PASSWORD,\r\n   database: process.env.SQL_DATABASE,\r\n   port: process.env.SQL_PORT || 5432,\r\n });\r\n \r\n-// Test SQL connection on startup   \r\n sqlDb.connect()\r\n   .then(() => {\r\n     console.log('✅ SQL database connected successfully');\r\n   })\r\n"
                },
                {
                    "date": 1752842583664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,8 @@\n \r\n app.use(express.json());\r\n app.use(express.urlencoded({ extended: true }));\r\n \r\n-// Session (for OAuth) - Using MongoDB store for production\r\n app.use(session({\r\n   secret: process.env.SESSION_SECRET || 'secret',\r\n   resave: false,\r\n   saveUninitialized: false,\r\n@@ -101,19 +100,16 @@\n     maxAge: 24 * 60 * 60 * 1000, // 1 day\r\n   },\r\n }));\r\n \r\n-// Passport\r\n passportConfig(passport);\r\n app.use(passport.initialize());\r\n app.use(passport.session());\r\n \r\n-// Routes\r\n app.use('/api/v1/auth', authRoutes);\r\n app.use('/api/v1/games', gamesRouter);\r\n \r\n-// --- Live Chat Logic ---\r\n-const offensiveWords = ['badword1', 'badword2']; // Add your list\r\n+const offensiveWords = ['badword1', 'badword2']; \r\n function isOffensive(text) {\r\n   return offensiveWords.some(word => text.toLowerCase().includes(word));\r\n }\r\n let messages = [];\r\n"
                },
                {
                    "date": 1752842589348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,20 +18,17 @@\n \r\n const app = express();\r\n const server = http.createServer(app);\r\n \r\n-// Production security middleware\r\n app.use(helmet());\r\n app.use(compression());\r\n \r\n const allowedOrigins = [\r\n   'http://localhost:5173',\r\n   'https://dinero-sweeps.vercel.app'\r\n ];\r\n \r\n-// CORS origin function for both Express and Socket.IO\r\n const corsOriginFunction = function (origin, callback) {\r\n-  // allow requests with no origin (like mobile apps, curl, etc.)\r\n   if (!origin) return callback(null, true);\r\n   if (allowedOrigins.includes(origin)) {\r\n     return callback(null, true);\r\n   } else {\r\n@@ -127,9 +124,8 @@\n     io.emit('receive_message', messageObj);\r\n   });\r\n });\r\n \r\n-// Error handler\r\n app.use((err, req, res, next) => {\r\n   res.status(err.status || 500).json({\r\n     success: false,\r\n     error: err.message || 'Server error',\r\n"
                },
                {
                    "date": 1753076764432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,24 +35,21 @@\n     return callback(new Error('Not allowed by CORS'));\r\n   }\r\n };\r\n \r\n-// Express CORS\r\n app.use(cors({\r\n   origin: corsOriginFunction,\r\n   credentials: true,\r\n }));\r\n \r\n-// Socket.IO CORS\r\n const io = new SocketIOServer(server, {\r\n   cors: {\r\n     origin: corsOriginFunction,\r\n     credentials: true,\r\n   },\r\n });\r\n const PORT = process.env.PORT || 8004;\r\n \r\n-// MongoDB connection\r\n mongoose.connect(process.env.MONGODB_URI, {\r\n   useNewUrlParser: true,\r\n   useUnifiedTopology: true,\r\n })\r\n@@ -62,24 +59,8 @@\n .catch((err) => {\r\n   console.error('❌ MongoDB connection error:', err.message);\r\n });\r\n \r\n-export const sqlDb = new Pool({\r\n-  host: process.env.SQL_HOST,\r\n-  user: process.env.SQL_USER,\r\n-  password: process.env.SQL_PASSWORD,\r\n-  database: process.env.SQL_DATABASE,\r\n-  port: process.env.SQL_PORT || 5432,\r\n-});\r\n-\r\n-sqlDb.connect()\r\n-  .then(() => {\r\n-    console.log('✅ SQL database connected successfully');\r\n-  })\r\n-  .catch(err => {\r\n-    console.error('❌ SQL database connection error:', err);\r\n-  });\r\n-\r\n app.use(express.json());\r\n app.use(express.urlencoded({ extended: true }));\r\n \r\n app.use(session({\r\n"
                },
                {
                    "date": 1753077133623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,8 @@\n import passportConfig from './config/passport.js';\r\n import http from 'http';\r\n import { Server as SocketIOServer } from 'socket.io';\r\n import 'dotenv/config';\r\n-import pkg from 'pg';\r\n const { Pool } = pkg;\r\n import gamesRouter from './routes/games.js';\r\n \r\n const app = express();\r\n"
                },
                {
                    "date": 1753077160210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n import passportConfig from './config/passport.js';\r\n import http from 'http';\r\n import { Server as SocketIOServer } from 'socket.io';\r\n import 'dotenv/config';\r\n-const { Pool } = pkg;\r\n+\r\n import gamesRouter from './routes/games.js';\r\n \r\n const app = express();\r\n const server = http.createServer(app);\r\n"
                },
                {
                    "date": 1753094328957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n import { Server as SocketIOServer } from 'socket.io';\r\n import 'dotenv/config';\r\n \r\n import gamesRouter from './routes/games.js';\r\n+import usersRouter from './routes/users.js';\r\n \r\n const app = express();\r\n const server = http.createServer(app);\r\n \r\n@@ -83,8 +84,9 @@\n app.use(passport.session());\r\n \r\n app.use('/api/v1/auth', authRoutes);\r\n app.use('/api/v1/games', gamesRouter);\r\n+app.use('/api/v1/users', usersRouter);\r\n \r\n const offensiveWords = ['badword1', 'badword2']; \r\n function isOffensive(text) {\r\n   return offensiveWords.some(word => text.toLowerCase().includes(word));\r\n"
                },
                {
                    "date": 1753161165579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,107 +14,62 @@\n import 'dotenv/config';\r\n \r\n import gamesRouter from './routes/games.js';\r\n import usersRouter from './routes/users.js';\r\n+import express from 'express';\r\n+import http from 'http';\r\n+import cors from 'cors';\r\n+import mongoose from 'mongoose';\r\n+import jwt from 'jsonwebtoken';\r\n+import { Server as SocketIOServer } from 'socket.io';\r\n+import Message from './models/Message.js';\r\n+import ChatGroup from './models/ChatGroup.js';\r\n \r\n const app = express();\r\n-const server = http.createServer(app);\r\n+app.use(cors());\r\n+app.use(express.json());\r\n \r\n-app.use(helmet());\r\n-app.use(compression());\r\n+mongoose.connect(process.env.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true });\r\n \r\n-const allowedOrigins = [\r\n-  'http://localhost:5173',\r\n-  'https://dinero-sweeps.vercel.app'\r\n-];\r\n+// REST endpoint to get chat history for a group\r\n+app.get('/api/chat/:groupId', async (req, res) => {\r\n+  const messages = await Message.find({ groupId: req.params.groupId }).sort({ createdAt: 1 });\r\n+  res.json(messages);\r\n+});\r\n \r\n-const corsOriginFunction = function (origin, callback) {\r\n-  if (!origin) return callback(null, true);\r\n-  if (allowedOrigins.includes(origin)) {\r\n-    return callback(null, true);\r\n-  } else {\r\n-    return callback(new Error('Not allowed by CORS'));\r\n+const server = http.createServer(app);\r\n+const io = new SocketIOServer(server, { cors: { origin: '*', credentials: true } });\r\n+\r\n+io.of('/user-chat').use(async (socket, next) => {\r\n+  try {\r\n+    const token = socket.handshake.auth.accessToken;\r\n+    if (!token) return next(new Error('Authentication error'));\r\n+    const payload = jwt.verify(token, process.env.JWT_SECRET);\r\n+    socket.user = { userId: payload.id };\r\n+    next();\r\n+  } catch (err) {\r\n+    next(new Error('Authentication error'));\r\n   }\r\n-};\r\n-\r\n-app.use(cors({\r\n-  origin: corsOriginFunction,\r\n-  credentials: true,\r\n-}));\r\n-\r\n-const io = new SocketIOServer(server, {\r\n-  cors: {\r\n-    origin: corsOriginFunction,\r\n-    credentials: true,\r\n-  },\r\n });\r\n-const PORT = process.env.PORT || 8004;\r\n \r\n-mongoose.connect(process.env.MONGODB_URI, {\r\n-  useNewUrlParser: true,\r\n-  useUnifiedTopology: true,\r\n-})\r\n-.then(() => {\r\n-  console.log('✅ MongoDB connected successfully');\r\n-})\r\n-.catch((err) => {\r\n-  console.error('❌ MongoDB connection error:', err.message);\r\n-});\r\n+io.of('/user-chat').on('connection', (socket) => {\r\n+  const groupId = socket.handshake.auth.group || 'global';\r\n+  socket.join(groupId);\r\n \r\n-app.use(express.json());\r\n-app.use(express.urlencoded({ extended: true }));\r\n-\r\n-app.use(session({\r\n-  secret: process.env.SESSION_SECRET || 'secret',\r\n-  resave: false,\r\n-  saveUninitialized: false,\r\n-  store: MongoStore.create({\r\n-    mongoUrl: process.env.MONGODB_URI,\r\n-    collectionName: 'sessions',\r\n-    ttl: 24 * 60 * 60, // 1 day\r\n-  }),\r\n-  cookie: {\r\n-    secure: process.env.NODE_ENV === 'production', // Use secure cookies in production\r\n-    httpOnly: true,\r\n-    maxAge: 24 * 60 * 60 * 1000, // 1 day\r\n-  },\r\n-}));\r\n-\r\n-passportConfig(passport);\r\n-app.use(passport.initialize());\r\n-app.use(passport.session());\r\n-\r\n-app.use('/api/v1/auth', authRoutes);\r\n-app.use('/api/v1/games', gamesRouter);\r\n-app.use('/api/v1/users', usersRouter);\r\n-\r\n\\ No newline at end of file\n-const offensiveWords = ['badword1', 'badword2']; \r\n-function isOffensive(text) {\r\n-  return offensiveWords.some(word => text.toLowerCase().includes(word));\r\n-}\r\n-let messages = [];\r\n-\r\n-io.on('connection', (socket) => {\r\n-  socket.emit('chat_history', messages);\r\n-  socket.on('send_message', (msg) => {\r\n-    let messageObj;\r\n-    if (isOffensive(msg.text)) {\r\n-      messageObj = { ...msg, text: 'Deleted because of offensive content', offensive: true };\r\n-    } else {\r\n-      messageObj = { ...msg, offensive: false };\r\n-    }\r\n-    messages.push(messageObj);\r\n-    io.emit('receive_message', messageObj);\r\n+  socket.on('SEND_MESSAGE', async (data) => {\r\n+    const { message, messageType = 'MESSAGE' } = data;\r\n+    const msg = await Message.create({\r\n+      userId: socket.user.userId,\r\n+      groupId,\r\n+      message,\r\n+      messageType\r\n+    });\r\n+    io.of('/user-chat').to(groupId).emit('LIVE_USERS_CHATS', msg);\r\n   });\r\n-});\r\n \r\n-app.use((err, req, res, next) => {\r\n-  res.status(err.status || 500).json({\r\n-    success: false,\r\n-    error: err.message || 'Server error',\r\n+  socket.on('disconnect', () => {\r\n+    socket.leave(groupId);\r\n   });\r\n });\r\n \r\n-server.listen(PORT, () => {\r\n-  console.log(`🚀 Server running on http://localhost:${PORT}`);\r\n-  console.log(`📡 Socket.IO server ready`);\r\n-}); \n+const PORT = process.env.PORT || 8004;\r\n+server.listen(PORT, () => console.log(`Server running on port ${PORT}`)); \n\\ No newline at end of file\n"
                },
                {
                    "date": 1753161219218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,62 +14,107 @@\n import 'dotenv/config';\r\n \r\n import gamesRouter from './routes/games.js';\r\n import usersRouter from './routes/users.js';\r\n-import express from 'express';\r\n-import http from 'http';\r\n-import cors from 'cors';\r\n-import mongoose from 'mongoose';\r\n-import jwt from 'jsonwebtoken';\r\n-import { Server as SocketIOServer } from 'socket.io';\r\n-import Message from './models/Message.js';\r\n-import ChatGroup from './models/ChatGroup.js';\r\n \r\n const app = express();\r\n-app.use(cors());\r\n-app.use(express.json());\r\n+const server = http.createServer(app);\r\n \r\n-mongoose.connect(process.env.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true });\r\n+app.use(helmet());\r\n+app.use(compression());\r\n \r\n-// REST endpoint to get chat history for a group\r\n-app.get('/api/chat/:groupId', async (req, res) => {\r\n-  const messages = await Message.find({ groupId: req.params.groupId }).sort({ createdAt: 1 });\r\n-  res.json(messages);\r\n-});\r\n+const allowedOrigins = [\r\n+  'http://localhost:5173',\r\n+  'https://dinero-sweeps.vercel.app'\r\n+];\r\n \r\n-const server = http.createServer(app);\r\n-const io = new SocketIOServer(server, { cors: { origin: '*', credentials: true } });\r\n+const corsOriginFunction = function (origin, callback) {\r\n+  if (!origin) return callback(null, true);\r\n+  if (allowedOrigins.includes(origin)) {\r\n+    return callback(null, true);\r\n+  } else {\r\n+    return callback(new Error('Not allowed by CORS'));\r\n+  }\r\n+};\r\n \r\n-io.of('/user-chat').use(async (socket, next) => {\r\n-  try {\r\n-    const token = socket.handshake.auth.accessToken;\r\n-    if (!token) return next(new Error('Authentication error'));\r\n-    const payload = jwt.verify(token, process.env.JWT_SECRET);\r\n-    socket.user = { userId: payload.id };\r\n-    next();\r\n-  } catch (err) {\r\n-    next(new Error('Authentication error'));\r\n-  }\r\n+app.use(cors({\r\n+  origin: corsOriginFunction,\r\n+  credentials: true,\r\n+}));\r\n+\r\n+const io = new SocketIOServer(server, {\r\n+  cors: {\r\n+    origin: corsOriginFunction,\r\n+    credentials: true,\r\n\\ No newline at end of file\n+  },\r\n });\r\n+const PORT = process.env.PORT || 8004;\r\n \r\n-io.of('/user-chat').on('connection', (socket) => {\r\n-  const groupId = socket.handshake.auth.group || 'global';\r\n-  socket.join(groupId);\r\n+mongoose.connect(process.env.MONGODB_URI, {\r\n+  useNewUrlParser: true,\r\n+  useUnifiedTopology: true,\r\n+})\r\n+.then(() => {\r\n+  console.log('✅ MongoDB connected successfully');\r\n+})\r\n+.catch((err) => {\r\n+  console.error('❌ MongoDB connection error:', err.message);\r\n+});\r\n \r\n-  socket.on('SEND_MESSAGE', async (data) => {\r\n-    const { message, messageType = 'MESSAGE' } = data;\r\n-    const msg = await Message.create({\r\n-      userId: socket.user.userId,\r\n-      groupId,\r\n-      message,\r\n-      messageType\r\n-    });\r\n-    io.of('/user-chat').to(groupId).emit('LIVE_USERS_CHATS', msg);\r\n+app.use(express.json());\r\n+app.use(express.urlencoded({ extended: true }));\r\n+\r\n+app.use(session({\r\n+  secret: process.env.SESSION_SECRET || 'secret',\r\n+  resave: false,\r\n+  saveUninitialized: false,\r\n+  store: MongoStore.create({\r\n+    mongoUrl: process.env.MONGODB_URI,\r\n+    collectionName: 'sessions',\r\n+    ttl: 24 * 60 * 60, // 1 day\r\n+  }),\r\n+  cookie: {\r\n+    secure: process.env.NODE_ENV === 'production', // Use secure cookies in production\r\n+    httpOnly: true,\r\n+    maxAge: 24 * 60 * 60 * 1000, // 1 day\r\n+  },\r\n+}));\r\n+\r\n+passportConfig(passport);\r\n+app.use(passport.initialize());\r\n+app.use(passport.session());\r\n+\r\n+app.use('/api/v1/auth', authRoutes);\r\n+app.use('/api/v1/games', gamesRouter);\r\n+app.use('/api/v1/users', usersRouter);\r\n+\r\n+const offensiveWords = ['badword1', 'badword2']; \r\n+function isOffensive(text) {\r\n+  return offensiveWords.some(word => text.toLowerCase().includes(word));\r\n+}\r\n+let messages = [];\r\n+\r\n+io.on('connection', (socket) => {\r\n+  socket.emit('chat_history', messages);\r\n+  socket.on('send_message', (msg) => {\r\n+    let messageObj;\r\n+    if (isOffensive(msg.text)) {\r\n+      messageObj = { ...msg, text: 'Deleted because of offensive content', offensive: true };\r\n+    } else {\r\n+      messageObj = { ...msg, offensive: false };\r\n+    }\r\n+    messages.push(messageObj);\r\n+    io.emit('receive_message', messageObj);\r\n   });\r\n+});\r\n \r\n-  socket.on('disconnect', () => {\r\n-    socket.leave(groupId);\r\n+app.use((err, req, res, next) => {\r\n+  res.status(err.status || 500).json({\r\n+    success: false,\r\n+    error: err.message || 'Server error',\r\n   });\r\n });\r\n \r\n-const PORT = process.env.PORT || 8004;\r\n-server.listen(PORT, () => console.log(`Server running on port ${PORT}`)); \n+server.listen(PORT, () => {\r\n+  console.log(`🚀 Server running on http://localhost:${PORT}`);\r\n+  console.log(`📡 Socket.IO server ready`);\r\n+}); \n\\ No newline at end of file\n"
                },
                {
                    "date": 1753161271073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,11 @@\n import 'dotenv/config';\r\n \r\n import gamesRouter from './routes/games.js';\r\n import usersRouter from './routes/users.js';\r\n+import Message from './models/Message.js';\r\n+import ChatGroup from './models/ChatGroup.js';\r\n+import jwt from 'jsonwebtoken';\r\n \r\n const app = express();\r\n const server = http.createServer(app);\r\n \r\n@@ -46,8 +49,47 @@\n     origin: corsOriginFunction,\r\n     credentials: true,\r\n   },\r\n });\r\n+\r\n+// REST endpoint to get chat history for a group\r\n+app.get('/api/chat/:groupId', async (req, res) => {\r\n+  const messages = await Message.find({ groupId: req.params.groupId }).sort({ createdAt: 1 });\r\n+  res.json(messages);\r\n+});\r\n+\r\n+io.of('/user-chat').use(async (socket, next) => {\r\n+  try {\r\n+    const token = socket.handshake.auth.accessToken;\r\n+    if (!token) return next(new Error('Authentication error'));\r\n+    const payload = jwt.verify(token, process.env.JWT_SECRET);\r\n+    socket.user = { userId: payload.id };\r\n+    next();\r\n+  } catch (err) {\r\n+    next(new Error('Authentication error'));\r\n+  }\r\n+});\r\n+\r\n+io.of('/user-chat').on('connection', (socket) => {\r\n+  const groupId = socket.handshake.auth.group || 'global';\r\n+  socket.join(groupId);\r\n+\r\n+  socket.on('SEND_MESSAGE', async (data) => {\r\n+    const { message, messageType = 'MESSAGE' } = data;\r\n+    const msg = await Message.create({\r\n+      userId: socket.user.userId,\r\n+      groupId,\r\n+      message,\r\n+      messageType\r\n+    });\r\n+    io.of('/user-chat').to(groupId).emit('LIVE_USERS_CHATS', msg);\r\n+  });\r\n+\r\n+  socket.on('disconnect', () => {\r\n+    socket.leave(groupId);\r\n+  });\r\n+});\r\n+\r\n const PORT = process.env.PORT || 8004;\r\n \r\n mongoose.connect(process.env.MONGODB_URI, {\r\n   useNewUrlParser: true,\r\n"
                },
                {
                    "date": 1753161308441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,10 @@\n import 'dotenv/config';\r\n \r\n import gamesRouter from './routes/games.js';\r\n import usersRouter from './routes/users.js';\r\n-import Message from './models/Message.js';\r\n-import ChatGroup from './models/ChatGroup.js';\r\n+import Message from './models/message.js';\r\n+import ChatGroup from './models/chatGroup.js';\r\n import jwt from 'jsonwebtoken';\r\n \r\n const app = express();\r\n const server = http.createServer(app);\r\n"
                },
                {
                    "date": 1753161345224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,11 +13,9 @@\n import { Server as SocketIOServer } from 'socket.io';\r\n import 'dotenv/config';\r\n \r\n import gamesRouter from './routes/games.js';\r\n-import usersRouter from './routes/users.js';\r\n-import Message from './models/message.js';\r\n-import ChatGroup from './models/chatGroup.js';\r\n+import ChatGroup from './models/ChatGroup.js';\r\n import jwt from 'jsonwebtoken';\r\n \r\n const app = express();\r\n const server = http.createServer(app);\r\n"
                },
                {
                    "date": 1753161353293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,11 @@\n import { Server as SocketIOServer } from 'socket.io';\r\n import 'dotenv/config';\r\n \r\n import gamesRouter from './routes/games.js';\r\n-import ChatGroup from './models/ChatGroup.js';\r\n+import usersRouter from './routes/users.js';\r\n+import Message from './models/message.js';\r\n+import ChatGroup from './models/chatGroup.js';\r\n import jwt from 'jsonwebtoken';\r\n \r\n const app = express();\r\n const server = http.createServer(app);\r\n"
                },
                {
                    "date": 1753161359830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \r\n import gamesRouter from './routes/games.js';\r\n import usersRouter from './routes/users.js';\r\n import Message from './models/message.js';\r\n-import ChatGroup from './models/chatGroup.js';\r\n+import ChatGroup from './models/ChatGroup.js';\r\n import jwt from 'jsonwebtoken';\r\n \r\n const app = express();\r\n const server = http.createServer(app);\r\n"
                },
                {
                    "date": 1753161421000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,8 @@\n import 'dotenv/config';\r\n \r\n import gamesRouter from './routes/games.js';\r\n import usersRouter from './routes/users.js';\r\n-import Message from './models/message.js';\r\n-import ChatGroup from './models/ChatGroup.js';\r\n import jwt from 'jsonwebtoken';\r\n \r\n const app = express();\r\n const server = http.createServer(app);\r\n"
                },
                {
                    "date": 1753161451459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n });\r\n \r\n // REST endpoint to get chat history for a group\r\n app.get('/api/chat/:groupId', async (req, res) => {\r\n-  const messages = await Message.find({ groupId: req.params.groupId }).sort({ createdAt: 1 });\r\n+  const messages = await MessageSche.find({ groupId: req.params.groupId }).sort({ createdAt: 1 });\r\n   res.json(messages);\r\n });\r\n \r\n io.of('/user-chat').use(async (socket, next) => {\r\n"
                },
                {
                    "date": 1753161457376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n });\r\n \r\n // REST endpoint to get chat history for a group\r\n app.get('/api/chat/:groupId', async (req, res) => {\r\n-  const messages = await MessageSche.find({ groupId: req.params.groupId }).sort({ createdAt: 1 });\r\n+  const messages = await .find({ groupId: req.params.groupId }).sort({ createdAt: 1 });\r\n   res.json(messages);\r\n });\r\n \r\n io.of('/user-chat').use(async (socket, next) => {\r\n"
                },
                {
                    "date": 1753161467484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n });\r\n \r\n // REST endpoint to get chat history for a group\r\n app.get('/api/chat/:groupId', async (req, res) => {\r\n-  const messages = await .find({ groupId: req.params.groupId }).sort({ createdAt: 1 });\r\n+  const messages = await Message.find({ groupId: req.params.groupId }).sort({ createdAt: 1 });\r\n   res.json(messages);\r\n });\r\n \r\n io.of('/user-chat').use(async (socket, next) => {\r\n"
                },
                {
                    "date": 1753161548263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n });\r\n \r\n // REST endpoint to get chat history for a group\r\n app.get('/api/chat/:groupId', async (req, res) => {\r\n-  const messages = await Message.find({ groupId: req.params.groupId }).sort({ createdAt: 1 });\r\n+  const messages = await Messa.find({ groupId: req.params.groupId }).sort({ createdAt: 1 });\r\n   res.json(messages);\r\n });\r\n \r\n io.of('/user-chat').use(async (socket, next) => {\r\n"
                },
                {
                    "date": 1753161558676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n \r\n import gamesRouter from './routes/games.js';\r\n import usersRouter from './routes/users.js';\r\n import jwt from 'jsonwebtoken';\r\n+import message from './models/message.js';\r\n \r\n const app = express();\r\n const server = http.createServer(app);\r\n \r\n@@ -50,9 +51,9 @@\n });\r\n \r\n // REST endpoint to get chat history for a group\r\n app.get('/api/chat/:groupId', async (req, res) => {\r\n-  const messages = await Messa.find({ groupId: req.params.groupId }).sort({ createdAt: 1 });\r\n+  const messages = await message.find({ groupId: req.params.groupId }).sort({ createdAt: 1 });\r\n   res.json(messages);\r\n });\r\n \r\n io.of('/user-chat').use(async (socket, next) => {\r\n"
                },
                {
                    "date": 1753161576623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n   socket.join(groupId);\r\n \r\n   socket.on('SEND_MESSAGE', async (data) => {\r\n     const { message, messageType = 'MESSAGE' } = data;\r\n-    const msg = await Message.create({\r\n+    const msg = await message.create({\r\n       userId: socket.user.userId,\r\n       groupId,\r\n       message,\r\n       messageType\r\n"
                },
                {
                    "date": 1753161727616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n import gamesRouter from './routes/games.js';\r\n import usersRouter from './routes/users.js';\r\n import jwt from 'jsonwebtoken';\r\n import message from './models/message.js';\r\n+import chatGroup from './models/chatGroup.js';\r\n \r\n const app = express();\r\n const server = http.createServer(app);\r\n \r\n"
                },
                {
                    "date": 1753161733532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n import gamesRouter from './routes/games.js';\r\n import usersRouter from './routes/users.js';\r\n import jwt from 'jsonwebtoken';\r\n import message from './models/message.js';\r\n-import chatGroup from './models/chatGroup.js';\r\n+import chatGroup from './models/ChatGroup.js';\r\n \r\n const app = express();\r\n const server = http.createServer(app);\r\n \r\n"
                },
                {
                    "date": 1753161739525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,14 +11,14 @@\n import passportConfig from './config/passport.js';\r\n import http from 'http';\r\n import { Server as SocketIOServer } from 'socket.io';\r\n import 'dotenv/config';\r\n-\r\n+import ChatGroup from './models/ChatGroup.js';\r\n import gamesRouter from './routes/games.js';\r\n import usersRouter from './routes/users.js';\r\n import jwt from 'jsonwebtoken';\r\n import message from './models/message.js';\r\n-import chatGroup from './models/ChatGroup.js';\r\n+import ChatGroup from './models/ChatGroup.js';\r\n \r\n const app = express();\r\n const server = http.createServer(app);\r\n \r\n"
                },
                {
                    "date": 1753161787139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,14 +11,12 @@\n import passportConfig from './config/passport.js';\r\n import http from 'http';\r\n import { Server as SocketIOServer } from 'socket.io';\r\n import 'dotenv/config';\r\n-import ChatGroup from './models/ChatGroup.js';\r\n-import gamesRouter from './routes/games.js';\r\n+import gamesRouter from './routes/games.js';  \r\n import usersRouter from './routes/users.js';\r\n import jwt from 'jsonwebtoken';\r\n import message from './models/message.js';\r\n-import ChatGroup from './models/ChatGroup.js';\r\n \r\n const app = express();\r\n const server = http.createServer(app);\r\n \r\n"
                },
                {
                    "date": 1753161802997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,8 @@\n     credentials: true,\r\n   },\r\n });\r\n \r\n-// REST endpoint to get chat history for a group\r\n app.get('/api/chat/:groupId', async (req, res) => {\r\n   const messages = await message.find({ groupId: req.params.groupId }).sort({ createdAt: 1 });\r\n   res.json(messages);\r\n });\r\n"
                },
                {
                    "date": 1753161857097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,10 @@\n import 'dotenv/config';\r\n import gamesRouter from './routes/games.js';  \r\n import usersRouter from './routes/users.js';\r\n import jwt from 'jsonwebtoken';\r\n-import message from './models/message.js';\r\n+import Message from './models/Message.js';\r\n+import ChatGroup from './models/ChatGroup.js';\r\n \r\n const app = express();\r\n const server = http.createServer(app);\r\n \r\n@@ -49,9 +50,9 @@\n   },\r\n });\r\n \r\n app.get('/api/chat/:groupId', async (req, res) => {\r\n-  const messages = await message.find({ groupId: req.params.groupId }).sort({ createdAt: 1 });\r\n+  const messages = await Message.find({ groupId: req.params.groupId }).sort({ createdAt: 1 });\r\n   res.json(messages);\r\n });\r\n \r\n io.of('/user-chat').use(async (socket, next) => {\r\n@@ -71,9 +72,9 @@\n   socket.join(groupId);\r\n \r\n   socket.on('SEND_MESSAGE', async (data) => {\r\n     const { message, messageType = 'MESSAGE' } = data;\r\n-    const msg = await message.create({\r\n+    const msg = await Message.create({\r\n       userId: socket.user.userId,\r\n       groupId,\r\n       message,\r\n       messageType\r\n"
                },
                {
                    "date": 1753161933548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n import 'dotenv/config';\r\n import gamesRouter from './routes/games.js';  \r\n import usersRouter from './routes/users.js';\r\n import jwt from 'jsonwebtoken';\r\n-import Message from './models/Message.js';\r\n+import Message from './models/message.js';\r\n import ChatGroup from './models/ChatGroup.js';\r\n \r\n const app = express();\r\n const server = http.createServer(app);\r\n"
                },
                {
                    "date": 1753176702519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,23 +130,28 @@\n const offensiveWords = ['badword1', 'badword2']; \r\n function isOffensive(text) {\r\n   return offensiveWords.some(word => text.toLowerCase().includes(word));\r\n }\r\n+// --- Chat Feature: Global Room, No JWT ---\r\n let messages = [];\r\n \r\n io.on('connection', (socket) => {\r\n+  // Send chat history to the new client\r\n   socket.emit('chat_history', messages);\r\n+\r\n+  // Listen for new messages\r\n   socket.on('send_message', (msg) => {\r\n     let messageObj;\r\n     if (isOffensive(msg.text)) {\r\n       messageObj = { ...msg, text: 'Deleted because of offensive content', offensive: true };\r\n     } else {\r\n       messageObj = { ...msg, offensive: false };\r\n     }\r\n     messages.push(messageObj);\r\n-    io.emit('receive_message', messageObj);\r\n+    io.emit('receive_message', messageObj); // Broadcast to all clients\r\n   });\r\n });\r\n+// --- End Chat Feature ---\r\n \r\n app.use((err, req, res, next) => {\r\n   res.status(err.status || 500).json({\r\n     success: false,\r\n"
                },
                {
                    "date": 1753177036178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,22 +133,24 @@\n }\r\n // --- Chat Feature: Global Room, No JWT ---\r\n let messages = [];\r\n \r\n-io.on('connection', (socket) => {\r\n-  // Send chat history to the new client\r\n+io.on('connection', async (socket) => {\r\n+  // Fetch last 100 messages from MongoDB\r\n+  const messages = await Message.find({}).sort({ createdAt: 1 }).limit(100);\r\n   socket.emit('chat_history', messages);\r\n \r\n-  // Listen for new messages\r\n-  socket.on('send_message', (msg) => {\r\n-    let messageObj;\r\n-    if (isOffensive(msg.text)) {\r\n-      messageObj = { ...msg, text: 'Deleted because of offensive content', offensive: true };\r\n-    } else {\r\n-      messageObj = { ...msg, offensive: false };\r\n-    }\r\n-    messages.push(messageObj);\r\n-    io.emit('receive_message', messageObj); // Broadcast to all clients\r\n+  socket.on('send_message', async (msg) => {\r\n+    // You should get user info from session/JWT in production\r\n+    // For demo, expect msg to include username and userId\r\n+    const messageObj = {\r\n+      userId: msg.userId || 'anonymous',\r\n+      username: msg.username || 'Anonymous',\r\n+      message: msg.text,\r\n+      messageType: 'MESSAGE'\r\n+    };\r\n+    const saved = await Message.create(messageObj);\r\n+    io.emit('receive_message', saved); // Broadcast the saved message\r\n   });\r\n });\r\n // --- End Chat Feature ---\r\n \r\n"
                },
                {
                    "date": 1753178545827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,23 +134,21 @@\n // --- Chat Feature: Global Room, No JWT ---\r\n let messages = [];\r\n \r\n io.on('connection', async (socket) => {\r\n-  // Fetch last 100 messages from MongoDB\r\n   const messages = await Message.find({}).sort({ createdAt: 1 }).limit(100);\r\n   socket.emit('chat_history', messages);\r\n \r\n   socket.on('send_message', async (msg) => {\r\n-    // You should get user info from session/JWT in production\r\n-    // For demo, expect msg to include username and userId\r\n     const messageObj = {\r\n       userId: msg.userId || 'anonymous',\r\n       username: msg.username || 'Anonymous',\r\n       message: msg.text,\r\n       messageType: 'MESSAGE'\r\n     };\r\n     const saved = await Message.create(messageObj);\r\n-    io.emit('receive_message', saved); // Broadcast the saved message\r\n+    console.log('Saved to MongoDB:', saved);\r\n+    io.emit('receive_message', saved);\r\n   });\r\n });\r\n // --- End Chat Feature ---\r\n \r\n"
                },
                {
                    "date": 1753179548810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,38 +54,23 @@\n   const messages = await Message.find({ groupId: req.params.groupId }).sort({ createdAt: 1 });\r\n   res.json(messages);\r\n });\r\n \r\n-io.of('/user-chat').use(async (socket, next) => {\r\n-  try {\r\n-    const token = socket.handshake.auth.accessToken;\r\n-    if (!token) return next(new Error('Authentication error'));\r\n-    const payload = jwt.verify(token, process.env.JWT_SECRET);\r\n-    socket.user = { userId: payload.id };\r\n-    next();\r\n-  } catch (err) {\r\n-    next(new Error('Authentication error'));\r\n-  }\r\n-});\r\n+io.on('connection', async (socket) => {\r\n+  const messages = await Message.find({}).sort({ createdAt: 1 }).limit(100);\r\n+  socket.emit('chat_history', messages);\r\n \r\n-io.of('/user-chat').on('connection', (socket) => {\r\n-  const groupId = socket.handshake.auth.group || 'global';\r\n-  socket.join(groupId);\r\n-\r\n-  socket.on('SEND_MESSAGE', async (data) => {\r\n-    const { message, messageType = 'MESSAGE' } = data;\r\n-    const msg = await Message.create({\r\n-      userId: socket.user.userId,\r\n-      groupId,\r\n-      message,\r\n-      messageType\r\n-    });\r\n-    io.of('/user-chat').to(groupId).emit('LIVE_USERS_CHATS', msg);\r\n+  socket.on('send_message', async (msg) => {\r\n+    const messageObj = {\r\n+      userId: msg.userId || 'anonymous',\r\n+      username: msg.username || 'Anonymous',\r\n+      message: msg.text,\r\n+      messageType: 'MESSAGE'\r\n+    };\r\n+    const saved = await Message.create(messageObj);\r\n+    console.log('Saved to MongoDB:', saved);\r\n+    io.emit('receive_message', saved);\r\n   });\r\n-\r\n-  socket.on('disconnect', () => {\r\n-    socket.leave(groupId);\r\n-  });\r\n });\r\n \r\n const PORT = process.env.PORT || 8004;\r\n \r\n@@ -112,9 +97,9 @@\n     collectionName: 'sessions',\r\n     ttl: 24 * 60 * 60, // 1 day\r\n   }),\r\n   cookie: {\r\n-    secure: process.env.NODE_ENV === 'production', // Use secure cookies in production\r\n+    secure: process.env.NODE_ENV === 'production', \r\n     httpOnly: true,\r\n     maxAge: 24 * 60 * 60 * 1000, // 1 day\r\n   },\r\n }));\r\n"
                },
                {
                    "date": 1753179555927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,14 +94,14 @@\n   saveUninitialized: false,\r\n   store: MongoStore.create({\r\n     mongoUrl: process.env.MONGODB_URI,\r\n     collectionName: 'sessions',\r\n-    ttl: 24 * 60 * 60, // 1 day\r\n+    ttl: 24 * 60 * 60, \r\n   }),\r\n   cookie: {\r\n     secure: process.env.NODE_ENV === 'production', \r\n     httpOnly: true,\r\n-    maxAge: 24 * 60 * 60 * 1000, // 1 day\r\n+    maxAge: 24 * 60 * 60 * 1000, \r\n   },\r\n }));\r\n \r\n passportConfig(passport);\r\n"
                },
                {
                    "date": 1753179561067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,9 +134,8 @@\n     console.log('Saved to MongoDB:', saved);\r\n     io.emit('receive_message', saved);\r\n   });\r\n });\r\n-// --- End Chat Feature ---\r\n \r\n app.use((err, req, res, next) => {\r\n   res.status(err.status || 500).json({\r\n     success: false,\r\n"
                },
                {
                    "date": 1753181263824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n import 'dotenv/config';\r\n import gamesRouter from './routes/games.js';  \r\n import usersRouter from './routes/users.js';\r\n import jwt from 'jsonwebtoken';\r\n-import Message from './models/message.js';\r\n+import Message from './models/Message.js';\r\n import ChatGroup from './models/ChatGroup.js';\r\n \r\n const app = express();\r\n const server = http.createServer(app);\r\n@@ -115,11 +115,10 @@\n const offensiveWords = ['badword1', 'badword2']; \r\n function isOffensive(text) {\r\n   return offensiveWords.some(word => text.toLowerCase().includes(word));\r\n }\r\n-// --- Chat Feature: Global Room, No JWT ---\r\n-let messages = [];\r\n \r\n+\r\n io.on('connection', async (socket) => {\r\n   const messages = await Message.find({}).sort({ createdAt: 1 }).limit(100);\r\n   socket.emit('chat_history', messages);\r\n \r\n"
                },
                {
                    "date": 1753181286850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n import 'dotenv/config';\r\n import gamesRouter from './routes/games.js';  \r\n import usersRouter from './routes/users.js';\r\n import jwt from 'jsonwebtoken';\r\n-import Message from './models/Message.js';\r\n+import Message from './models/Message.js';  \r\n import ChatGroup from './models/ChatGroup.js';\r\n \r\n const app = express();\r\n const server = http.createServer(app);\r\n"
                }
            ],
            "date": 1752728229743,
            "name": "Commit-0",
            "content": "import express from 'express';\r\nimport mongoose from 'mongoose';\r\nimport cors from 'cors';\r\nimport helmet from 'helmet';\r\nimport compression from 'compression';\r\nimport morgan from 'morgan';\r\nimport rateLimit from 'express-rate-limit';\r\nimport dotenv from 'dotenv';\r\nimport session from 'express-session';\r\nimport MongoStore from 'connect-mongo';\r\n\r\n// Import routes\r\nimport authRoutes from './routes/auth.routes.js';\r\nimport userRoutes from './routes/user.routes.js';\r\nimport gameRoutes from './routes/game.routes.js';\r\nimport walletRoutes from './routes/wallet.routes.js';\r\n\r\n// Import middleware\r\nimport { errorHandler } from './middleware/error.middleware.js';\r\nimport { notFound } from './middleware/notFound.middleware.js';\r\n\r\n// Import passport configuration\r\nimport './config/passport.config.js';\r\n\r\n// Load environment variables\r\ndotenv.config();\r\n\r\nconst app = express();\r\nconst PORT = process.env.PORT || 8004;\r\n\r\n// Security middleware\r\napp.use(helmet({\r\n  contentSecurityPolicy: {\r\n    directives: {\r\n      defaultSrc: [\"'self'\"],\r\n      styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://fonts.googleapis.com\"],\r\n      fontSrc: [\"'self'\", \"https://fonts.gstatic.com\"],\r\n      imgSrc: [\"'self'\", \"data:\", \"https:\"],\r\n      scriptSrc: [\"'self'\", \"'unsafe-inline'\", \"https://www.google.com\"],\r\n    },\r\n  },\r\n}));\r\n\r\n// CORS configuration\r\napp.use(cors({\r\n  origin: process.env.FRONTEND_URL || 'http://localhost:5173',\r\n  credentials: true,\r\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\r\n  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],\r\n}));\r\n\r\n// Rate limiting\r\nconst limiter = rateLimit({\r\n  windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS) || 15 * 60 * 1000, // 15 minutes\r\n  max: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS) || 100, // limit each IP to 100 requests per windowMs\r\n  message: {\r\n    error: 'Too many requests from this IP, please try again later.',\r\n  },\r\n  standardHeaders: true,\r\n  legacyHeaders: false,\r\n});\r\n\r\napp.use('/api/', limiter);\r\n\r\n// Session configuration\r\napp.use(session({\r\n  secret: process.env.SESSION_SECRET || 'your-session-secret',\r\n  resave: false,\r\n  saveUninitialized: false,\r\n  store: MongoStore.create({\r\n    mongoUrl: process.env.MONGODB_URI,\r\n    collectionName: 'sessions',\r\n  }),\r\n  cookie: {\r\n    secure: process.env.NODE_ENV === 'production',\r\n    httpOnly: true,\r\n    maxAge: 24 * 60 * 60 * 1000, // 24 hours\r\n  },\r\n}));\r\n\r\n// Body parsing middleware\r\napp.use(express.json({ limit: '10mb' }));\r\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\r\n\r\n// Compression middleware\r\napp.use(compression());\r\n\r\n// Logging middleware\r\nif (process.env.NODE_ENV === 'development') {\r\n  app.use(morgan('dev'));\r\n} else {\r\n  app.use(morgan('combined'));\r\n}\r\n\r\n// Health check endpoint\r\napp.get('/health', (req, res) => {\r\n  res.status(200).json({\r\n    status: 'OK',\r\n    message: 'Dinero Sweeps API is running',\r\n    timestamp: new Date().toISOString(),\r\n    environment: process.env.NODE_ENV,\r\n  });\r\n});\r\n\r\n// API routes\r\napp.use('/api/v1/auth', authRoutes);\r\napp.use('/api/v1/users', userRoutes);\r\napp.use('/api/v1/games', gameRoutes);\r\napp.use('/api/v1/wallet', walletRoutes);\r\n\r\n// Error handling middleware\r\napp.use(notFound);\r\napp.use(errorHandler);\r\n\r\n// MongoDB connection\r\nconst connectDB = async () => {\r\n  try {\r\n    const conn = await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/dinero_sweeps', {\r\n      useNewUrlParser: true,\r\n      useUnifiedTopology: true,\r\n    });\r\n\r\n    console.log(`MongoDB Connected: ${conn.connection.host}`);\r\n  } catch (error) {\r\n    console.error('MongoDB connection error:', error);\r\n    process.exit(1);\r\n  }\r\n};\r\n\r\n// Start server\r\nconst startServer = async () => {\r\n  await connectDB();\r\n  \r\n  app.listen(PORT, () => {\r\n    console.log(`🚀 Server running on port ${PORT}`);\r\n    console.log(`📊 Environment: ${process.env.NODE_ENV}`);\r\n    console.log(`🌐 Health check: http://localhost:${PORT}/health`);\r\n  });\r\n};\r\n\r\n// Handle unhandled promise rejections\r\nprocess.on('unhandledRejection', (err, promise) => {\r\n  console.log(`Error: ${err.message}`);\r\n  // Close server & exit process\r\n  process.exit(1);\r\n});\r\n\r\nstartServer(); "
        }
    ]
}