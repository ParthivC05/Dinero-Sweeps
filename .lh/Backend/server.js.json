{
    "sourceFile": "backend/server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1753269180261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753269393641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,14 @@\n \r\n app.use('/api/v1/auth', authRoutes);\r\n app.use('/api/v1/games', gamesRouter);\r\n app.use('/api/v1/users', usersRouter);\r\n-app.use('/api/v1/uploads', express.static('uploads'));\r\n+app.use('/uploads', (req, res, next) => {\r\n+  res.header('Access-Control-Allow-Origin', '*'); // Or your frontend's origin\r\n+  res.header('Access-Control-Allow-Methods', 'GET,OPTIONS');\r\n+  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n+  next();\r\n+}, express.static('uploads'));\r\n \r\n const offensiveWords = ['badword1', 'badword2']; \r\n function isOffensive(text) {\r\n   return offensiveWords.some(word => text.toLowerCase().includes(word));\r\n"
                }
            ],
            "date": 1753269180261,
            "name": "Commit-0",
            "content": "import express from 'express';\r\nimport cors from 'cors';\r\nimport dotenv from 'dotenv';\r\nimport passport from 'passport';\r\nimport helmet from 'helmet';\r\nimport compression from 'compression';\r\nimport session from 'express-session';\r\nimport mongoose from 'mongoose';\r\nimport MongoStore from 'connect-mongo';\r\nimport authRoutes from './routes/auth.js';\r\nimport passportConfig from './config/passport.js';\r\nimport http from 'http';\r\nimport { Server as SocketIOServer } from 'socket.io';\r\nimport 'dotenv/config';\r\nimport gamesRouter from './routes/games.js';  \r\nimport usersRouter from './routes/users.js';\r\nimport jwt from 'jsonwebtoken'; \r\nimport Message from './models/Message.js';\r\n\r\nconst app = express();\r\nconst server = http.createServer(app);\r\n\r\napp.use(helmet());\r\napp.use(compression());\r\n\r\nconst allowedOrigins = [\r\n  'http://localhost:5173',\r\n  'https://dinero-sweeps.vercel.app'\r\n];\r\n\r\nconst corsOriginFunction = function (origin, callback) {\r\n  if (!origin) return callback(null, true);\r\n  if (allowedOrigins.includes(origin)) {\r\n    return callback(null, true);\r\n  } else {\r\n    return callback(new Error('Not allowed by CORS'));\r\n  }\r\n};\r\n\r\napp.use(cors({\r\n  origin: corsOriginFunction,\r\n  credentials: true,\r\n}));\r\n\r\nconst io = new SocketIOServer(server, {\r\n  cors: {\r\n    origin: corsOriginFunction,\r\n    credentials: true,\r\n  },\r\n});\r\n\r\napp.get('/api/chat/:groupId', async (req, res) => {\r\n  const messages = await Message.find({ groupId: req.params.groupId }).sort({ createdAt: 1 });\r\n  res.json(messages);\r\n});\r\n\r\nio.on('connection', async (socket) => {\r\n  // Get groupId from client (default to 'global')\r\n  const groupId = socket.handshake.query.groupId || 'global';\r\n  socket.join(groupId);\r\n\r\n  // Send chat history for this group\r\n  const messages = await Message.find({ groupId }).sort({ createdAt: 1 }).limit(100);\r\n  socket.emit('chat_history', messages);\r\n\r\n  socket.on('send_message', async (msg) => {\r\n    const messageObj = {\r\n      userId: msg.userId || 'anonymous',\r\n      username: msg.username || 'Anonymous',\r\n      message: msg.text,\r\n      messageType: 'MESSAGE',\r\n      groupId: msg.groupId || groupId\r\n    };\r\n    const saved = await Message.create(messageObj);\r\n    io.to(messageObj.groupId).emit('receive_message', saved);\r\n  });\r\n\r\n  socket.on('disconnect', () => {\r\n    socket.leave(groupId);\r\n  });\r\n});\r\n\r\nconst PORT = process.env.PORT || 8004;\r\n\r\nmongoose.connect(process.env.MONGODB_URI, {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n})\r\n.then(() => {\r\n  console.log('✅ MongoDB connected successfully');\r\n})\r\n.catch((err) => {\r\n  console.error('❌ MongoDB connection error:', err.message);\r\n});\r\n\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: true }));\r\n\r\napp.use(session({\r\n  secret: process.env.SESSION_SECRET || 'secret',\r\n  resave: false,\r\n  saveUninitialized: false,\r\n  store: MongoStore.create({\r\n    mongoUrl: process.env.MONGODB_URI,\r\n    collectionName: 'sessions',\r\n    ttl: 24 * 60 * 60, \r\n  }),\r\n  cookie: {\r\n    secure: process.env.NODE_ENV === 'production', \r\n    httpOnly: true,\r\n    maxAge: 24 * 60 * 60 * 1000, \r\n  },\r\n}));\r\n\r\npassportConfig(passport);\r\napp.use(passport.initialize());\r\napp.use(passport.session());\r\n\r\napp.use('/api/v1/auth', authRoutes);\r\napp.use('/api/v1/games', gamesRouter);\r\napp.use('/api/v1/users', usersRouter);\r\napp.use('/uploads', express.static('uploads'));\r\n\r\nconst offensiveWords = ['badword1', 'badword2']; \r\nfunction isOffensive(text) {\r\n  return offensiveWords.some(word => text.toLowerCase().includes(word));\r\n}\r\n\r\napp.use((err, req, res, next) => {\r\n  res.status(err.status || 500).json({\r\n    success: false,\r\n    error: err.message || 'Server error',\r\n  });\r\n});\r\n\r\nserver.listen(PORT, () => {\r\n  console.log(`🚀 Server running on http://localhost:${PORT}`);\r\n  console.log(`📡 Socket.IO server ready`);\r\n}); "
        }
    ]
}