{
    "sourceFile": "backend/middleware/auth.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752728940713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752746232377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,105 +1,1 @@\n-import jwt from 'jsonwebtoken';\r\n-import User from '../models/User.js';\r\n-import { logger } from '../config/logger.js';\r\n-\r\n-export const protect = async (req, res, next) => {\r\n-  let token;\r\n-\r\n-  if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {\r\n-    try {\r\n-      // Get token from header\r\n-      token = req.headers.authorization.split(' ')[1];\r\n-\r\n-      // Verify token\r\n-      const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n-\r\n-      // Get user from the token\r\n-      req.user = await User.findById(decoded.id).select('-password');\r\n-\r\n-      if (!req.user) {\r\n-        return res.status(401).json({\r\n-          success: false,\r\n-          error: 'User not found',\r\n-        });\r\n-      }\r\n-\r\n-      if (!req.user.isActive) {\r\n-        return res.status(401).json({\r\n-          success: false,\r\n-          error: 'Account is deactivated',\r\n-        });\r\n-      }\r\n-\r\n-      if (req.user.isBanned) {\r\n-        return res.status(403).json({\r\n-          success: false,\r\n-          error: 'Account is banned',\r\n-        });\r\n-      }\r\n-\r\n-      next();\r\n-    } catch (error) {\r\n-      logger.error('Token verification error:', error);\r\n-      return res.status(401).json({\r\n-        success: false,\r\n-        error: 'Not authorized to access this route',\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  if (!token) {\r\n-    return res.status(401).json({\r\n-      success: false,\r\n-      error: 'Not authorized to access this route',\r\n-    });\r\n-  }\r\n-};\r\n-\r\n-export const optionalAuth = async (req, res, next) => {\r\n-  let token;\r\n-\r\n-  if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {\r\n-    try {\r\n-      token = req.headers.authorization.split(' ')[1];\r\n-      const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n-      req.user = await User.findById(decoded.id).select('-password');\r\n-    } catch (error) {\r\n-      // Token is invalid but we don't block the request\r\n-      logger.warn('Invalid token in optional auth:', error.message);\r\n-    }\r\n-  }\r\n-\r\n-  next();\r\n-};\r\n-\r\n-export const requireEmailVerification = (req, res, next) => {\r\n-  if (!req.user.isEmailVerified) {\r\n-    return res.status(403).json({\r\n-      success: false,\r\n-      error: 'Email verification required',\r\n-    });\r\n-  }\r\n-  next();\r\n-};\r\n-\r\n-export const requirePhoneVerification = (req, res, next) => {\r\n-  if (!req.user.isPhoneVerified) {\r\n-    return res.status(403).json({\r\n-      success: false,\r\n-      error: 'Phone verification required',\r\n-    });\r\n-  }\r\n-  next();\r\n-};\r\n-\r\n-export const generateToken = (id) => {\r\n-  return jwt.sign({ id }, process.env.JWT_SECRET, {\r\n-    expiresIn: process.env.JWT_EXPIRES_IN || '7d',\r\n-  });\r\n-};\r\n-\r\n-export const generateRefreshToken = (id) => {\r\n-  return jwt.sign({ id }, process.env.JWT_REFRESH_SECRET, {\r\n-    expiresIn: process.env.JWT_REFRESH_EXPIRES_IN || '30d',\r\n-  });\r\n-}; \n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                }
            ],
            "date": 1752728940713,
            "name": "Commit-0",
            "content": "import jwt from 'jsonwebtoken';\r\nimport User from '../models/User.js';\r\nimport { logger } from '../config/logger.js';\r\n\r\nexport const protect = async (req, res, next) => {\r\n  let token;\r\n\r\n  if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {\r\n    try {\r\n      // Get token from header\r\n      token = req.headers.authorization.split(' ')[1];\r\n\r\n      // Verify token\r\n      const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n\r\n      // Get user from the token\r\n      req.user = await User.findById(decoded.id).select('-password');\r\n\r\n      if (!req.user) {\r\n        return res.status(401).json({\r\n          success: false,\r\n          error: 'User not found',\r\n        });\r\n      }\r\n\r\n      if (!req.user.isActive) {\r\n        return res.status(401).json({\r\n          success: false,\r\n          error: 'Account is deactivated',\r\n        });\r\n      }\r\n\r\n      if (req.user.isBanned) {\r\n        return res.status(403).json({\r\n          success: false,\r\n          error: 'Account is banned',\r\n        });\r\n      }\r\n\r\n      next();\r\n    } catch (error) {\r\n      logger.error('Token verification error:', error);\r\n      return res.status(401).json({\r\n        success: false,\r\n        error: 'Not authorized to access this route',\r\n      });\r\n    }\r\n  }\r\n\r\n  if (!token) {\r\n    return res.status(401).json({\r\n      success: false,\r\n      error: 'Not authorized to access this route',\r\n    });\r\n  }\r\n};\r\n\r\nexport const optionalAuth = async (req, res, next) => {\r\n  let token;\r\n\r\n  if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {\r\n    try {\r\n      token = req.headers.authorization.split(' ')[1];\r\n      const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n      req.user = await User.findById(decoded.id).select('-password');\r\n    } catch (error) {\r\n      // Token is invalid but we don't block the request\r\n      logger.warn('Invalid token in optional auth:', error.message);\r\n    }\r\n  }\r\n\r\n  next();\r\n};\r\n\r\nexport const requireEmailVerification = (req, res, next) => {\r\n  if (!req.user.isEmailVerified) {\r\n    return res.status(403).json({\r\n      success: false,\r\n      error: 'Email verification required',\r\n    });\r\n  }\r\n  next();\r\n};\r\n\r\nexport const requirePhoneVerification = (req, res, next) => {\r\n  if (!req.user.isPhoneVerified) {\r\n    return res.status(403).json({\r\n      success: false,\r\n      error: 'Phone verification required',\r\n    });\r\n  }\r\n  next();\r\n};\r\n\r\nexport const generateToken = (id) => {\r\n  return jwt.sign({ id }, process.env.JWT_SECRET, {\r\n    expiresIn: process.env.JWT_EXPIRES_IN || '7d',\r\n  });\r\n};\r\n\r\nexport const generateRefreshToken = (id) => {\r\n  return jwt.sign({ id }, process.env.JWT_REFRESH_SECRET, {\r\n    expiresIn: process.env.JWT_REFRESH_EXPIRES_IN || '30d',\r\n  });\r\n}; "
        }
    ]
}