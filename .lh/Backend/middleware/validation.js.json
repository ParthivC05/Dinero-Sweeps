{
    "sourceFile": "backend/middleware/validation.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752728967862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752746242462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,173 +1,1 @@\n-import { body, validationResult } from 'express-validator';\r\n-\r\n-export const handleValidationErrors = (req, res, next) => {\r\n-  const errors = validationResult(req);\r\n-  if (!errors.isEmpty()) {\r\n-    return res.status(400).json({\r\n-      success: false,\r\n-      errors: errors.array().map(error => ({\r\n-        field: error.path,\r\n-        message: error.msg,\r\n-      })),\r\n-    });\r\n-  }\r\n-  next();\r\n-};\r\n-\r\n-// Login validation\r\n-export const validateLogin = [\r\n-  body('username')\r\n-    .trim()\r\n-    .notEmpty()\r\n-    .withMessage('Username is required')\r\n-    .isLength({ min: 3, max: 30 })\r\n-    .withMessage('Username must be between 3 and 30 characters'),\r\n-  body('password')\r\n-    .notEmpty()\r\n-    .withMessage('Password is required')\r\n-    .isLength({ min: 8 })\r\n-    .withMessage('Password must be at least 8 characters long'),\r\n-  handleValidationErrors,\r\n-];\r\n-\r\n-// Registration validation\r\n-export const validateRegistration = [\r\n-  body('username')\r\n-    .trim()\r\n-    .notEmpty()\r\n-    .withMessage('Username is required')\r\n-    .isLength({ min: 3, max: 30 })\r\n-    .withMessage('Username must be between 3 and 30 characters')\r\n-    .matches(/^[a-zA-Z0-9_]+$/)\r\n-    .withMessage('Username can only contain letters, numbers, and underscores'),\r\n-  body('email')\r\n-    .trim()\r\n-    .notEmpty()\r\n-    .withMessage('Email is required')\r\n-    .isEmail()\r\n-    .withMessage('Please provide a valid email address')\r\n-    .normalizeEmail(),\r\n-  body('password')\r\n-    .notEmpty()\r\n-    .withMessage('Password is required')\r\n-    .isLength({ min: 8, max: 20 })\r\n-    .withMessage('Password must be between 8 and 20 characters')\r\n-    .matches(/^(?=.*[A-Z])(?=.*\\d)/)\r\n-    .withMessage('Password must contain at least one uppercase letter and one number'),\r\n-  body('firstName')\r\n-    .trim()\r\n-    .notEmpty()\r\n-    .withMessage('First name is required')\r\n-    .isLength({ max: 50 })\r\n-    .withMessage('First name must be less than 50 characters'),\r\n-  body('lastName')\r\n-    .trim()\r\n-    .notEmpty()\r\n-    .withMessage('Last name is required')\r\n-    .isLength({ max: 50 })\r\n-    .withMessage('Last name must be less than 50 characters'),\r\n-  body('dateOfBirth')\r\n-    .notEmpty()\r\n-    .withMessage('Date of birth is required')\r\n-    .isISO8601()\r\n-    .withMessage('Please provide a valid date of birth')\r\n-    .custom((value) => {\r\n-      const age = new Date().getFullYear() - new Date(value).getFullYear();\r\n-      if (age < 18) {\r\n-        throw new Error('You must be at least 18 years old');\r\n-      }\r\n-      return true;\r\n-    }),\r\n-  body('referredBy')\r\n-    .optional()\r\n-    .trim()\r\n-    .isLength({ min: 8, max: 8 })\r\n-    .withMessage('Referral code must be 8 characters long'),\r\n-  handleValidationErrors,\r\n-];\r\n-\r\n-// Password reset validation\r\n-export const validatePasswordReset = [\r\n-  body('email')\r\n-    .trim()\r\n-    .notEmpty()\r\n-    .withMessage('Email is required')\r\n-    .isEmail()\r\n-    .withMessage('Please provide a valid email address')\r\n-    .normalizeEmail(),\r\n-  handleValidationErrors,\r\n-];\r\n-\r\n-// Password change validation\r\n-export const validatePasswordChange = [\r\n-  body('currentPassword')\r\n-    .notEmpty()\r\n-    .withMessage('Current password is required'),\r\n-  body('newPassword')\r\n-    .notEmpty()\r\n-    .withMessage('New password is required')\r\n-    .isLength({ min: 8, max: 20 })\r\n-    .withMessage('Password must be between 8 and 20 characters')\r\n-    .matches(/^(?=.*[A-Z])(?=.*\\d)/)\r\n-    .withMessage('Password must contain at least one uppercase letter and one number'),\r\n-  body('confirmPassword')\r\n-    .notEmpty()\r\n-    .withMessage('Password confirmation is required')\r\n-    .custom((value, { req }) => {\r\n-      if (value !== req.body.newPassword) {\r\n-        throw new Error('Password confirmation does not match');\r\n-      }\r\n-      return true;\r\n-    }),\r\n-  handleValidationErrors,\r\n-];\r\n-\r\n-// Profile update validation\r\n-export const validateProfileUpdate = [\r\n-  body('firstName')\r\n-    .optional()\r\n-    .trim()\r\n-    .isLength({ max: 50 })\r\n-    .withMessage('First name must be less than 50 characters'),\r\n-  body('lastName')\r\n-    .optional()\r\n-    .trim()\r\n-    .isLength({ max: 50 })\r\n-    .withMessage('Last name must be less than 50 characters'),\r\n-  body('phone')\r\n-    .optional()\r\n-    .trim()\r\n-    .matches(/^\\+?[\\d\\s\\-\\(\\)]+$/)\r\n-    .withMessage('Please provide a valid phone number'),\r\n-  handleValidationErrors,\r\n-];\r\n-\r\n-// Game bet validation\r\n-export const validateGameBet = [\r\n-  body('gameId')\r\n-    .notEmpty()\r\n-    .withMessage('Game ID is required')\r\n-    .isMongoId()\r\n-    .withMessage('Invalid game ID'),\r\n-  body('amount')\r\n-    .notEmpty()\r\n-    .withMessage('Bet amount is required')\r\n-    .isFloat({ min: 0.01 })\r\n-    .withMessage('Bet amount must be greater than 0'),\r\n-  handleValidationErrors,\r\n-];\r\n-\r\n-// Wallet transaction validation\r\n-export const validateWalletTransaction = [\r\n-  body('amount')\r\n-    .notEmpty()\r\n-    .withMessage('Amount is required')\r\n-    .isFloat({ min: 0.01 })\r\n-    .withMessage('Amount must be greater than 0'),\r\n-  body('type')\r\n-    .notEmpty()\r\n-    .withMessage('Transaction type is required')\r\n-    .isIn(['deposit', 'withdrawal'])\r\n-    .withMessage('Transaction type must be either deposit or withdrawal'),\r\n-  handleValidationErrors,\r\n-]; \n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                }
            ],
            "date": 1752728967862,
            "name": "Commit-0",
            "content": "import { body, validationResult } from 'express-validator';\r\n\r\nexport const handleValidationErrors = (req, res, next) => {\r\n  const errors = validationResult(req);\r\n  if (!errors.isEmpty()) {\r\n    return res.status(400).json({\r\n      success: false,\r\n      errors: errors.array().map(error => ({\r\n        field: error.path,\r\n        message: error.msg,\r\n      })),\r\n    });\r\n  }\r\n  next();\r\n};\r\n\r\n// Login validation\r\nexport const validateLogin = [\r\n  body('username')\r\n    .trim()\r\n    .notEmpty()\r\n    .withMessage('Username is required')\r\n    .isLength({ min: 3, max: 30 })\r\n    .withMessage('Username must be between 3 and 30 characters'),\r\n  body('password')\r\n    .notEmpty()\r\n    .withMessage('Password is required')\r\n    .isLength({ min: 8 })\r\n    .withMessage('Password must be at least 8 characters long'),\r\n  handleValidationErrors,\r\n];\r\n\r\n// Registration validation\r\nexport const validateRegistration = [\r\n  body('username')\r\n    .trim()\r\n    .notEmpty()\r\n    .withMessage('Username is required')\r\n    .isLength({ min: 3, max: 30 })\r\n    .withMessage('Username must be between 3 and 30 characters')\r\n    .matches(/^[a-zA-Z0-9_]+$/)\r\n    .withMessage('Username can only contain letters, numbers, and underscores'),\r\n  body('email')\r\n    .trim()\r\n    .notEmpty()\r\n    .withMessage('Email is required')\r\n    .isEmail()\r\n    .withMessage('Please provide a valid email address')\r\n    .normalizeEmail(),\r\n  body('password')\r\n    .notEmpty()\r\n    .withMessage('Password is required')\r\n    .isLength({ min: 8, max: 20 })\r\n    .withMessage('Password must be between 8 and 20 characters')\r\n    .matches(/^(?=.*[A-Z])(?=.*\\d)/)\r\n    .withMessage('Password must contain at least one uppercase letter and one number'),\r\n  body('firstName')\r\n    .trim()\r\n    .notEmpty()\r\n    .withMessage('First name is required')\r\n    .isLength({ max: 50 })\r\n    .withMessage('First name must be less than 50 characters'),\r\n  body('lastName')\r\n    .trim()\r\n    .notEmpty()\r\n    .withMessage('Last name is required')\r\n    .isLength({ max: 50 })\r\n    .withMessage('Last name must be less than 50 characters'),\r\n  body('dateOfBirth')\r\n    .notEmpty()\r\n    .withMessage('Date of birth is required')\r\n    .isISO8601()\r\n    .withMessage('Please provide a valid date of birth')\r\n    .custom((value) => {\r\n      const age = new Date().getFullYear() - new Date(value).getFullYear();\r\n      if (age < 18) {\r\n        throw new Error('You must be at least 18 years old');\r\n      }\r\n      return true;\r\n    }),\r\n  body('referredBy')\r\n    .optional()\r\n    .trim()\r\n    .isLength({ min: 8, max: 8 })\r\n    .withMessage('Referral code must be 8 characters long'),\r\n  handleValidationErrors,\r\n];\r\n\r\n// Password reset validation\r\nexport const validatePasswordReset = [\r\n  body('email')\r\n    .trim()\r\n    .notEmpty()\r\n    .withMessage('Email is required')\r\n    .isEmail()\r\n    .withMessage('Please provide a valid email address')\r\n    .normalizeEmail(),\r\n  handleValidationErrors,\r\n];\r\n\r\n// Password change validation\r\nexport const validatePasswordChange = [\r\n  body('currentPassword')\r\n    .notEmpty()\r\n    .withMessage('Current password is required'),\r\n  body('newPassword')\r\n    .notEmpty()\r\n    .withMessage('New password is required')\r\n    .isLength({ min: 8, max: 20 })\r\n    .withMessage('Password must be between 8 and 20 characters')\r\n    .matches(/^(?=.*[A-Z])(?=.*\\d)/)\r\n    .withMessage('Password must contain at least one uppercase letter and one number'),\r\n  body('confirmPassword')\r\n    .notEmpty()\r\n    .withMessage('Password confirmation is required')\r\n    .custom((value, { req }) => {\r\n      if (value !== req.body.newPassword) {\r\n        throw new Error('Password confirmation does not match');\r\n      }\r\n      return true;\r\n    }),\r\n  handleValidationErrors,\r\n];\r\n\r\n// Profile update validation\r\nexport const validateProfileUpdate = [\r\n  body('firstName')\r\n    .optional()\r\n    .trim()\r\n    .isLength({ max: 50 })\r\n    .withMessage('First name must be less than 50 characters'),\r\n  body('lastName')\r\n    .optional()\r\n    .trim()\r\n    .isLength({ max: 50 })\r\n    .withMessage('Last name must be less than 50 characters'),\r\n  body('phone')\r\n    .optional()\r\n    .trim()\r\n    .matches(/^\\+?[\\d\\s\\-\\(\\)]+$/)\r\n    .withMessage('Please provide a valid phone number'),\r\n  handleValidationErrors,\r\n];\r\n\r\n// Game bet validation\r\nexport const validateGameBet = [\r\n  body('gameId')\r\n    .notEmpty()\r\n    .withMessage('Game ID is required')\r\n    .isMongoId()\r\n    .withMessage('Invalid game ID'),\r\n  body('amount')\r\n    .notEmpty()\r\n    .withMessage('Bet amount is required')\r\n    .isFloat({ min: 0.01 })\r\n    .withMessage('Bet amount must be greater than 0'),\r\n  handleValidationErrors,\r\n];\r\n\r\n// Wallet transaction validation\r\nexport const validateWalletTransaction = [\r\n  body('amount')\r\n    .notEmpty()\r\n    .withMessage('Amount is required')\r\n    .isFloat({ min: 0.01 })\r\n    .withMessage('Amount must be greater than 0'),\r\n  body('type')\r\n    .notEmpty()\r\n    .withMessage('Transaction type is required')\r\n    .isIn(['deposit', 'withdrawal'])\r\n    .withMessage('Transaction type must be either deposit or withdrawal'),\r\n  handleValidationErrors,\r\n]; "
        }
    ]
}