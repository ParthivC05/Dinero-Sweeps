{
    "sourceFile": "backend/middleware/errorHandler.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752728921572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752728921572,
            "name": "Commit-0",
            "content": "import { logger } from '../config/logger.js';\r\n\r\nexport const errorHandler = (err, req, res, next) => {\r\n  let error = { ...err };\r\n  error.message = err.message;\r\n\r\n  // Log error\r\n  logger.error({\r\n    message: err.message,\r\n    stack: err.stack,\r\n    url: req.url,\r\n    method: req.method,\r\n    ip: req.ip,\r\n    userAgent: req.get('User-Agent'),\r\n  });\r\n\r\n  // Mongoose bad ObjectId\r\n  if (err.name === 'CastError') {\r\n    const message = 'Resource not found';\r\n    error = { message, statusCode: 404 };\r\n  }\r\n\r\n  // Mongoose duplicate key\r\n  if (err.code === 11000) {\r\n    const field = Object.keys(err.keyValue)[0];\r\n    const message = `${field} already exists`;\r\n    error = { message, statusCode: 400 };\r\n  }\r\n\r\n  // Mongoose validation error\r\n  if (err.name === 'ValidationError') {\r\n    const message = Object.values(err.errors).map(val => val.message).join(', ');\r\n    error = { message, statusCode: 400 };\r\n  }\r\n\r\n  // JWT errors\r\n  if (err.name === 'JsonWebTokenError') {\r\n    const message = 'Invalid token';\r\n    error = { message, statusCode: 401 };\r\n  }\r\n\r\n  if (err.name === 'TokenExpiredError') {\r\n    const message = 'Token expired';\r\n    error = { message, statusCode: 401 };\r\n  }\r\n\r\n  // Multer errors\r\n  if (err.code === 'LIMIT_FILE_SIZE') {\r\n    const message = 'File too large';\r\n    error = { message, statusCode: 400 };\r\n  }\r\n\r\n  if (err.code === 'LIMIT_UNEXPECTED_FILE') {\r\n    const message = 'Unexpected file field';\r\n    error = { message, statusCode: 400 };\r\n  }\r\n\r\n  // Rate limit errors\r\n  if (err.status === 429) {\r\n    const message = 'Too many requests, please try again later';\r\n    error = { message, statusCode: 429 };\r\n  }\r\n\r\n  // Default error\r\n  const statusCode = error.statusCode || err.statusCode || 500;\r\n  const message = error.message || 'Server Error';\r\n\r\n  res.status(statusCode).json({\r\n    success: false,\r\n    error: message,\r\n    ...(process.env.NODE_ENV === 'development' && { stack: err.stack }),\r\n  });\r\n}; "
        }
    ]
}