{
    "sourceFile": "backend/models/User.model.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752728256100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752728770302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,242 +1,1 @@\n-import mongoose from 'mongoose';\r\n-import bcrypt from 'bcryptjs';\r\n-\r\n-const userSchema = new mongoose.Schema({\r\n-  username: {\r\n-    type: String,\r\n-    required: [true, 'Username is required'],\r\n-    unique: true,\r\n-    trim: true,\r\n-    minlength: [3, 'Username must be at least 3 characters'],\r\n-    maxlength: [30, 'Username cannot exceed 30 characters'],\r\n-    match: [/^[a-zA-Z0-9_]+$/, 'Username can only contain letters, numbers, and underscores'],\r\n-  },\r\n-  email: {\r\n-    type: String,\r\n-    required: [true, 'Email is required'],\r\n-    unique: true,\r\n-    lowercase: true,\r\n-    trim: true,\r\n-    match: [/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/, 'Please enter a valid email'],\r\n-  },\r\n-  password: {\r\n-    type: String,\r\n-    required: [true, 'Password is required'],\r\n-    minlength: [8, 'Password must be at least 8 characters'],\r\n-    select: false, // Don't include password in queries by default\r\n-  },\r\n-  firstName: {\r\n-    type: String,\r\n-    required: [true, 'First name is required'],\r\n-    trim: true,\r\n-    maxlength: [50, 'First name cannot exceed 50 characters'],\r\n-  },\r\n-  lastName: {\r\n-    type: String,\r\n-    required: [true, 'Last name is required'],\r\n-    trim: true,\r\n-    maxlength: [50, 'Last name cannot exceed 50 characters'],\r\n-  },\r\n-  dateOfBirth: {\r\n-    type: Date,\r\n-    required: [true, 'Date of birth is required'],\r\n-    validate: {\r\n-      validator: function(value) {\r\n-        const age = Math.floor((new Date() - value) / (365.25 * 24 * 60 * 60 * 1000));\r\n-        return age >= 18;\r\n-      },\r\n-      message: 'User must be at least 18 years old',\r\n-    },\r\n-  },\r\n-  profilePicture: {\r\n-    type: String,\r\n-    default: null,\r\n-  },\r\n-  isEmailVerified: {\r\n-    type: Boolean,\r\n-    default: false,\r\n-  },\r\n-  isActive: {\r\n-    type: Boolean,\r\n-    default: true,\r\n-  },\r\n-  role: {\r\n-    type: String,\r\n-    enum: ['user', 'admin', 'moderator'],\r\n-    default: 'user',\r\n-  },\r\n-  referredBy: {\r\n-    type: mongoose.Schema.Types.ObjectId,\r\n-    ref: 'User',\r\n-    default: null,\r\n-  },\r\n-  referralCode: {\r\n-    type: String,\r\n-    unique: true,\r\n-    sparse: true,\r\n-  },\r\n-  oauthProvider: {\r\n-    type: String,\r\n-    enum: ['local', 'google', 'facebook'],\r\n-    default: 'local',\r\n-  },\r\n-  oauthId: {\r\n-    type: String,\r\n-    default: null,\r\n-  },\r\n-  lastLogin: {\r\n-    type: Date,\r\n-    default: null,\r\n-  },\r\n-  loginAttempts: {\r\n-    type: Number,\r\n-    default: 0,\r\n-  },\r\n-  lockUntil: {\r\n-    type: Date,\r\n-    default: null,\r\n-  },\r\n-  passwordResetToken: {\r\n-    type: String,\r\n-    default: null,\r\n-  },\r\n-  passwordResetExpires: {\r\n-    type: Date,\r\n-    default: null,\r\n-  },\r\n-  emailVerificationToken: {\r\n-    type: String,\r\n-    default: null,\r\n-  },\r\n-  emailVerificationExpires: {\r\n-    type: Date,\r\n-    default: null,\r\n-  },\r\n-  preferences: {\r\n-    theme: {\r\n-      type: String,\r\n-      enum: ['light', 'dark'],\r\n-      default: 'dark',\r\n-    },\r\n-    language: {\r\n-      type: String,\r\n-      default: 'en',\r\n-    },\r\n-    notifications: {\r\n-      email: {\r\n-        type: Boolean,\r\n-        default: true,\r\n-      },\r\n-      push: {\r\n-        type: Boolean,\r\n-        default: true,\r\n-      },\r\n-    },\r\n-  },\r\n-}, {\r\n-  timestamps: true,\r\n-  toJSON: { virtuals: true },\r\n-  toObject: { virtuals: true },\r\n-});\r\n-\r\n-// Virtual for full name\r\n-userSchema.virtual('fullName').get(function() {\r\n-  return `${this.firstName} ${this.lastName}`;\r\n-});\r\n-\r\n-// Virtual for age\r\n-userSchema.virtual('age').get(function() {\r\n-  if (!this.dateOfBirth) return null;\r\n-  return Math.floor((new Date() - this.dateOfBirth) / (365.25 * 24 * 60 * 60 * 1000));\r\n-});\r\n-\r\n-// Index for better query performance\r\n-userSchema.index({ username: 1 });\r\n-userSchema.index({ email: 1 });\r\n-userSchema.index({ oauthId: 1, oauthProvider: 1 });\r\n-userSchema.index({ referralCode: 1 });\r\n-\r\n-// Pre-save middleware to hash password\r\n-userSchema.pre('save', async function(next) {\r\n-  // Only hash the password if it has been modified (or is new)\r\n-  if (!this.isModified('password')) return next();\r\n-\r\n-  try {\r\n-    // Hash password with cost of 12\r\n-    const hashedPassword = await bcrypt.hash(this.password, 12);\r\n-    this.password = hashedPassword;\r\n-    next();\r\n-  } catch (error) {\r\n-    next(error);\r\n-  }\r\n-});\r\n-\r\n-// Pre-save middleware to generate referral code\r\n-userSchema.pre('save', function(next) {\r\n-  if (this.isNew && !this.referralCode) {\r\n-    this.referralCode = this.generateReferralCode();\r\n-  }\r\n-  next();\r\n-});\r\n-\r\n-// Instance method to check password\r\n-userSchema.methods.comparePassword = async function(candidatePassword) {\r\n-  return await bcrypt.compare(candidatePassword, this.password);\r\n-};\r\n-\r\n-// Instance method to generate referral code\r\n-userSchema.methods.generateReferralCode = function() {\r\n-  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r\n-  let result = '';\r\n-  for (let i = 0; i < 8; i++) {\r\n-    result += chars.charAt(Math.floor(Math.random() * chars.length));\r\n-  }\r\n-  return result;\r\n-};\r\n-\r\n-// Instance method to check if account is locked\r\n-userSchema.methods.isLocked = function() {\r\n-  return !!(this.lockUntil && this.lockUntil > Date.now());\r\n-};\r\n-\r\n-// Instance method to increment login attempts\r\n-userSchema.methods.incLoginAttempts = function() {\r\n-  // If we have a previous lock that has expired, restart at 1\r\n-  if (this.lockUntil && this.lockUntil < Date.now()) {\r\n-    return this.updateOne({\r\n-      $unset: { lockUntil: 1 },\r\n-      $set: { loginAttempts: 1 }\r\n-    });\r\n-  }\r\n-  \r\n-  const updates = { $inc: { loginAttempts: 1 } };\r\n-  \r\n-  // Lock account after 5 failed attempts\r\n-  if (this.loginAttempts + 1 >= 5 && !this.isLocked()) {\r\n-    updates.$set = { lockUntil: Date.now() + 2 * 60 * 60 * 1000 }; // 2 hours\r\n-  }\r\n-  \r\n-  return this.updateOne(updates);\r\n-};\r\n-\r\n-// Static method to reset login attempts\r\n-userSchema.statics.resetLoginAttempts = function(userId) {\r\n-  return this.updateOne(\r\n-    { _id: userId },\r\n-    { $unset: { loginAttempts: 1, lockUntil: 1 } }\r\n-  );\r\n-};\r\n-\r\n-// Static method to find by OAuth credentials\r\n-userSchema.statics.findByOAuth = function(provider, oauthId) {\r\n-  return this.findOne({ oauthProvider: provider, oauthId: oauthId });\r\n-};\r\n-\r\n-// Static method to find by referral code\r\n-userSchema.statics.findByReferralCode = function(referralCode) {\r\n-  return this.findOne({ referralCode: referralCode });\r\n-};\r\n-\r\n-const User = mongoose.model('User', userSchema);\r\n-\r\n-export default User; \n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                }
            ],
            "date": 1752728256100,
            "name": "Commit-0",
            "content": "import mongoose from 'mongoose';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nconst userSchema = new mongoose.Schema({\r\n  username: {\r\n    type: String,\r\n    required: [true, 'Username is required'],\r\n    unique: true,\r\n    trim: true,\r\n    minlength: [3, 'Username must be at least 3 characters'],\r\n    maxlength: [30, 'Username cannot exceed 30 characters'],\r\n    match: [/^[a-zA-Z0-9_]+$/, 'Username can only contain letters, numbers, and underscores'],\r\n  },\r\n  email: {\r\n    type: String,\r\n    required: [true, 'Email is required'],\r\n    unique: true,\r\n    lowercase: true,\r\n    trim: true,\r\n    match: [/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/, 'Please enter a valid email'],\r\n  },\r\n  password: {\r\n    type: String,\r\n    required: [true, 'Password is required'],\r\n    minlength: [8, 'Password must be at least 8 characters'],\r\n    select: false, // Don't include password in queries by default\r\n  },\r\n  firstName: {\r\n    type: String,\r\n    required: [true, 'First name is required'],\r\n    trim: true,\r\n    maxlength: [50, 'First name cannot exceed 50 characters'],\r\n  },\r\n  lastName: {\r\n    type: String,\r\n    required: [true, 'Last name is required'],\r\n    trim: true,\r\n    maxlength: [50, 'Last name cannot exceed 50 characters'],\r\n  },\r\n  dateOfBirth: {\r\n    type: Date,\r\n    required: [true, 'Date of birth is required'],\r\n    validate: {\r\n      validator: function(value) {\r\n        const age = Math.floor((new Date() - value) / (365.25 * 24 * 60 * 60 * 1000));\r\n        return age >= 18;\r\n      },\r\n      message: 'User must be at least 18 years old',\r\n    },\r\n  },\r\n  profilePicture: {\r\n    type: String,\r\n    default: null,\r\n  },\r\n  isEmailVerified: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  isActive: {\r\n    type: Boolean,\r\n    default: true,\r\n  },\r\n  role: {\r\n    type: String,\r\n    enum: ['user', 'admin', 'moderator'],\r\n    default: 'user',\r\n  },\r\n  referredBy: {\r\n    type: mongoose.Schema.Types.ObjectId,\r\n    ref: 'User',\r\n    default: null,\r\n  },\r\n  referralCode: {\r\n    type: String,\r\n    unique: true,\r\n    sparse: true,\r\n  },\r\n  oauthProvider: {\r\n    type: String,\r\n    enum: ['local', 'google', 'facebook'],\r\n    default: 'local',\r\n  },\r\n  oauthId: {\r\n    type: String,\r\n    default: null,\r\n  },\r\n  lastLogin: {\r\n    type: Date,\r\n    default: null,\r\n  },\r\n  loginAttempts: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n  lockUntil: {\r\n    type: Date,\r\n    default: null,\r\n  },\r\n  passwordResetToken: {\r\n    type: String,\r\n    default: null,\r\n  },\r\n  passwordResetExpires: {\r\n    type: Date,\r\n    default: null,\r\n  },\r\n  emailVerificationToken: {\r\n    type: String,\r\n    default: null,\r\n  },\r\n  emailVerificationExpires: {\r\n    type: Date,\r\n    default: null,\r\n  },\r\n  preferences: {\r\n    theme: {\r\n      type: String,\r\n      enum: ['light', 'dark'],\r\n      default: 'dark',\r\n    },\r\n    language: {\r\n      type: String,\r\n      default: 'en',\r\n    },\r\n    notifications: {\r\n      email: {\r\n        type: Boolean,\r\n        default: true,\r\n      },\r\n      push: {\r\n        type: Boolean,\r\n        default: true,\r\n      },\r\n    },\r\n  },\r\n}, {\r\n  timestamps: true,\r\n  toJSON: { virtuals: true },\r\n  toObject: { virtuals: true },\r\n});\r\n\r\n// Virtual for full name\r\nuserSchema.virtual('fullName').get(function() {\r\n  return `${this.firstName} ${this.lastName}`;\r\n});\r\n\r\n// Virtual for age\r\nuserSchema.virtual('age').get(function() {\r\n  if (!this.dateOfBirth) return null;\r\n  return Math.floor((new Date() - this.dateOfBirth) / (365.25 * 24 * 60 * 60 * 1000));\r\n});\r\n\r\n// Index for better query performance\r\nuserSchema.index({ username: 1 });\r\nuserSchema.index({ email: 1 });\r\nuserSchema.index({ oauthId: 1, oauthProvider: 1 });\r\nuserSchema.index({ referralCode: 1 });\r\n\r\n// Pre-save middleware to hash password\r\nuserSchema.pre('save', async function(next) {\r\n  // Only hash the password if it has been modified (or is new)\r\n  if (!this.isModified('password')) return next();\r\n\r\n  try {\r\n    // Hash password with cost of 12\r\n    const hashedPassword = await bcrypt.hash(this.password, 12);\r\n    this.password = hashedPassword;\r\n    next();\r\n  } catch (error) {\r\n    next(error);\r\n  }\r\n});\r\n\r\n// Pre-save middleware to generate referral code\r\nuserSchema.pre('save', function(next) {\r\n  if (this.isNew && !this.referralCode) {\r\n    this.referralCode = this.generateReferralCode();\r\n  }\r\n  next();\r\n});\r\n\r\n// Instance method to check password\r\nuserSchema.methods.comparePassword = async function(candidatePassword) {\r\n  return await bcrypt.compare(candidatePassword, this.password);\r\n};\r\n\r\n// Instance method to generate referral code\r\nuserSchema.methods.generateReferralCode = function() {\r\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r\n  let result = '';\r\n  for (let i = 0; i < 8; i++) {\r\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\r\n  }\r\n  return result;\r\n};\r\n\r\n// Instance method to check if account is locked\r\nuserSchema.methods.isLocked = function() {\r\n  return !!(this.lockUntil && this.lockUntil > Date.now());\r\n};\r\n\r\n// Instance method to increment login attempts\r\nuserSchema.methods.incLoginAttempts = function() {\r\n  // If we have a previous lock that has expired, restart at 1\r\n  if (this.lockUntil && this.lockUntil < Date.now()) {\r\n    return this.updateOne({\r\n      $unset: { lockUntil: 1 },\r\n      $set: { loginAttempts: 1 }\r\n    });\r\n  }\r\n  \r\n  const updates = { $inc: { loginAttempts: 1 } };\r\n  \r\n  // Lock account after 5 failed attempts\r\n  if (this.loginAttempts + 1 >= 5 && !this.isLocked()) {\r\n    updates.$set = { lockUntil: Date.now() + 2 * 60 * 60 * 1000 }; // 2 hours\r\n  }\r\n  \r\n  return this.updateOne(updates);\r\n};\r\n\r\n// Static method to reset login attempts\r\nuserSchema.statics.resetLoginAttempts = function(userId) {\r\n  return this.updateOne(\r\n    { _id: userId },\r\n    { $unset: { loginAttempts: 1, lockUntil: 1 } }\r\n  );\r\n};\r\n\r\n// Static method to find by OAuth credentials\r\nuserSchema.statics.findByOAuth = function(provider, oauthId) {\r\n  return this.findOne({ oauthProvider: provider, oauthId: oauthId });\r\n};\r\n\r\n// Static method to find by referral code\r\nuserSchema.statics.findByReferralCode = function(referralCode) {\r\n  return this.findOne({ referralCode: referralCode });\r\n};\r\n\r\nconst User = mongoose.model('User', userSchema);\r\n\r\nexport default User; "
        }
    ]
}