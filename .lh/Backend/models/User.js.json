{
    "sourceFile": "backend/models/User.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752728910207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752746164271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,335 +1,28 @@\n import mongoose from 'mongoose';\r\n import bcrypt from 'bcryptjs';\r\n \r\n const userSchema = new mongoose.Schema({\r\n-  // Authentication fields\r\n-  username: {\r\n-    type: String,\r\n-    required: true,\r\n-    unique: true,\r\n-    trim: true,\r\n-    minlength: 3,\r\n-    maxlength: 30,\r\n-    match: /^[a-zA-Z0-9_]+$/,\r\n-  },\r\n-  email: {\r\n-    type: String,\r\n-    required: true,\r\n-    unique: true,\r\n-    lowercase: true,\r\n-    trim: true,\r\n-    match: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n-  },\r\n-  password: {\r\n-    type: String,\r\n-    required: function() {\r\n-      return !this.googleId && !this.facebookId;\r\n-    },\r\n-    minlength: 8,\r\n-  },\r\n-  \r\n-  // OAuth fields\r\n-  googleId: {\r\n-    type: String,\r\n-    sparse: true,\r\n-  },\r\n-  facebookId: {\r\n-    type: String,\r\n-    sparse: true,\r\n-  },\r\n-  loginMethod: {\r\n-    type: String,\r\n-    enum: ['local', 'google', 'facebook'],\r\n-    default: 'local',\r\n-  },\r\n-  \r\n-  // Profile information\r\n-  firstName: {\r\n-    type: String,\r\n-    required: true,\r\n-    trim: true,\r\n-    maxlength: 50,\r\n-  },\r\n-  lastName: {\r\n-    type: String,\r\n-    required: true,\r\n-    trim: true,\r\n-    maxlength: 50,\r\n-  },\r\n-  avatar: {\r\n-    type: String,\r\n-    default: null,\r\n-  },\r\n-  dateOfBirth: {\r\n-    type: Date,\r\n-    required: true,\r\n-  },\r\n-  phone: {\r\n-    type: String,\r\n-    trim: true,\r\n-  },\r\n-  \r\n-  // Verification and status\r\n-  isEmailVerified: {\r\n-    type: Boolean,\r\n-    default: false,\r\n-  },\r\n-  isPhoneVerified: {\r\n-    type: Boolean,\r\n-    default: false,\r\n-  },\r\n-  isActive: {\r\n-    type: Boolean,\r\n-    default: true,\r\n-  },\r\n-  isBanned: {\r\n-    type: Boolean,\r\n-    default: false,\r\n-  },\r\n-  banReason: {\r\n-    type: String,\r\n-  },\r\n-  \r\n-  // Gaming related fields\r\n-  balance: {\r\n-    type: Number,\r\n-    default: 0,\r\n-    min: 0,\r\n-  },\r\n-  totalWagered: {\r\n-    type: Number,\r\n-    default: 0,\r\n-    min: 0,\r\n-  },\r\n-  totalWon: {\r\n-    type: Number,\r\n-    default: 0,\r\n-    min: 0,\r\n-  },\r\n-  totalLost: {\r\n-    type: Number,\r\n-    default: 0,\r\n-    min: 0,\r\n-  },\r\n-  gamesPlayed: {\r\n-    type: Number,\r\n-    default: 0,\r\n-    min: 0,\r\n-  },\r\n-  level: {\r\n-    type: Number,\r\n-    default: 1,\r\n-    min: 1,\r\n-  },\r\n-  experience: {\r\n-    type: Number,\r\n-    default: 0,\r\n-    min: 0,\r\n-  },\r\n-  \r\n-  // Referral system\r\n-  referralCode: {\r\n-    type: String,\r\n-    unique: true,\r\n-    sparse: true,\r\n-  },\r\n-  referredBy: {\r\n-    type: mongoose.Schema.Types.ObjectId,\r\n-    ref: 'User',\r\n-  },\r\n-  referralCount: {\r\n-    type: Number,\r\n-    default: 0,\r\n-    min: 0,\r\n-  },\r\n-  referralEarnings: {\r\n-    type: Number,\r\n-    default: 0,\r\n-    min: 0,\r\n-  },\r\n-  \r\n-  // Security and sessions\r\n-  lastLogin: {\r\n-    type: Date,\r\n-    default: Date.now,\r\n-  },\r\n-  loginAttempts: {\r\n-    type: Number,\r\n-    default: 0,\r\n-  },\r\n-  lockUntil: {\r\n-    type: Date,\r\n-  },\r\n-  passwordResetToken: {\r\n-    type: String,\r\n-  },\r\n-  passwordResetExpires: {\r\n-    type: Date,\r\n-  },\r\n-  emailVerificationToken: {\r\n-    type: String,\r\n-  },\r\n-  emailVerificationExpires: {\r\n-    type: Date,\r\n-  },\r\n-  \r\n-  // Preferences\r\n-  preferences: {\r\n-    language: {\r\n-      type: String,\r\n-      default: 'en',\r\n-      enum: ['en', 'es', 'fr', 'de'],\r\n-    },\r\n-    currency: {\r\n-      type: String,\r\n-      default: 'USD',\r\n-      enum: ['USD', 'EUR', 'GBP', 'CAD'],\r\n-    },\r\n-    notifications: {\r\n-      email: {\r\n-        type: Boolean,\r\n-        default: true,\r\n-      },\r\n-      push: {\r\n-        type: Boolean,\r\n-        default: true,\r\n-      },\r\n-      sms: {\r\n-        type: Boolean,\r\n-        default: false,\r\n-      },\r\n-    },\r\n-  },\r\n-  \r\n-  // Timestamps\r\n-  createdAt: {\r\n-    type: Date,\r\n-    default: Date.now,\r\n-  },\r\n-  updatedAt: {\r\n-    type: Date,\r\n-    default: Date.now,\r\n-  },\r\n-}, {\r\n-  timestamps: true,\r\n-  toJSON: {\r\n-    transform: function(doc, ret) {\r\n-      delete ret.password;\r\n-      delete ret.passwordResetToken;\r\n-      delete ret.passwordResetExpires;\r\n-      delete ret.emailVerificationToken;\r\n-      delete ret.emailVerificationExpires;\r\n-      delete ret.loginAttempts;\r\n-      delete ret.lockUntil;\r\n-      return ret;\r\n-    },\r\n-  },\r\n-});\r\n+  username: { type: String, required: true, unique: true },\r\n+  email: { type: String, required: true, unique: true },\r\n+  password: { type: String }, // Only for local\r\n+  firstName: { type: String },\r\n+  lastName: { type: String },\r\n+  dateOfBirth: { type: Date },\r\n+  loginMethod: { type: String, enum: ['local', 'google', 'facebook'], default: 'local' },\r\n+  googleId: { type: String },\r\n+  facebookId: { type: String },\r\n+}, { timestamps: true });\r\n \r\n-// Indexes for better performance\r\n-userSchema.index({ email: 1 });\r\n-userSchema.index({ username: 1 });\r\n-userSchema.index({ googleId: 1 });\r\n-userSchema.index({ facebookId: 1 });\r\n-userSchema.index({ referralCode: 1 });\r\n-userSchema.index({ createdAt: -1 });\r\n-\r\n-// Virtual for full name\r\n-userSchema.virtual('fullName').get(function() {\r\n-  return `${this.firstName} ${this.lastName}`;\r\n-});\r\n-\r\n-// Virtual for age\r\n-userSchema.virtual('age').get(function() {\r\n-  if (!this.dateOfBirth) return null;\r\n-  const today = new Date();\r\n-  const birthDate = new Date(this.dateOfBirth);\r\n-  let age = today.getFullYear() - birthDate.getFullYear();\r\n-  const monthDiff = today.getMonth() - birthDate.getMonth();\r\n-  \r\n-  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {\r\n-    age--;\r\n-  }\r\n-  \r\n-  return age;\r\n-});\r\n-\r\n-// Pre-save middleware to hash password\r\n userSchema.pre('save', async function(next) {\r\n-  if (!this.isModified('password')) return next();\r\n-  \r\n-  try {\r\n-    const salt = await bcrypt.genSalt(12);\r\n-    this.password = await bcrypt.hash(this.password, salt);\r\n-    next();\r\n-  } catch (error) {\r\n-    next(error);\r\n-  }\r\n-});\r\n-\r\n-// Pre-save middleware to generate referral code\r\n-userSchema.pre('save', function(next) {\r\n-  if (this.isNew && !this.referralCode) {\r\n-    this.referralCode = this.generateReferralCode();\r\n-  }\r\n+  if (!this.isModified('password') || !this.password) return next();\r\n+  this.password = await bcrypt.hash(this.password, 12);\r\n   next();\r\n });\r\n \r\n-// Instance method to compare password\r\n userSchema.methods.comparePassword = async function(candidatePassword) {\r\n+  if (!this.password) return false;\r\n   return bcrypt.compare(candidatePassword, this.password);\r\n };\r\n \r\n-// Instance method to generate referral code\r\n-userSchema.methods.generateReferralCode = function() {\r\n-  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r\n-  let result = '';\r\n-  for (let i = 0; i < 8; i++) {\r\n-    result += chars.charAt(Math.floor(Math.random() * chars.length));\r\n-  }\r\n-  return result;\r\n-};\r\n-\r\n-// Instance method to check if account is locked\r\n-userSchema.methods.isLocked = function() {\r\n-  return !!(this.lockUntil && this.lockUntil > Date.now());\r\n-};\r\n-\r\n-// Instance method to increment login attempts\r\n-userSchema.methods.incLoginAttempts = function() {\r\n-  // If we have a previous lock that has expired, restart at 1\r\n-  if (this.lockUntil && this.lockUntil < Date.now()) {\r\n-    return this.updateOne({\r\n-      $unset: { lockUntil: 1 },\r\n-      $set: { loginAttempts: 1 }\r\n-    });\r\n-  }\r\n-  \r\n-  const updates = { $inc: { loginAttempts: 1 } };\r\n-  \r\n-  // Lock account after 5 failed attempts\r\n-  if (this.loginAttempts + 1 >= 5 && !this.isLocked()) {\r\n-    updates.$set = { lockUntil: Date.now() + 2 * 60 * 60 * 1000 }; // 2 hours\r\n-  }\r\n-  \r\n-  return this.updateOne(updates);\r\n-};\r\n-\r\n-// Static method to find by referral code\r\n-userSchema.statics.findByReferralCode = function(referralCode) {\r\n-  return this.findOne({ referralCode });\r\n-};\r\n-\r\n-// Static method to find by email or username\r\n-userSchema.statics.findByEmailOrUsername = function(emailOrUsername) {\r\n-  return this.findOne({\r\n-    $or: [\r\n-      { email: emailOrUsername.toLowerCase() },\r\n-      { username: emailOrUsername }\r\n-    ]\r\n-  });\r\n-};\r\n-\r\n const User = mongoose.model('User', userSchema);\r\n-\r\n export default User; \n\\ No newline at end of file\n"
                }
            ],
            "date": 1752728910207,
            "name": "Commit-0",
            "content": "import mongoose from 'mongoose';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nconst userSchema = new mongoose.Schema({\r\n  // Authentication fields\r\n  username: {\r\n    type: String,\r\n    required: true,\r\n    unique: true,\r\n    trim: true,\r\n    minlength: 3,\r\n    maxlength: 30,\r\n    match: /^[a-zA-Z0-9_]+$/,\r\n  },\r\n  email: {\r\n    type: String,\r\n    required: true,\r\n    unique: true,\r\n    lowercase: true,\r\n    trim: true,\r\n    match: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n  },\r\n  password: {\r\n    type: String,\r\n    required: function() {\r\n      return !this.googleId && !this.facebookId;\r\n    },\r\n    minlength: 8,\r\n  },\r\n  \r\n  // OAuth fields\r\n  googleId: {\r\n    type: String,\r\n    sparse: true,\r\n  },\r\n  facebookId: {\r\n    type: String,\r\n    sparse: true,\r\n  },\r\n  loginMethod: {\r\n    type: String,\r\n    enum: ['local', 'google', 'facebook'],\r\n    default: 'local',\r\n  },\r\n  \r\n  // Profile information\r\n  firstName: {\r\n    type: String,\r\n    required: true,\r\n    trim: true,\r\n    maxlength: 50,\r\n  },\r\n  lastName: {\r\n    type: String,\r\n    required: true,\r\n    trim: true,\r\n    maxlength: 50,\r\n  },\r\n  avatar: {\r\n    type: String,\r\n    default: null,\r\n  },\r\n  dateOfBirth: {\r\n    type: Date,\r\n    required: true,\r\n  },\r\n  phone: {\r\n    type: String,\r\n    trim: true,\r\n  },\r\n  \r\n  // Verification and status\r\n  isEmailVerified: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  isPhoneVerified: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  isActive: {\r\n    type: Boolean,\r\n    default: true,\r\n  },\r\n  isBanned: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  banReason: {\r\n    type: String,\r\n  },\r\n  \r\n  // Gaming related fields\r\n  balance: {\r\n    type: Number,\r\n    default: 0,\r\n    min: 0,\r\n  },\r\n  totalWagered: {\r\n    type: Number,\r\n    default: 0,\r\n    min: 0,\r\n  },\r\n  totalWon: {\r\n    type: Number,\r\n    default: 0,\r\n    min: 0,\r\n  },\r\n  totalLost: {\r\n    type: Number,\r\n    default: 0,\r\n    min: 0,\r\n  },\r\n  gamesPlayed: {\r\n    type: Number,\r\n    default: 0,\r\n    min: 0,\r\n  },\r\n  level: {\r\n    type: Number,\r\n    default: 1,\r\n    min: 1,\r\n  },\r\n  experience: {\r\n    type: Number,\r\n    default: 0,\r\n    min: 0,\r\n  },\r\n  \r\n  // Referral system\r\n  referralCode: {\r\n    type: String,\r\n    unique: true,\r\n    sparse: true,\r\n  },\r\n  referredBy: {\r\n    type: mongoose.Schema.Types.ObjectId,\r\n    ref: 'User',\r\n  },\r\n  referralCount: {\r\n    type: Number,\r\n    default: 0,\r\n    min: 0,\r\n  },\r\n  referralEarnings: {\r\n    type: Number,\r\n    default: 0,\r\n    min: 0,\r\n  },\r\n  \r\n  // Security and sessions\r\n  lastLogin: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n  loginAttempts: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n  lockUntil: {\r\n    type: Date,\r\n  },\r\n  passwordResetToken: {\r\n    type: String,\r\n  },\r\n  passwordResetExpires: {\r\n    type: Date,\r\n  },\r\n  emailVerificationToken: {\r\n    type: String,\r\n  },\r\n  emailVerificationExpires: {\r\n    type: Date,\r\n  },\r\n  \r\n  // Preferences\r\n  preferences: {\r\n    language: {\r\n      type: String,\r\n      default: 'en',\r\n      enum: ['en', 'es', 'fr', 'de'],\r\n    },\r\n    currency: {\r\n      type: String,\r\n      default: 'USD',\r\n      enum: ['USD', 'EUR', 'GBP', 'CAD'],\r\n    },\r\n    notifications: {\r\n      email: {\r\n        type: Boolean,\r\n        default: true,\r\n      },\r\n      push: {\r\n        type: Boolean,\r\n        default: true,\r\n      },\r\n      sms: {\r\n        type: Boolean,\r\n        default: false,\r\n      },\r\n    },\r\n  },\r\n  \r\n  // Timestamps\r\n  createdAt: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n  updatedAt: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n}, {\r\n  timestamps: true,\r\n  toJSON: {\r\n    transform: function(doc, ret) {\r\n      delete ret.password;\r\n      delete ret.passwordResetToken;\r\n      delete ret.passwordResetExpires;\r\n      delete ret.emailVerificationToken;\r\n      delete ret.emailVerificationExpires;\r\n      delete ret.loginAttempts;\r\n      delete ret.lockUntil;\r\n      return ret;\r\n    },\r\n  },\r\n});\r\n\r\n// Indexes for better performance\r\nuserSchema.index({ email: 1 });\r\nuserSchema.index({ username: 1 });\r\nuserSchema.index({ googleId: 1 });\r\nuserSchema.index({ facebookId: 1 });\r\nuserSchema.index({ referralCode: 1 });\r\nuserSchema.index({ createdAt: -1 });\r\n\r\n// Virtual for full name\r\nuserSchema.virtual('fullName').get(function() {\r\n  return `${this.firstName} ${this.lastName}`;\r\n});\r\n\r\n// Virtual for age\r\nuserSchema.virtual('age').get(function() {\r\n  if (!this.dateOfBirth) return null;\r\n  const today = new Date();\r\n  const birthDate = new Date(this.dateOfBirth);\r\n  let age = today.getFullYear() - birthDate.getFullYear();\r\n  const monthDiff = today.getMonth() - birthDate.getMonth();\r\n  \r\n  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {\r\n    age--;\r\n  }\r\n  \r\n  return age;\r\n});\r\n\r\n// Pre-save middleware to hash password\r\nuserSchema.pre('save', async function(next) {\r\n  if (!this.isModified('password')) return next();\r\n  \r\n  try {\r\n    const salt = await bcrypt.genSalt(12);\r\n    this.password = await bcrypt.hash(this.password, salt);\r\n    next();\r\n  } catch (error) {\r\n    next(error);\r\n  }\r\n});\r\n\r\n// Pre-save middleware to generate referral code\r\nuserSchema.pre('save', function(next) {\r\n  if (this.isNew && !this.referralCode) {\r\n    this.referralCode = this.generateReferralCode();\r\n  }\r\n  next();\r\n});\r\n\r\n// Instance method to compare password\r\nuserSchema.methods.comparePassword = async function(candidatePassword) {\r\n  return bcrypt.compare(candidatePassword, this.password);\r\n};\r\n\r\n// Instance method to generate referral code\r\nuserSchema.methods.generateReferralCode = function() {\r\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r\n  let result = '';\r\n  for (let i = 0; i < 8; i++) {\r\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\r\n  }\r\n  return result;\r\n};\r\n\r\n// Instance method to check if account is locked\r\nuserSchema.methods.isLocked = function() {\r\n  return !!(this.lockUntil && this.lockUntil > Date.now());\r\n};\r\n\r\n// Instance method to increment login attempts\r\nuserSchema.methods.incLoginAttempts = function() {\r\n  // If we have a previous lock that has expired, restart at 1\r\n  if (this.lockUntil && this.lockUntil < Date.now()) {\r\n    return this.updateOne({\r\n      $unset: { lockUntil: 1 },\r\n      $set: { loginAttempts: 1 }\r\n    });\r\n  }\r\n  \r\n  const updates = { $inc: { loginAttempts: 1 } };\r\n  \r\n  // Lock account after 5 failed attempts\r\n  if (this.loginAttempts + 1 >= 5 && !this.isLocked()) {\r\n    updates.$set = { lockUntil: Date.now() + 2 * 60 * 60 * 1000 }; // 2 hours\r\n  }\r\n  \r\n  return this.updateOne(updates);\r\n};\r\n\r\n// Static method to find by referral code\r\nuserSchema.statics.findByReferralCode = function(referralCode) {\r\n  return this.findOne({ referralCode });\r\n};\r\n\r\n// Static method to find by email or username\r\nuserSchema.statics.findByEmailOrUsername = function(emailOrUsername) {\r\n  return this.findOne({\r\n    $or: [\r\n      { email: emailOrUsername.toLowerCase() },\r\n      { username: emailOrUsername }\r\n    ]\r\n  });\r\n};\r\n\r\nconst User = mongoose.model('User', userSchema);\r\n\r\nexport default User; "
        }
    ]
}