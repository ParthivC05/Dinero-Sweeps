{
    "sourceFile": "backend/models/User.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1753251495006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753270423374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,14 @@\n     wins: { type: Number, default: 0 },\r\n     losses: { type: Number, default: 0 },\r\n     totalBets: { type: Number, default: 0 },\r\n   },\r\n+  bonusHistory: [{\r\n+    code: String,\r\n+    redeemedAt: Date,\r\n+    rewardType: String,\r\n+    rewardAmount: Number\r\n+  }],\r\n }, { timestamps: true });\r\n \r\n userSchema.pre('save', async function(next) {\r\n   if (!this.isModified('password') || !this.password) return next();\r\n"
                }
            ],
            "date": 1753251495006,
            "name": "Commit-0",
            "content": "import mongoose from 'mongoose';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nconst userSchema = new mongoose.Schema({\r\n  username: { type: String, required: true, unique: true },\r\n  email: { type: String, required: true, unique: true },\r\n  password: { type: String }, \r\n  firstName: { type: String },\r\n  lastName: { type: String },\r\n  dateOfBirth: { type: Date },\r\n  loginMethod: { type: String, enum: ['local', 'google', 'facebook'], default: 'local' },\r\n  googleId: { type: String },\r\n  facebookId: { type: String },\r\n  avatar: { type: String }, \r\n  phone: { type: String },\r\n  address: { type: String },\r\n  address2: { type: String },\r\n  state: { type: String },\r\n  city: { type: String },\r\n  zipcode: { type: String },\r\n  communicationPreferences: {\r\n    email: { type: Boolean, default: true },\r\n    sms: { type: Boolean, default: false },\r\n    call: { type: Boolean, default: false },\r\n  },\r\n  verificationDocs: [{\r\n    type: { type: String, enum: ['id', 'address'], required: true },\r\n    url: { type: String, required: true },\r\n    status: { type: String, enum: ['pending', 'approved', 'rejected'], default: 'pending' },\r\n    uploadedAt: { type: Date, default: Date.now },\r\n    reviewedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\r\n    reviewedAt: { type: Date },\r\n    rejectionReason: { type: String },\r\n  }],\r\n  verificationStatus: { type: String, enum: ['unverified', 'pending', 'verified', 'rejected'], default: 'unverified' },\r\n  selfExclusion: {\r\n    isActive: { type: Boolean, default: false },\r\n    reason: { type: String },\r\n    startDate: { type: Date },\r\n    endDate: { type: Date },\r\n    type: { type: String, enum: ['temporary', 'permanent'] },\r\n  },\r\n  stats: {\r\n    wins: { type: Number, default: 0 },\r\n    losses: { type: Number, default: 0 },\r\n    totalBets: { type: Number, default: 0 },\r\n  },\r\n}, { timestamps: true });\r\n\r\nuserSchema.pre('save', async function(next) {\r\n  if (!this.isModified('password') || !this.password) return next();\r\n  this.password = await bcrypt.hash(this.password, 12);\r\n  next();\r\n});\r\n\r\nuserSchema.methods.comparePassword = async function(candidatePassword) {\r\n  if (!this.password) return false;\r\n  return bcrypt.compare(candidatePassword, this.password);\r\n};\r\n\r\nconst User = mongoose.model('User', userSchema);\r\nexport default User; "
        }
    ]
}