{
    "sourceFile": "backend/routes/games.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1752835378871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752836279306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \r\n // GET /api/games - fetch all games from SQL database\r\n router.get('/', async (req, res) => {\r\n   try {\r\n-    const [rows] = await sqlDb.query('SELECT * FROM games');\r\n+    const [rows] = await sqlDb.query('SELECT * FROM casino_games');\r\n     res.json({ success: true, games: rows });\r\n   } catch (err) {\r\n     res.status(500).json({ success: false, error: err.message });\r\n   }\r\n"
                },
                {
                    "date": 1752836527846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n import { sqlDb } from '../server.js';\r\n \r\n const router = express.Router();\r\n \r\n-// GET /api/games - fetch all games from SQL database\r\n router.get('/', async (req, res) => {\r\n   try {\r\n     const [rows] = await sqlDb.query('SELECT * FROM casino_games');\r\n     res.json({ success: true, games: rows });\r\n"
                },
                {
                    "date": 1752837336461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,10 @@\n const router = express.Router();\r\n \r\n router.get('/', async (req, res) => {\r\n   try {\r\n-    const [rows] = await sqlDb.query('SELECT * FROM casino_games');\r\n-    res.json({ success: true, games: rows });\r\n+    const { rows } = await sqlDb.query('SELECT * FROM admin_users');\r\n+    res.json({ success: true, users: rows });\r\n   } catch (err) {\r\n     res.status(500).json({ success: false, error: err.message });\r\n   }\r\n });\r\n"
                },
                {
                    "date": 1752837410133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n const router = express.Router();\r\n \r\n router.get('/', async (req, res) => {\r\n   try {\r\n-    const { rows } = await sqlDb.query('SELECT * FROM admin_users');\r\n+    const { rows } = await sqlDb.query('SELECT * FROM casino');\r\n     res.json({ success: true, users: rows });\r\n   } catch (err) {\r\n     res.status(500).json({ success: false, error: err.message });\r\n   }\r\n"
                },
                {
                    "date": 1752837423225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,10 @@\n const router = express.Router();\r\n \r\n router.get('/', async (req, res) => {\r\n   try {\r\n-    const { rows } = await sqlDb.query('SELECT * FROM casino');\r\n-    res.json({ success: true, users: rows });\r\n+      const { rows } = await sqlDb.query('SELECT * FROM casino_games');\r\n+    res.json({ success: true, games: rows });\r\n   } catch (err) {\r\n     res.status(500).json({ success: false, error: err.message });\r\n   }\r\n });\r\n"
                },
                {
                    "date": 1752837586536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n const router = express.Router();\r\n \r\n router.get('/', async (req, res) => {\r\n   try {\r\n-      const { rows } = await sqlDb.query('SELECT * FROM casino_games');\r\n+    const { rows } = await sqlDb.query('SELECT * FROM casino_games LIMIT 12');\r\n     res.json({ success: true, games: rows });\r\n   } catch (err) {\r\n     res.status(500).json({ success: false, error: err.message });\r\n   }\r\n"
                },
                {
                    "date": 1752838469763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,33 @@\n import express from 'express';\r\n import { sqlDb } from '../server.js';\r\n+import provider from '../services/provider.js'; // You implement this\r\n \r\n const router = express.Router();\r\n \r\n-router.get('/', async (req, res) => {\r\n+router.post('/launch', async (req, res) => {\r\n+  const { gameId, mode } = req.body; // mode: 'real' or 'fun'\r\n+  const userId = req.user?.id; // Only present if logged in\r\n+\r\n+  // 1. Lookup game config in DB\r\n+  const { rows } = await sqlDb.query('SELECT * FROM casino_games WHERE casino_game_id = $1', [gameId]);\r\n+  const game = rows[0];\r\n+  if (!game) return res.status(404).json({ error: 'Game not found' });\r\n+\r\n+  let launchUrl;\r\n   try {\r\n-    const { rows } = await sqlDb.query('SELECT * FROM casino_games LIMIT 12');\r\n-    res.json({ success: true, games: rows });\r\n+    if (mode === 'real') {\r\n+      if (!userId) return res.status(401).json({ error: 'Login required for real play' });\r\n+      // 2. Create real session with provider\r\n+      launchUrl = await provider.createRealSession({ userId, game });\r\n+    } else {\r\n+      // 3. Get demo URL or create demo session\r\n+      const moreDetails = game.more_details || {};\r\n+      launchUrl = moreDetails.demo_url || (await provider.createDemoSession({ game }));\r\n+    }\r\n+    res.json({ url: launchUrl });\r\n   } catch (err) {\r\n-    res.status(500).json({ success: false, error: err.message });\r\n+    res.status(500).json({ error: 'Failed to launch game' });\r\n   }\r\n });\r\n \r\n export default router; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752838542980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,19 @@\n import provider from '../services/provider.js'; // You implement this\r\n \r\n const router = express.Router();\r\n \r\n+// Get first 12 games for GameList\r\n+router.get('/', async (req, res) => {\r\n+  try {\r\n+    const { rows } = await sqlDb.query('SELECT * FROM casino_games LIMIT 12');\r\n+    res.json({ success: true, games: rows });\r\n+  } catch (err) {\r\n+    res.status(500).json({ success: false, error: err.message });\r\n+  }\r\n+});\r\n+\r\n+// Launch game (real or fun)\r\n router.post('/launch', async (req, res) => {\r\n   const { gameId, mode } = req.body; // mode: 'real' or 'fun'\r\n   const userId = req.user?.id; // Only present if logged in\r\n \r\n"
                },
                {
                    "date": 1752839157974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import express from 'express';\r\n import { sqlDb } from '../server.js';\r\n import provider from '../services/provider.js'; // You implement this\r\n+import ensureAuthenticated from '../middleware/ensureAuthenticated.js';\r\n \r\n const router = express.Router();\r\n \r\n // Get first 12 games for GameList\r\n@@ -14,9 +15,14 @@\n   }\r\n });\r\n \r\n // Launch game (real or fun)\r\n-router.post('/launch', async (req, res) => {\r\n+router.post('/launch', (req, res, next) => {\r\n+  if (req.body.mode === 'real') {\r\n+    return ensureAuthenticated(req, res, next);\r\n+  }\r\n+  next();\r\n+}, async (req, res) => {\r\n   const { gameId, mode } = req.body; // mode: 'real' or 'fun'\r\n   const userId = req.user?.id; // Only present if logged in\r\n \r\n   // 1. Lookup game config in DB\r\n@@ -26,9 +32,8 @@\n \r\n   let launchUrl;\r\n   try {\r\n     if (mode === 'real') {\r\n-      if (!userId) return res.status(401).json({ error: 'Login required for real play' });\r\n       // 2. Create real session with provider\r\n       launchUrl = await provider.createRealSession({ userId, game });\r\n     } else {\r\n       // 3. Get demo URL or create demo session\r\n"
                },
                {
                    "date": 1752842544705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import express from 'express';\r\n import { sqlDb } from '../server.js';\r\n-import provider from '../services/provider.js'; // You implement this\r\n+import provider from '../services/provider.js'; \r\n import ensureAuthenticated from '../middleware/ensureAuthenticated.js';\r\n \r\n const router = express.Router();\r\n \r\n"
                },
                {
                    "date": 1752842550856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,8 @@\n import ensureAuthenticated from '../middleware/ensureAuthenticated.js';\r\n \r\n const router = express.Router();\r\n \r\n-// Get first 12 games for GameList\r\n router.get('/', async (req, res) => {\r\n   try {\r\n     const { rows } = await sqlDb.query('SELECT * FROM casino_games LIMIT 12');\r\n     res.json({ success: true, games: rows });\r\n@@ -14,9 +13,8 @@\n     res.status(500).json({ success: false, error: err.message });\r\n   }\r\n });\r\n \r\n-// Launch game (real or fun)\r\n router.post('/launch', (req, res, next) => {\r\n   if (req.body.mode === 'real') {\r\n     return ensureAuthenticated(req, res, next);\r\n   }\r\n@@ -24,9 +22,8 @@\n }, async (req, res) => {\r\n   const { gameId, mode } = req.body; // mode: 'real' or 'fun'\r\n   const userId = req.user?.id; // Only present if logged in\r\n \r\n-  // 1. Lookup game config in DB\r\n   const { rows } = await sqlDb.query('SELECT * FROM casino_games WHERE casino_game_id = $1', [gameId]);\r\n   const game = rows[0];\r\n   if (!game) return res.status(404).json({ error: 'Game not found' });\r\n \r\n"
                },
                {
                    "date": 1752842556351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,22 +19,20 @@\n     return ensureAuthenticated(req, res, next);\r\n   }\r\n   next();\r\n }, async (req, res) => {\r\n-  const { gameId, mode } = req.body; // mode: 'real' or 'fun'\r\n-  const userId = req.user?.id; // Only present if logged in\r\n+  const { gameId, mode } = req.body; \r\n+  const userId = req.user?.id; \r\n \r\n   const { rows } = await sqlDb.query('SELECT * FROM casino_games WHERE casino_game_id = $1', [gameId]);\r\n   const game = rows[0];\r\n   if (!game) return res.status(404).json({ error: 'Game not found' });\r\n \r\n   let launchUrl;\r\n   try {\r\n     if (mode === 'real') {\r\n-      // 2. Create real session with provider\r\n       launchUrl = await provider.createRealSession({ userId, game });\r\n     } else {\r\n-      // 3. Get demo URL or create demo session\r\n       const moreDetails = game.more_details || {};\r\n       launchUrl = moreDetails.demo_url || (await provider.createDemoSession({ game }));\r\n     }\r\n     res.json({ url: launchUrl });\r\n"
                }
            ],
            "date": 1752835378871,
            "name": "Commit-0",
            "content": "import express from 'express';\r\nimport { sqlDb } from '../server.js';\r\n\r\nconst router = express.Router();\r\n\r\n// GET /api/games - fetch all games from SQL database\r\nrouter.get('/', async (req, res) => {\r\n  try {\r\n    const [rows] = await sqlDb.query('SELECT * FROM games');\r\n    res.json({ success: true, games: rows });\r\n  } catch (err) {\r\n    res.status(500).json({ success: false, error: err.message });\r\n  }\r\n});\r\n\r\nexport default router; "
        }
    ]
}