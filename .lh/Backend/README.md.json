{
    "sourceFile": "backend/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752729179513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752729179513,
            "name": "Commit-0",
            "content": "# Dinero Sweeps Backend API\r\n\r\nA comprehensive Node.js backend API for the Dinero Sweeps gaming platform, built with Express.js, MongoDB, and JWT authentication.\r\n\r\n## Features\r\n\r\n- üîê **Authentication & Authorization**\r\n  - JWT-based authentication\r\n  - Google OAuth 2.0 integration\r\n  - Facebook OAuth 2.0 integration\r\n  - Password reset functionality\r\n  - Account lockout protection\r\n\r\n- üéÆ **Gaming Platform**\r\n  - User profile management\r\n  - Wallet and balance management\r\n  - Game integration framework\r\n  - Transaction history\r\n  - Referral system\r\n\r\n- üõ°Ô∏è **Security**\r\n  - Input validation with express-validator\r\n  - Rate limiting\r\n  - CORS protection\r\n  - Helmet security headers\r\n  - Password hashing with bcrypt\r\n\r\n- üìä **Monitoring & Logging**\r\n  - Winston logging\r\n  - Request/response logging\r\n  - Error tracking\r\n  - Health check endpoints\r\n\r\n## Tech Stack\r\n\r\n- **Runtime**: Node.js\r\n- **Framework**: Express.js\r\n- **Database**: MongoDB with Mongoose ODM\r\n- **Authentication**: JWT, Passport.js\r\n- **Validation**: express-validator\r\n- **Security**: bcryptjs, helmet, cors\r\n- **Logging**: Winston\r\n- **OAuth**: Google OAuth 2.0, Facebook OAuth 2.0\r\n\r\n## Prerequisites\r\n\r\n- Node.js (v16 or higher)\r\n- MongoDB (local or cloud)\r\n- npm or yarn\r\n\r\n## Installation\r\n\r\n1. **Clone the repository**\r\n   ```bash\r\n   git clone <repository-url>\r\n   cd backend\r\n   ```\r\n\r\n2. **Install dependencies**\r\n   ```bash\r\n   npm install\r\n   ```\r\n\r\n3. **Environment Setup**\r\n   ```bash\r\n   cp env.example .env\r\n   ```\r\n   \r\n   Edit `.env` file with your configuration:\r\n   ```env\r\n   # Server Configuration\r\n   PORT=8004\r\n   NODE_ENV=development\r\n   \r\n   # MongoDB Configuration\r\n   MONGODB_URI=mongodb://localhost:27017/dinero_sweeps\r\n   \r\n   # JWT Configuration\r\n   JWT_SECRET=your-super-secret-jwt-key\r\n   JWT_EXPIRES_IN=7d\r\n   JWT_REFRESH_SECRET=your-refresh-secret-key\r\n   JWT_REFRESH_EXPIRES_IN=30d\r\n   \r\n   # OAuth Configuration\r\n   GOOGLE_CLIENT_ID=your-google-client-id\r\n   GOOGLE_CLIENT_SECRET=your-google-client-secret\r\n   FACEBOOK_APP_ID=your-facebook-app-id\r\n   FACEBOOK_APP_SECRET=your-facebook-app-secret\r\n   \r\n   # Frontend URLs\r\n   FRONTEND_URL=http://localhost:5173\r\n   \r\n   # reCAPTCHA Configuration\r\n   RECAPTCHA_SECRET_KEY=your-recaptcha-secret-key\r\n   RECAPTCHA_SITE_KEY=your-recaptcha-site-key\r\n   \r\n   # Session Configuration\r\n   SESSION_SECRET=your-session-secret-key\r\n   ```\r\n\r\n4. **Start the server**\r\n   ```bash\r\n   # Development\r\n   npm run dev\r\n   \r\n   # Production\r\n   npm start\r\n   ```\r\n\r\n## API Endpoints\r\n\r\n### Authentication\r\n\r\n| Method | Endpoint | Description | Access |\r\n|--------|----------|-------------|---------|\r\n| POST | `/api/v1/auth/register` | Register new user | Public |\r\n| POST | `/api/v1/auth/login` | User login | Public |\r\n| POST | `/api/v1/auth/logout` | User logout | Private |\r\n| POST | `/api/v1/auth/forgot-password` | Request password reset | Public |\r\n| POST | `/api/v1/auth/reset-password` | Reset password | Public |\r\n| POST | `/api/v1/auth/refresh` | Refresh JWT token | Public |\r\n| GET | `/api/v1/auth/google` | Google OAuth login | Public |\r\n| GET | `/api/v1/auth/google/callback` | Google OAuth callback | Public |\r\n| GET | `/api/v1/auth/facebook` | Facebook OAuth login | Public |\r\n| GET | `/api/v1/auth/facebook/callback` | Facebook OAuth callback | Public |\r\n\r\n### User Management\r\n\r\n| Method | Endpoint | Description | Access |\r\n|--------|----------|-------------|---------|\r\n| GET | `/api/v1/user/profile` | Get user profile | Private |\r\n| PUT | `/api/v1/user/profile` | Update user profile | Private |\r\n| PUT | `/api/v1/user/change-password` | Change password | Private |\r\n| GET | `/api/v1/user/stats` | Get user statistics | Private |\r\n\r\n### Gaming\r\n\r\n| Method | Endpoint | Description | Access |\r\n|--------|----------|-------------|---------|\r\n| GET | `/api/v1/game` | Get all games | Private |\r\n| GET | `/api/v1/game/:id` | Get game by ID | Private |\r\n| POST | `/api/v1/game/bet` | Place bet | Private |\r\n| GET | `/api/v1/game/history` | Get game history | Private |\r\n\r\n### Wallet\r\n\r\n| Method | Endpoint | Description | Access |\r\n|--------|----------|-------------|---------|\r\n| GET | `/api/v1/wallet/balance` | Get wallet balance | Private |\r\n| GET | `/api/v1/wallet/transactions` | Get transaction history | Private |\r\n| POST | `/api/v1/wallet/deposit` | Create deposit | Private |\r\n| POST | `/api/v1/wallet/withdrawal` | Create withdrawal | Private |\r\n| GET | `/api/v1/wallet/transactions/:id` | Get transaction by ID | Private |\r\n\r\n### System\r\n\r\n| Method | Endpoint | Description | Access |\r\n|--------|----------|-------------|---------|\r\n| GET | `/health` | Health check | Public |\r\n\r\n## Authentication\r\n\r\n### JWT Token\r\n\r\nInclude the JWT token in the Authorization header:\r\n```\r\nAuthorization: Bearer <your-jwt-token>\r\n```\r\n\r\n### OAuth Flow\r\n\r\n1. User clicks OAuth button\r\n2. Redirected to OAuth provider\r\n3. User authorizes the application\r\n4. Redirected back to callback URL\r\n5. Server processes OAuth response\r\n6. User redirected to frontend with tokens\r\n\r\n## Error Handling\r\n\r\nThe API returns consistent error responses:\r\n\r\n```json\r\n{\r\n  \"success\": false,\r\n  \"error\": \"Error message\",\r\n  \"errors\": [\r\n    {\r\n      \"field\": \"email\",\r\n      \"message\": \"Invalid email format\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n## Validation\r\n\r\nAll input is validated using express-validator:\r\n\r\n- **Registration**: Username, email, password, personal info\r\n- **Login**: Username/email, password\r\n- **Profile Updates**: Personal information\r\n- **Game Bets**: Game ID, amount\r\n- **Wallet Transactions**: Amount, type\r\n\r\n## Security Features\r\n\r\n- **Password Hashing**: bcrypt with salt rounds\r\n- **JWT Tokens**: Secure token-based authentication\r\n- **Rate Limiting**: Prevents abuse\r\n- **Input Validation**: Sanitizes all inputs\r\n- **CORS**: Configurable cross-origin requests\r\n- **Helmet**: Security headers\r\n- **Account Lockout**: After failed login attempts\r\n\r\n## Development\r\n\r\n### Project Structure\r\n\r\n```\r\nbackend/\r\n‚îú‚îÄ‚îÄ config/           # Configuration files\r\n‚îÇ   ‚îú‚îÄ‚îÄ database.js   # MongoDB connection\r\n‚îÇ   ‚îú‚îÄ‚îÄ logger.js     # Winston logging\r\n‚îÇ   ‚îî‚îÄ‚îÄ passport.js   # OAuth configuration\r\n‚îú‚îÄ‚îÄ controllers/      # Route controllers\r\n‚îÇ   ‚îî‚îÄ‚îÄ authController.js\r\n‚îú‚îÄ‚îÄ middleware/       # Custom middleware\r\n‚îÇ   ‚îú‚îÄ‚îÄ auth.js       # Authentication middleware\r\n‚îÇ   ‚îú‚îÄ‚îÄ validation.js # Input validation\r\n‚îÇ   ‚îú‚îÄ‚îÄ errorHandler.js\r\n‚îÇ   ‚îî‚îÄ‚îÄ notFound.js\r\n‚îú‚îÄ‚îÄ models/          # Mongoose models\r\n‚îÇ   ‚îî‚îÄ‚îÄ User.js\r\n‚îú‚îÄ‚îÄ routes/          # API routes\r\n‚îÇ   ‚îú‚îÄ‚îÄ auth.js\r\n‚îÇ   ‚îú‚îÄ‚îÄ user.js\r\n‚îÇ   ‚îú‚îÄ‚îÄ game.js\r\n‚îÇ   ‚îî‚îÄ‚îÄ wallet.js\r\n‚îú‚îÄ‚îÄ logs/            # Log files\r\n‚îú‚îÄ‚îÄ server.js        # Main application file\r\n‚îú‚îÄ‚îÄ package.json\r\n‚îî‚îÄ‚îÄ README.md\r\n```\r\n\r\n### Scripts\r\n\r\n- `npm start`: Start production server\r\n- `npm run dev`: Start development server with nodemon\r\n- `npm test`: Run tests\r\n\r\n### Environment Variables\r\n\r\nSee `env.example` for all required environment variables.\r\n\r\n## Production Deployment\r\n\r\n1. Set `NODE_ENV=production`\r\n2. Configure production MongoDB URI\r\n3. Set secure JWT secrets\r\n4. Configure OAuth credentials\r\n5. Set up proper CORS origins\r\n6. Enable HTTPS\r\n7. Configure logging\r\n8. Set up monitoring\r\n\r\n## Contributing\r\n\r\n1. Fork the repository\r\n2. Create a feature branch\r\n3. Make your changes\r\n4. Add tests if applicable\r\n5. Submit a pull request\r\n\r\n## License\r\n\r\nMIT License - see LICENSE file for details. "
        }
    ]
}