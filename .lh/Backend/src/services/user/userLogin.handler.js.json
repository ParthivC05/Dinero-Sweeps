{
    "sourceFile": "Backend/src/services/user/userLogin.handler.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752639331498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752639331498,
            "name": "Commit-0",
            "content": "import db from '@src/db/models'\nimport { AppError } from '@src/errors/app.error'\nimport { Errors } from '@src/errors/errorCodes'\nimport { createAccessToken } from '@src/helpers/authentication.helpers'\nimport { dayjs, serverDayjs } from '@src/libs/dayjs'\nimport { BaseHandler } from '@src/libs/logicBase'\nimport { comparePassword, getRequestIP } from '@src/utils/common'\nimport { USER_VIP_TIER_PROGRESS_KEYS } from '@src/utils/constants/constants'\nimport { AddUserTierProgressHandler } from '../userTierProgress'\nimport { verifyRecaptchaToken } from '@src/utils/recaptcha'\n\nexport class UserLoginHandler extends BaseHandler {\n  async run() {\n    const { username, password, captchaToken } = this.args\n    const transaction = await this.context.sequelizeTransaction\n\n    // Verify reCAPTCHA token first\n    if (!captchaToken) {\n      throw new AppError(Errors.INVALID_CAPTCHA_TOKEN)\n    }\n\n    try {\n      const isCaptchaValid = await verifyRecaptchaToken(captchaToken)\n      if (!isCaptchaValid) {\n        throw new AppError(Errors.INVALID_CAPTCHA_TOKEN)\n      }\n    } catch (error) {\n      console.error('reCAPTCHA verification error:', error)\n      throw new AppError(Errors.INVALID_CAPTCHA_TOKEN)\n    }\n\n    const user = await db.User.findOne({\n      where: { username },\n      attributes: ['userId', 'username', 'firstName', 'lastName', 'password', 'createdAt', 'lastLoginDate', 'isActive'],\n      include: [\n        {\n          model: db.User,\n          as: 'referrer', // Parent User\n          attributes: ['userId', 'username', 'firstName', 'lastName']\n        },\n        {\n          model: db.Wallet,\n          as: 'userWallet',\n          attributes: ['balance', 'currencyCode']\n        },\n        {\n          model: db.UserDetails,\n          as: 'userDetails',\n          attributes: ['ipAddress', 'vipTierId', 'nextVipTierId', 'id'], // Include nextVipTierId here\n          include: [\n            {\n              model: db.VipTier,\n              as: 'VipTier',\n              attributes: ['vipTierId', 'name', 'icon', 'level'],\n              include: [\n                {\n                  model: db.Reward,\n                  as: 'rewards',\n                  attributes: { exclude: ['createdAt', 'updatedAt'] }\n                }\n              ]\n            },\n            {\n              model: db.VipTier,\n              as: 'nextVipTier',\n              // attributes: ['vipTierId', 'name', 'icon', 'level'],  // Include nextVipTier\n              include: [\n                {\n                  model: db.Reward,\n                  as: 'rewards',\n                  attributes: { exclude: ['createdAt', 'updatedAt'] }\n                }\n              ]\n            }\n          ]\n        },\n        {\n          model: db.UserTierProgress,\n          as: 'userTierProgresses',\n          attributes: { exclude: ['updatedAt'] },\n          where: { isActive: true },\n          required: false\n        }\n      ]\n    }, transaction)\n    if (!user) throw new AppError(Errors.USER_NOT_EXISTS)\n    if (!user.isActive) throw new AppError(Errors.USER_ACCOUNT_INACTIVE)\n    if (!await comparePassword(password, user.password)) throw new AppError(Errors.WRONG_PASSWORD_ERROR)\n\n    const currentVipTier = user.userDetails ? user.userDetails.VipTier : null\n    const nextVipTier = user.userDetails ? user.userDetails.nextVipTier : null\n    const userTierProgress = user?.userTierProgresses || []\n    await user.userDetails.set({ loginIpAddress: getRequestIP(this.context.req) }).save({ transaction })\n    if (!currentVipTier) throw new AppError(Errors.USER_VIP_TIER_NOT_FOUND)\n    // Create access token\n    const accessToken = await createAccessToken(user)\n\n    // Compare last login date to today's date (UTC)\n    const lastLoginDate = user.dataValues?.lastLoginDate ? dayjs(user.dataValues.lastLoginDate).utc().startOf('day') : null\n    const today = serverDayjs().startOf('day')\n    let isNewLoginDay = false\n    if (!lastLoginDate || !lastLoginDate.isSame(today, 'day')) {\n      // If last login date is not today, set `isNewLoginDay` to true and update the login date\n      isNewLoginDay = true\n    }\n    // Update last login date to the current UTC date\n    await db.User.update({ lastLoginDate: serverDayjs().utc().toDate() }, // Set the current UTC time\n      { where: { userId: user.userId } }, transaction)\n\n    if (isNewLoginDay || !userTierProgress.length) {\n      await AddUserTierProgressHandler.execute({\n        userId: user?.userId,\n        loginStreak: USER_VIP_TIER_PROGRESS_KEYS.loginStreak\n      }, this.context)\n\n      if (userTierProgress && userTierProgress.length > 0) {\n        userTierProgress[0].loginStreak = userTierProgress[0]?.loginStreak + 1\n      }\n    }\n\n    delete user.dataValues.password\n    delete user.dataValues.userDetails.dataValues.nextVipTier\n    delete user.dataValues.userDetails.dataValues.VipTier\n    delete user.dataValues.userTierProgresses\n    // delete user.dataValues.nextVipTier\n    delete user.dataValues.lastLoginDate\n\n    if (userTierProgress.length === 0) {\n      userTierProgress.push({\n        wageringThreshold: 0,\n        gamesPlayed: 0,\n        bigBetsThreshold: 0,\n        depositsThreshold: 0,\n        loginStreak: 0,\n        referralsCount: 0,\n        // sweepstakesEntries: 0,\n        // sweepstakesWins: 0,\n        // timeBasedConsistency: 0,\n        isActive: true\n      })\n    }\n    // Prepare response with current and next VIP tier information and rewards\n    const response = {\n      user: {\n        ...user.dataValues,\n        currentVipTier: {\n          vipTierId: currentVipTier.vipTierId,\n          name: currentVipTier.name,\n          icon: currentVipTier.icon,\n          level: currentVipTier.level,\n          rewards: currentVipTier.rewards || []\n        },\n        nextVipTier: nextVipTier || null,\n        userTierProgress: userTierProgress || []\n\n      },\n      accessToken\n    }\n\n    return response\n  }\n}\n"
        }
    ]
}