{
    "sourceFile": "Backend/src/rest-resources/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1752639389017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752639879552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,13 +42,19 @@\n       'http://localhost:3000',\n       'http://localhost:5173',\n       'http://127.0.0.1:3000',\n       'http://127.0.0.1:5173',\n-      'https://dinero-sweeps.vercel.app'\n+      'https://dinero-sweeps.vercel.app',\n+      'http://54.234.145.12:5173' // Add your server's frontend URL if needed\n     ];\n     \n     const allAllowedOrigins = [...allowedOrigins, ...developmentOrigins];\n     \n+    // For development, allow all localhost origins\n+    if (origin.includes('localhost') || origin.includes('127.0.0.1')) {\n+      return callback(null, true);\n+    }\n+    \n     if (allAllowedOrigins.includes(origin) || allAllowedOrigins.includes('*')) {\n       callback(null, true);\n     } else {\n       console.log('CORS blocked origin:', origin);\n"
                },
                {
                    "date": 1752640154490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,17 +48,19 @@\n     ];\n     \n     const allAllowedOrigins = [...allowedOrigins, ...developmentOrigins];\n     \n-    // For development, allow all localhost origins\n+    // For development, allow ALL localhost and 127.0.0.1 origins (any port)\n     if (origin.includes('localhost') || origin.includes('127.0.0.1')) {\n+      console.log('‚úÖ CORS: Allowing localhost origin:', origin);\n       return callback(null, true);\n     }\n     \n+    // For production, check against allowed origins\n     if (allAllowedOrigins.includes(origin) || allAllowedOrigins.includes('*')) {\n       callback(null, true);\n     } else {\n-      console.log('CORS blocked origin:', origin);\n+      console.log('‚ùå CORS blocked origin:', origin);\n       callback(new Error('Not allowed by CORS'));\n     }\n   },\n   methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'],\n"
                },
                {
                    "date": 1752640181689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n     // For production, check against allowed origins\n     if (allAllowedOrigins.includes(origin) || allAllowedOrigins.includes('*')) {\n       callback(null, true);\n     } else {\n-      console.log('‚ùå CORS blocked origin:', origin);\n+      console.log(' CORS blocked origin:', origin);\n       callback(new Error('Not allowed by CORS'));\n     }\n   },\n   methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'],\n"
                },
                {
                    "date": 1752640263732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,12 +31,18 @@\n // CORS Configuration\n const corsOptions = {\n   credentials: true,\n   origin: function (origin, callback) {\n+    console.log('üîç CORS check for origin:', origin);\n+    \n     // Allow requests with no origin (like mobile apps or curl requests)\n-    if (!origin) return callback(null, true);\n+    if (!origin) {\n+      console.log('‚úÖ CORS: Allowing request with no origin');\n+      return callback(null, true);\n+    }\n     \n     const allowedOrigins = config.get('app.origin').split(',').filter(origin => origin.trim());\n+    console.log('üìã Allowed origins from config:', allowedOrigins);\n     \n     // Add common development origins\n     const developmentOrigins = [\n       'http://localhost:3000',\n@@ -47,8 +53,9 @@\n       'http://54.234.145.12:5173' // Add your server's frontend URL if needed\n     ];\n     \n     const allAllowedOrigins = [...allowedOrigins, ...developmentOrigins];\n+    console.log('üìã All allowed origins:', allAllowedOrigins);\n     \n     // For development, allow ALL localhost and 127.0.0.1 origins (any port)\n     if (origin.includes('localhost') || origin.includes('127.0.0.1')) {\n       console.log('‚úÖ CORS: Allowing localhost origin:', origin);\n@@ -56,11 +63,12 @@\n     }\n     \n     // For production, check against allowed origins\n     if (allAllowedOrigins.includes(origin) || allAllowedOrigins.includes('*')) {\n+      console.log('‚úÖ CORS: Allowing origin from allowed list:', origin);\n       callback(null, true);\n     } else {\n-      console.log(' CORS blocked origin:', origin);\n+      console.log('‚ùå CORS blocked origin:', origin);\n       callback(new Error('Not allowed by CORS'));\n     }\n   },\n   methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'],\n"
                },
                {
                    "date": 1752640271863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,22 @@\n app.use(morgan('tiny'))\n \n app.use(i18n.init)\n \n+// Temporary CORS fix for development\n+app.use((req, res, next) => {\n+  res.header('Access-Control-Allow-Origin', 'http://localhost:5173');\n+  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n+  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, Accept');\n+  res.header('Access-Control-Allow-Credentials', 'true');\n+  \n+  if (req.method === 'OPTIONS') {\n+    res.sendStatus(200);\n+  } else {\n+    next();\n+  }\n+});\n+\n // CORS Configuration\n const corsOptions = {\n   credentials: true,\n   origin: function (origin, callback) {\n"
                },
                {
                    "date": 1752640738376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,104 +1,88 @@\n-import bodyParser from 'body-parser'\n-import cors from 'cors'\n-import express from 'express'\n-import helmet from 'helmet'\n-import morgan from 'morgan'\n+import express from 'express';\n+import helmet from 'helmet';\n+import morgan from 'morgan';\n+import cors from 'cors';\n+import bodyParser from 'body-parser';\n \n-import config from '@src/configs/app.config'\n-import i18n from '@src/libs/i18n'\n-import routes from '@src/rest-resources/routes'\n-import { errorHandlerMiddleware } from './middlewares/errorHandler.middleware'\n+import config from '@src/configs/app.config';\n+import i18n from '@src/libs/i18n';\n+import routes from '@src/rest-resources/routes';\n+import { errorHandlerMiddleware } from './middlewares/errorHandler.middleware';\n \n-const app = express()\n+const app = express();\n \n-app.use(helmet())\n+// Secure HTTP headers\n+app.use(helmet());\n \n-// app.use(bodyParser.json())\n-app.use(\n-  bodyParser.json({\n-    verify: (req, res, buf) => {\n-      req.rawBody = buf.toString(); // Save raw body as string\n-    },\n-  })\n-)\n+// Parse JSON body and keep raw body for signature verification if needed\n+app.use(bodyParser.json({\n+  verify: (req, res, buf) => {\n+    req.rawBody = buf.toString(); // Optional: for signature verification, Stripe, etc.\n+  },\n+}));\n \n-app.use(bodyParser.json())\n+// Logging requests\n+app.use(morgan('tiny'));\n \n-app.use(morgan('tiny'))\n+// Internationalization setup\n+app.use(i18n.init);\n \n-app.use(i18n.init)\n-\n-// Temporary CORS fix for development\n-app.use((req, res, next) => {\n-  res.header('Access-Control-Allow-Origin', 'http://localhost:5173');\n-  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n-  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, Accept');\n-  res.header('Access-Control-Allow-Credentials', 'true');\n-  \n-  if (req.method === 'OPTIONS') {\n-    res.sendStatus(200);\n-  } else {\n-    next();\n-  }\n-});\n-\n-// CORS Configuration\n+// ‚úÖ Correct CORS configuration\n const corsOptions = {\n   credentials: true,\n   origin: function (origin, callback) {\n-    console.log('üîç CORS check for origin:', origin);\n-    \n-    // Allow requests with no origin (like mobile apps or curl requests)\n-    if (!origin) {\n-      console.log('‚úÖ CORS: Allowing request with no origin');\n-      return callback(null, true);\n-    }\n-    \n-    const allowedOrigins = config.get('app.origin').split(',').filter(origin => origin.trim());\n-    console.log('üìã Allowed origins from config:', allowedOrigins);\n-    \n-    // Add common development origins\n+    const allowedOrigins = config.get('app.origin')\n+      .split(',')\n+      .map(o => o.trim())\n+      .filter(Boolean);\n+\n     const developmentOrigins = [\n       'http://localhost:3000',\n       'http://localhost:5173',\n       'http://127.0.0.1:3000',\n       'http://127.0.0.1:5173',\n-      'https://dinero-sweeps.vercel.app',\n-      'http://54.234.145.12:5173' // Add your server's frontend URL if needed\n+      'http://54.234.145.12:5173',\n+      'https://dinero-sweeps.vercel.app'\n     ];\n-    \n+\n     const allAllowedOrigins = [...allowedOrigins, ...developmentOrigins];\n-    console.log('üìã All allowed origins:', allAllowedOrigins);\n-    \n-    // For development, allow ALL localhost and 127.0.0.1 origins (any port)\n+\n+    console.log('üîç Incoming Origin:', origin);\n+\n+    // Allow requests with no origin (e.g., curl, mobile apps)\n+    if (!origin) {\n+      console.log('‚úÖ Allowing request without origin');\n+      return callback(null, true);\n+    }\n+\n     if (origin.includes('localhost') || origin.includes('127.0.0.1')) {\n-      console.log('‚úÖ CORS: Allowing localhost origin:', origin);\n+      console.log('‚úÖ Allowing localhost origin:', origin);\n       return callback(null, true);\n     }\n-    \n-    // For production, check against allowed origins\n+\n     if (allAllowedOrigins.includes(origin) || allAllowedOrigins.includes('*')) {\n-      console.log('‚úÖ CORS: Allowing origin from allowed list:', origin);\n-      callback(null, true);\n-    } else {\n-      console.log('‚ùå CORS blocked origin:', origin);\n-      callback(new Error('Not allowed by CORS'));\n+      console.log('‚úÖ Allowed origin:', origin);\n+      return callback(null, true);\n     }\n+\n+    console.log('‚ùå Blocked by CORS:', origin);\n+    return callback(new Error('Not allowed by CORS'));\n   },\n   methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'],\n-  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept'],\n-  credentials: true\n-}\n+  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept']\n+};\n \n-app.use(cors(corsOptions))\n+app.use(cors(corsOptions));\n \n+// Mount your REST API routes\n+app.use(routes);\n \n-app.use(routes)\n-\n+// Fallback route for unmatched requests\n app.use(async (req, res) => {\n-  res.status(404).json({ message: 'Welcome to player backend' })\n-})\n+  res.status(404).json({ message: 'Welcome to player backend' });\n+});\n \n-app.use(errorHandlerMiddleware)\n+// Global error handler\n+app.use(errorHandlerMiddleware);\n \n-export default app\n+export default app;\n"
                },
                {
                    "date": 1752641087360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,49 +26,12 @@\n \n // Internationalization setup\n app.use(i18n.init);\n \n-// ‚úÖ Correct CORS configuration\n+// ‚úÖ CORS configuration - Allow all origins\n const corsOptions = {\n   credentials: true,\n-  origin: function (origin, callback) {\n-    const allowedOrigins = config.get('app.origin')\n-      .split(',')\n-      .map(o => o.trim())\n-      .filter(Boolean);\n-\n-    const developmentOrigins = [\n-      'http://localhost:3000',\n-      'http://localhost:5173',\n-      'http://127.0.0.1:3000',\n-      'http://127.0.0.1:5173',\n-      'http://54.234.145.12:5173',\n-      'https://dinero-sweeps.vercel.app'\n-    ];\n-\n-    const allAllowedOrigins = [...allowedOrigins, ...developmentOrigins];\n-\n-    console.log('üîç Incoming Origin:', origin);\n-\n-    // Allow requests with no origin (e.g., curl, mobile apps)\n-    if (!origin) {\n-      console.log('‚úÖ Allowing request without origin');\n-      return callback(null, true);\n-    }\n-\n-    if (origin.includes('localhost') || origin.includes('127.0.0.1')) {\n-      console.log('‚úÖ Allowing localhost origin:', origin);\n-      return callback(null, true);\n-    }\n-\n-    if (allAllowedOrigins.includes(origin) || allAllowedOrigins.includes('*')) {\n-      console.log('‚úÖ Allowed origin:', origin);\n-      return callback(null, true);\n-    }\n-\n-    console.log('‚ùå Blocked by CORS:', origin);\n-    return callback(new Error('Not allowed by CORS'));\n-  },\n+  origin: true, // Allow all origins\n   methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'],\n   allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept']\n };\n \n"
                },
                {
                    "date": 1752641183990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,10 @@\n   methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'],\n   allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept']\n };\n \n+console.log('üöÄ CORS Configuration loaded - All origins allowed');\n+\n app.use(cors(corsOptions));\n \n // Mount your REST API routes\n app.use(routes);\n"
                },
                {
                    "date": 1752641189837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,22 @@\n console.log('üöÄ CORS Configuration loaded - All origins allowed');\n \n app.use(cors(corsOptions));\n \n+// Additional CORS headers for preflight requests\n+app.use((req, res, next) => {\n+  res.header('Access-Control-Allow-Origin', '*');\n+  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n+  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');\n+  res.header('Access-Control-Allow-Credentials', 'true');\n+  \n+  if (req.method === 'OPTIONS') {\n+    res.sendStatus(200);\n+  } else {\n+    next();\n+  }\n+});\n+\n // Mount your REST API routes\n app.use(routes);\n \n // Fallback route for unmatched requests\n"
                },
                {
                    "date": 1752664843622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,10 @@\n import helmet from 'helmet';\n import morgan from 'morgan';\n import cors from 'cors';\n import bodyParser from 'body-parser';\n+import session from 'express-session';\n+const passport = require('../configs/passport.config');\n \n import config from '@src/configs/app.config';\n import i18n from '@src/libs/i18n';\n import routes from '@src/rest-resources/routes';\n@@ -26,8 +28,13 @@\n \n // Internationalization setup\n app.use(i18n.init);\n \n+// Session middleware\n+app.use(session({ secret: 'your_secret_key', resave: false, saveUninitialized: false }));\n+app.use(passport.initialize());\n+app.use(passport.session());\n+\n // ‚úÖ CORS configuration - Allow all origins\n const corsOptions = {\n   credentials: true,\n   origin: true, // Allow all origins\n"
                },
                {
                    "date": 1752667506383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,12 @@\n \n const app = express();\n \n // Secure HTTP headers\n-app.use(helmet());\n+app.use(helmet({\n+  crossOriginOpenerPolicy: false,\n+  originAgentCluster: false,\n+}));\n \n // Parse JSON body and keep raw body for signature verification if needed\n app.use(bodyParser.json({\n   verify: (req, res, buf) => {\n"
                }
            ],
            "date": 1752639389017,
            "name": "Commit-0",
            "content": "import bodyParser from 'body-parser'\nimport cors from 'cors'\nimport express from 'express'\nimport helmet from 'helmet'\nimport morgan from 'morgan'\n\nimport config from '@src/configs/app.config'\nimport i18n from '@src/libs/i18n'\nimport routes from '@src/rest-resources/routes'\nimport { errorHandlerMiddleware } from './middlewares/errorHandler.middleware'\n\nconst app = express()\n\napp.use(helmet())\n\n// app.use(bodyParser.json())\napp.use(\n  bodyParser.json({\n    verify: (req, res, buf) => {\n      req.rawBody = buf.toString(); // Save raw body as string\n    },\n  })\n)\n\napp.use(bodyParser.json())\n\napp.use(morgan('tiny'))\n\napp.use(i18n.init)\n\n// CORS Configuration\nconst corsOptions = {\n  credentials: true,\n  origin: function (origin, callback) {\n    // Allow requests with no origin (like mobile apps or curl requests)\n    if (!origin) return callback(null, true);\n    \n    const allowedOrigins = config.get('app.origin').split(',').filter(origin => origin.trim());\n    \n    // Add common development origins\n    const developmentOrigins = [\n      'http://localhost:3000',\n      'http://localhost:5173',\n      'http://127.0.0.1:3000',\n      'http://127.0.0.1:5173',\n      'https://dinero-sweeps.vercel.app'\n    ];\n    \n    const allAllowedOrigins = [...allowedOrigins, ...developmentOrigins];\n    \n    if (allAllowedOrigins.includes(origin) || allAllowedOrigins.includes('*')) {\n      callback(null, true);\n    } else {\n      console.log('CORS blocked origin:', origin);\n      callback(new Error('Not allowed by CORS'));\n    }\n  },\n  methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept'],\n  credentials: true\n}\n\napp.use(cors(corsOptions))\n\n\napp.use(routes)\n\napp.use(async (req, res) => {\n  res.status(404).json({ message: 'Welcome to player backend' })\n})\n\napp.use(errorHandlerMiddleware)\n\nexport default app\n"
        }
    ]
}