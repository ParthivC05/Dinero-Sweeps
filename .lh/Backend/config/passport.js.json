{
    "sourceFile": "backend/config/passport.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752728880437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752746103990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,132 +1,69 @@\n import passport from 'passport';\r\n import GoogleStrategy from 'passport-google-oauth20';\r\n import FacebookStrategy from 'passport-facebook';\r\n-import jwt from 'jsonwebtoken';\r\n import User from '../models/User.js';\r\n-import { logger } from './logger.js';\r\n \r\n const passportConfig = (passport) => {\r\n-  // Serialize user for the session\r\n-  passport.serializeUser((user, done) => {\r\n-    done(null, user.id);\r\n-  });\r\n-\r\n-  // Deserialize user from the session\r\n+  passport.serializeUser((user, done) => done(null, user.id));\r\n   passport.deserializeUser(async (id, done) => {\r\n     try {\r\n       const user = await User.findById(id);\r\n       done(null, user);\r\n-    } catch (error) {\r\n-      done(error, null);\r\n+    } catch (err) {\r\n+      done(err, null);\r\n     }\r\n   });\r\n \r\n-  // Google OAuth Strategy\r\n-  passport.use(\r\n-    new GoogleStrategy(\r\n-      {\r\n-        clientID: process.env.GOOGLE_CLIENT_ID,\r\n-        clientSecret: process.env.GOOGLE_CLIENT_SECRET,\r\n-        callbackURL: '/api/v1/auth/google/callback',\r\n-        scope: ['profile', 'email'],\r\n-      },\r\n-      async (accessToken, refreshToken, profile, done) => {\r\n-        try {\r\n-          // Check if user already exists\r\n-          let user = await User.findOne({ googleId: profile.id });\r\n-\r\n-          if (user) {\r\n-            return done(null, user);\r\n-          }\r\n-\r\n-          // Check if user exists with same email\r\n-          user = await User.findOne({ email: profile.emails[0].value });\r\n-\r\n-          if (user) {\r\n-            // Link Google account to existing user\r\n-            user.googleId = profile.id;\r\n-            user.isEmailVerified = true;\r\n-            await user.save();\r\n-            return done(null, user);\r\n-          }\r\n-\r\n-          // Create new user\r\n-          user = new User({\r\n-            googleId: profile.id,\r\n-            email: profile.emails[0].value,\r\n-            username: profile.emails[0].value.split('@')[0] + Math.random().toString(36).substr(2, 5),\r\n-            firstName: profile.name.givenName,\r\n-            lastName: profile.name.familyName,\r\n-            isEmailVerified: true,\r\n-            avatar: profile.photos[0]?.value,\r\n-            loginMethod: 'google',\r\n-          });\r\n-\r\n-          await user.save();\r\n-          return done(null, user);\r\n-        } catch (error) {\r\n-          logger.error('Google OAuth error:', error);\r\n-          return done(error, null);\r\n-        }\r\n+  // Google\r\n+  passport.use(new GoogleStrategy({\r\n+    clientID: process.env.GOOGLE_CLIENT_ID,\r\n+    clientSecret: process.env.GOOGLE_CLIENT_SECRET,\r\n+    callbackURL: '/api/v1/auth/google/callback',\r\n+    scope: ['profile', 'email'],\r\n+  }, async (accessToken, refreshToken, profile, done) => {\r\n+    try {\r\n+      let user = await User.findOne({ googleId: profile.id });\r\n+      if (!user) {\r\n+        user = await User.create({\r\n+          googleId: profile.id,\r\n+          email: profile.emails[0].value,\r\n+          username: profile.emails[0].value.split('@')[0] + Math.random().toString(36).substr(2, 5),\r\n+          firstName: profile.name.givenName,\r\n+          lastName: profile.name.familyName,\r\n+          loginMethod: 'google',\r\n+        });\r\n       }\r\n-    )\r\n-  );\r\n+      done(null, user);\r\n+    } catch (err) {\r\n+      done(err, null);\r\n+    }\r\n+  }));\r\n \r\n-  // Facebook OAuth Strategy\r\n-  passport.use(\r\n-    new FacebookStrategy(\r\n-      {\r\n-        clientID: process.env.FACEBOOK_APP_ID,\r\n-        clientSecret: process.env.FACEBOOK_APP_SECRET,\r\n-        callbackURL: '/api/v1/auth/facebook/callback',\r\n-        profileFields: ['id', 'emails', 'name', 'picture'],\r\n-      },\r\n-      async (accessToken, refreshToken, profile, done) => {\r\n-        try {\r\n-          // Check if user already exists\r\n-          let user = await User.findOne({ facebookId: profile.id });\r\n-\r\n-          if (user) {\r\n-            return done(null, user);\r\n-          }\r\n-\r\n-          // Check if user exists with same email\r\n-          if (profile.emails && profile.emails[0]) {\r\n-            user = await User.findOne({ email: profile.emails[0].value });\r\n-\r\n-            if (user) {\r\n-              // Link Facebook account to existing user\r\n-              user.facebookId = profile.id;\r\n-              user.isEmailVerified = true;\r\n-              await user.save();\r\n-              return done(null, user);\r\n-            }\r\n-          }\r\n-\r\n-          // Create new user\r\n-          const email = profile.emails?.[0]?.value || `${profile.id}@facebook.com`;\r\n-          const username = email.split('@')[0] + Math.random().toString(36).substr(2, 5);\r\n-\r\n-          user = new User({\r\n-            facebookId: profile.id,\r\n-            email: email,\r\n-            username: username,\r\n-            firstName: profile.name.givenName,\r\n-            lastName: profile.name.familyName,\r\n-            isEmailVerified: !!profile.emails?.[0]?.value,\r\n-            avatar: profile.photos?.[0]?.value,\r\n-            loginMethod: 'facebook',\r\n-          });\r\n-\r\n-          await user.save();\r\n-          return done(null, user);\r\n-        } catch (error) {\r\n-          logger.error('Facebook OAuth error:', error);\r\n-          return done(error, null);\r\n-        }\r\n+  // Facebook\r\n+  passport.use(new FacebookStrategy({\r\n+    clientID: process.env.FACEBOOK_APP_ID,\r\n+    clientSecret: process.env.FACEBOOK_APP_SECRET,\r\n+    callbackURL: '/api/v1/auth/facebook/callback',\r\n+    profileFields: ['id', 'emails', 'name'],\r\n+  }, async (accessToken, refreshToken, profile, done) => {\r\n+    try {\r\n+      let user = await User.findOne({ facebookId: profile.id });\r\n+      if (!user) {\r\n+        const email = profile.emails?.[0]?.value || `${profile.id}@facebook.com`;\r\n+        user = await User.create({\r\n+          facebookId: profile.id,\r\n+          email,\r\n+          username: email.split('@')[0] + Math.random().toString(36).substr(2, 5),\r\n+          firstName: profile.name.givenName,\r\n+          lastName: profile.name.familyName,\r\n+          loginMethod: 'facebook',\r\n+        });\r\n       }\r\n-    )\r\n-  );\r\n+      done(null, user);\r\n+    } catch (err) {\r\n+      done(err, null);\r\n+    }\r\n+  }));\r\n };\r\n \r\n export default passportConfig; \n\\ No newline at end of file\n"
                }
            ],
            "date": 1752728880437,
            "name": "Commit-0",
            "content": "import passport from 'passport';\r\nimport GoogleStrategy from 'passport-google-oauth20';\r\nimport FacebookStrategy from 'passport-facebook';\r\nimport jwt from 'jsonwebtoken';\r\nimport User from '../models/User.js';\r\nimport { logger } from './logger.js';\r\n\r\nconst passportConfig = (passport) => {\r\n  // Serialize user for the session\r\n  passport.serializeUser((user, done) => {\r\n    done(null, user.id);\r\n  });\r\n\r\n  // Deserialize user from the session\r\n  passport.deserializeUser(async (id, done) => {\r\n    try {\r\n      const user = await User.findById(id);\r\n      done(null, user);\r\n    } catch (error) {\r\n      done(error, null);\r\n    }\r\n  });\r\n\r\n  // Google OAuth Strategy\r\n  passport.use(\r\n    new GoogleStrategy(\r\n      {\r\n        clientID: process.env.GOOGLE_CLIENT_ID,\r\n        clientSecret: process.env.GOOGLE_CLIENT_SECRET,\r\n        callbackURL: '/api/v1/auth/google/callback',\r\n        scope: ['profile', 'email'],\r\n      },\r\n      async (accessToken, refreshToken, profile, done) => {\r\n        try {\r\n          // Check if user already exists\r\n          let user = await User.findOne({ googleId: profile.id });\r\n\r\n          if (user) {\r\n            return done(null, user);\r\n          }\r\n\r\n          // Check if user exists with same email\r\n          user = await User.findOne({ email: profile.emails[0].value });\r\n\r\n          if (user) {\r\n            // Link Google account to existing user\r\n            user.googleId = profile.id;\r\n            user.isEmailVerified = true;\r\n            await user.save();\r\n            return done(null, user);\r\n          }\r\n\r\n          // Create new user\r\n          user = new User({\r\n            googleId: profile.id,\r\n            email: profile.emails[0].value,\r\n            username: profile.emails[0].value.split('@')[0] + Math.random().toString(36).substr(2, 5),\r\n            firstName: profile.name.givenName,\r\n            lastName: profile.name.familyName,\r\n            isEmailVerified: true,\r\n            avatar: profile.photos[0]?.value,\r\n            loginMethod: 'google',\r\n          });\r\n\r\n          await user.save();\r\n          return done(null, user);\r\n        } catch (error) {\r\n          logger.error('Google OAuth error:', error);\r\n          return done(error, null);\r\n        }\r\n      }\r\n    )\r\n  );\r\n\r\n  // Facebook OAuth Strategy\r\n  passport.use(\r\n    new FacebookStrategy(\r\n      {\r\n        clientID: process.env.FACEBOOK_APP_ID,\r\n        clientSecret: process.env.FACEBOOK_APP_SECRET,\r\n        callbackURL: '/api/v1/auth/facebook/callback',\r\n        profileFields: ['id', 'emails', 'name', 'picture'],\r\n      },\r\n      async (accessToken, refreshToken, profile, done) => {\r\n        try {\r\n          // Check if user already exists\r\n          let user = await User.findOne({ facebookId: profile.id });\r\n\r\n          if (user) {\r\n            return done(null, user);\r\n          }\r\n\r\n          // Check if user exists with same email\r\n          if (profile.emails && profile.emails[0]) {\r\n            user = await User.findOne({ email: profile.emails[0].value });\r\n\r\n            if (user) {\r\n              // Link Facebook account to existing user\r\n              user.facebookId = profile.id;\r\n              user.isEmailVerified = true;\r\n              await user.save();\r\n              return done(null, user);\r\n            }\r\n          }\r\n\r\n          // Create new user\r\n          const email = profile.emails?.[0]?.value || `${profile.id}@facebook.com`;\r\n          const username = email.split('@')[0] + Math.random().toString(36).substr(2, 5);\r\n\r\n          user = new User({\r\n            facebookId: profile.id,\r\n            email: email,\r\n            username: username,\r\n            firstName: profile.name.givenName,\r\n            lastName: profile.name.familyName,\r\n            isEmailVerified: !!profile.emails?.[0]?.value,\r\n            avatar: profile.photos?.[0]?.value,\r\n            loginMethod: 'facebook',\r\n          });\r\n\r\n          await user.save();\r\n          return done(null, user);\r\n        } catch (error) {\r\n          logger.error('Facebook OAuth error:', error);\r\n          return done(error, null);\r\n        }\r\n      }\r\n    )\r\n  );\r\n};\r\n\r\nexport default passportConfig; "
        }
    ]
}